{"file_contents":{"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Hospital Resident Management System\n\n## Overview\n\nThis is a web-based Hospital Resident Management System designed to track and manage medical residents (specialist trainees) throughout their training period. The system handles comprehensive resident profiles, mandatory training forms, performance evaluations, disciplinary actions, and faculty supervision. It provides role-based access control with admin and viewer permissions, along with reporting capabilities for institutional oversight.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Recent Changes (August 26, 2025)\n\n**Migration and Restructuring:**\n- ✅ Successfully migrated project from Replit Agent to Replit environment\n- ✅ Restructured server architecture with better organization:\n  - Created `/server/models/` folder with separate model files (User.ts, Resident.ts, Teacher.ts)\n  - Created `/server/controllers/` folder with UserController, ResidentController, TeacherController\n  - Organized `/server/routes/` with clean route definitions using controllers\n  - Removed faculty functionality as requested by user\n  - Replaced faculty system with comprehensive teacher management\n- ✅ Enhanced teacher form system with full validation and database persistence\n- ✅ Updated shared schema to remove circular dependencies and faculty references\n- ✅ Server now running successfully on port 5000 with MongoDB fallback to in-memory storage\n- ✅ Implemented MVC pattern with controllers for better code organization\n\n## System Architecture\n\n### Frontend Architecture\n- **React 18** with TypeScript for type-safe component development\n- **Vite** as the build tool and development server for fast hot module replacement\n- **Wouter** for lightweight client-side routing\n- **TailwindCSS** for utility-first styling with custom hospital theme colors\n- **shadcn/ui** component library built on Radix UI primitives for accessible UI components\n- **TanStack Query** (React Query) for server state management and caching\n- **React Hook Form** with Zod validation for form handling\n\n### Backend Architecture\n- **Express.js** server with TypeScript for API endpoints\n- **RESTful API design** with organized route handlers\n- **Session-based authentication** using MongoDB session store\n- **Replit Auth integration** for OAuth-based user authentication\n- **Role-based access control** (admin/viewer permissions)\n- **Middleware pattern** for request logging and error handling\n\n### Data Layer\n- **MongoDB** database for flexible document-based storage with fallback to in-memory storage\n- **Mongoose ODM** for schema modeling and database operations\n- **Database collections** include users, residents, faculty, forms, disciplinary actions, rewards, and sessions\n- **Schema validation** using Zod for runtime type checking\n- **Document-based data modeling** with embedded and referenced relationships\n- **Comprehensive seeding system** with 36 faculty members across 12 departments and 14 residents\n- **Department-based organization** for Internal Medicine, Surgery, Cardiology, Emergency Medicine, Pediatrics, Psychiatry, Radiology, Anesthesiology, OB/GYN, Orthopedic Surgery, Neurology, and Dermatology\n\n### Key Features\n- **Resident Management**: Complete CRUD operations for resident profiles with department assignment and status tracking\n- **Training Forms System**: Nine mandatory forms (J, F, D, I, G, E, C, H, K) with completion tracking and form data storage\n- **Teacher Management**: Comprehensive teacher profiles with detailed information including academic rank, appointment dates, contact details, and department assignment (replaces faculty system)\n- **Disciplinary Actions & Rewards**: Tracking system for resident performance incidents and achievements\n- **Reports Module**: Detailed reporting capabilities for residents, forms, disciplinary actions, rewards, and teachers\n- **Authentication**: Secure OAuth integration with Replit Auth system with demo authentication fallback\n- **Authorization**: Role-based permissions for admin (full access) and viewer (read-only) users\n- **Teacher Form Submission**: Full validation and database persistence for teacher registration forms\n\n### Design Patterns\n- **Repository Pattern**: Storage interface abstraction for data access operations\n- **Component Composition**: Reusable UI components with consistent design system\n- **Hooks Pattern**: Custom React hooks for authentication and mobile detection\n- **Error Boundary**: Centralized error handling with user-friendly messaging\n- **Loading States**: Skeleton components and loading indicators for better UX\n\n## External Dependencies\n\n### Database & ODM\n- **MongoDB** for document-based database storage\n- **Mongoose** ODM for schema modeling and database operations\n\n### Authentication\n- **Replit Auth** OAuth provider integration\n- **OpenID Connect** client for authentication flow\n- **Passport.js** strategy for session management\n- **connect-mongo** for MongoDB session storage\n\n### UI Framework\n- **Radix UI** primitives for accessible component foundation\n- **Lucide React** for consistent icon library\n- **Class Variance Authority** for component variant management\n- **TailwindCSS** with PostCSS for styling pipeline\n\n### Development Tools\n- **TypeScript** for static type checking across frontend and backend\n- **ESBuild** for production backend bundling\n- **Vite plugins** including runtime error overlay and Replit integration\n- **TSX** for TypeScript execution in development\n\n### Utilities\n- **date-fns** for date manipulation and formatting\n- **nanoid** for unique ID generation\n- **memoizee** for function result caching\n- **clsx** and **tailwind-merge** for conditional CSS class handling","size_bytes":5707},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        \"hospital-green\": {\n          50: \"var(--hospital-green-50)\",\n          100: \"var(--hospital-green-100)\",\n          200: \"var(--hospital-green-200)\",\n          300: \"var(--hospital-green-300)\",\n          400: \"var(--hospital-green-400)\",\n          500: \"var(--hospital-green-500)\",\n          600: \"var(--hospital-green-600)\",\n          700: \"var(--hospital-green-700)\",\n          800: \"var(--hospital-green-800)\",\n          900: \"var(--hospital-green-900)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        inter: [\"Inter\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3283},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\nimport { fileURLToPath } from \"url\";\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\n// پلاگین‌ها را در یک آرایه مدیریت می‌کنیم\nconst plugins = [react(), runtimeErrorOverlay()];\n\n// فقط وقتی در repl باشیم cartographer اضافه شود\nif (process.env.NODE_ENV !== \"production\" && process.env.REPL_ID !== undefined) {\n  const { cartographer } = await import(\"@replit/vite-plugin-cartographer\");\n  plugins.push(cartographer());\n}\n\nexport default defineConfig({\n  plugins,\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(__dirname, \"shared\"),\n      \"@assets\": path.resolve(__dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(__dirname, \"client\"),\n  build: {\n    outDir: path.resolve(__dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    host: \"0.0.0.0\",\n    port: 5000,\n    strictPort: true,\n    hmr: {\n      clientPort: 443,\n    },\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1236},"server/db.ts":{"content":"import mongoose from 'mongoose';\n\n// MongoDB connection string - prioritize environment variable first\nlet MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/hospital-residents';\n\n// If DATABASE_URL is set and looks like MongoDB, use it\nif (process.env.DATABASE_URL && process.env.DATABASE_URL.includes('mongodb')) {\n  MONGODB_URI = process.env.DATABASE_URL;\n} else if (process.env.DATABASE_URL && process.env.DATABASE_URL.includes('postgresql')) {\n  console.log('PostgreSQL DATABASE_URL detected, using MongoDB URI for hospital data');\n}\n\nlet isConnected = false;\n\n// Connect to MongoDB with retry logic\nexport async function connectDB() {\n  if (isConnected) {\n    return;\n  }\n  \n  try {\n    await mongoose.connect(MONGODB_URI, {\n      serverSelectionTimeoutMS: 5000, // 5 second timeout\n      socketTimeoutMS: 45000,\n    });\n    isConnected = true;\n    console.log('Connected to MongoDB successfully at:', MONGODB_URI);\n    await seedDatabase();\n  } catch (error) {\n    console.warn('MongoDB connection failed, using in-memory fallback:', (error as Error).message);\n    console.log('To connect to MongoDB Atlas, set MONGODB_URI environment variable');\n    // Initialize in-memory data for demo\n    await initializeInMemoryData();\n  }\n}\n\n// Seed database with sample data\nasync function seedDatabase() {\n  // Only seed if actually connected to MongoDB\n  if (!isConnected || mongoose.connection.readyState !== 1) {\n    console.log('Skipping database seeding - MongoDB not connected');\n    return;\n  }\n  \n  try {\n    const { ResidentModel, TeacherModel } = await import('./models');\n    \n    // Check if data already exists\n    const residentCount = await ResidentModel.countDocuments();\n    const teacherCount = await TeacherModel.countDocuments();\n    \n    if (residentCount === 0) {\n      // Seed residents\n      const residents = [\n        {\n          fullName: \"Dr. Sarah Johnson\",\n          age: 28,\n          gender: \"Female\",\n          department: \"Internal Medicine\",\n          startDate: new Date(\"2024-01-15\"),\n          status: \"active\"\n        },\n        {\n          fullName: \"Dr. Michael Chen\",\n          age: 29,\n          gender: \"Male\", \n          department: \"Surgery\",\n          startDate: new Date(\"2024-02-01\"),\n          status: \"active\"\n        },\n        {\n          fullName: \"Dr. Emily Rodriguez\",\n          age: 27,\n          gender: \"Female\",\n          department: \"Pediatrics\", \n          startDate: new Date(\"2024-03-10\"),\n          status: \"active\"\n        }\n      ];\n      \n      await ResidentModel.insertMany(residents);\n      console.log('Sample residents data seeded successfully');\n    }\n    \n    if (teacherCount === 0) {\n      // Seed teachers\n      const teachers = [\n        {\n          fullName: \"Dr. Robert Williams\",\n          email: \"r.williams@hospital.com\",\n          phone: \"555-0101\",\n          department: \"Internal Medicine\",\n          academicRank: \"Professor\",\n          appointmentDate: new Date(\"2015-08-01\"),\n          status: \"active\"\n        },\n        {\n          fullName: \"Dr. Lisa Anderson\",\n          email: \"l.anderson@hospital.com\", \n          phone: \"555-0102\",\n          department: \"Surgery\",\n          academicRank: \"Associate Professor\",\n          appointmentDate: new Date(\"2018-09-15\"),\n          status: \"active\"\n        }\n      ];\n      \n      await TeacherModel.insertMany(teachers);\n      console.log('Sample teachers data seeded successfully');\n    }\n  } catch (error) {\n    console.error('Error seeding database:', error);\n  }\n}\n\n// Initialize in-memory data when MongoDB is not available\nasync function initializeInMemoryData() {\n  console.log('MongoDB initialization failed, using in-memory storage');\n  // The models will work with in-memory data for demo purposes\n}\n\n// Check if MongoDB is connected\nexport function isMongoConnected() {\n  return isConnected && mongoose.connection.readyState === 1;\n}\n\n// Export mongoose for direct use if needed\nexport { mongoose };","size_bytes":3965},"server/demoAuth.ts":{"content":"import type { Express, RequestHandler } from \"express\";\nimport session from \"express-session\";\nimport MemoryStore from \"memorystore\";\nimport { storage } from \"./storage\";\nimport { DEMO_CREDENTIALS } from \"@shared/schema\";\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const MemoryStoreSession = MemoryStore(session);\n  \n  return session({\n    secret: process.env.SESSION_SECRET || 'demo-secret-key-for-hospital-system',\n    store: new MemoryStoreSession({\n      checkPeriod: 86400000, // prune expired entries every 24h\n    }),\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: false, // Set to false for development\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nexport async function setupDemoAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n\n  // Demo login endpoint\n  app.post(\"/api/login\", async (req, res) => {\n    const { username, password } = req.body;\n    \n    // Check demo credentials\n    const isAdmin = username === DEMO_CREDENTIALS.admin.username && \n                   password === DEMO_CREDENTIALS.admin.password;\n    const isViewer = username === DEMO_CREDENTIALS.viewer.username && \n                    password === DEMO_CREDENTIALS.viewer.password;\n\n    if (isAdmin || isViewer) {\n      const credentials = isAdmin ? DEMO_CREDENTIALS.admin : DEMO_CREDENTIALS.viewer;\n      \n      // Store user in session\n      (req.session as any).user = {\n        claims: {\n          sub: credentials.id,\n          email: credentials.username,\n          first_name: credentials.firstName,\n          last_name: credentials.lastName,\n        },\n        expires_at: Math.floor(Date.now() / 1000) + (7 * 24 * 60 * 60), // 1 week from now\n      };\n\n      // Also ensure user exists in database\n      await storage.upsertUser({\n        _id: credentials.id,\n        email: credentials.username,\n        firstName: credentials.firstName,\n        lastName: credentials.lastName,\n        role: credentials.role,\n      });\n\n      res.json({ \n        success: true, \n        user: {\n          _id: credentials.id,\n          email: credentials.username,\n          firstName: credentials.firstName,\n          lastName: credentials.lastName,\n          role: credentials.role\n        }\n      });\n    } else {\n      res.status(401).json({ message: \"Invalid credentials\" });\n    }\n  });\n\n  // Demo logout endpoint\n  app.get(\"/api/logout\", (req, res) => {\n    req.session.destroy(() => {\n      res.json({ success: true });\n    });\n  });\n\n  // Get current demo user\n  app.get(\"/api/demo-info\", (req, res) => {\n    res.json({\n      admin: {\n        username: DEMO_CREDENTIALS.admin.username,\n        password: DEMO_CREDENTIALS.admin.password,\n      },\n      viewer: {\n        username: DEMO_CREDENTIALS.viewer.username,  \n        password: DEMO_CREDENTIALS.viewer.password,\n      }\n    });\n  });\n}\n\nexport const isDemoAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = (req.session as any)?.user;\n\n  if (!user || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now > user.expires_at) {\n    return res.status(401).json({ message: \"Session expired\" });\n  }\n\n  // Add user to request for compatibility\n  (req as any).user = user;\n  return next();\n};","size_bytes":3358},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\r\nimport { registerRoutes } from \"./routes\";\r\nimport { setupVite, serveStatic, log } from \"./vite\";\r\nimport { connectDB } from \"./db\";\r\nimport monographRoutes from \"./routes/form-C\";\r\nimport conferenceRoutes from \"./routes/form-D\";\r\nimport evaluationFormERoutes from \"./routes/form-E\";\r\nimport evaluationFormGRoutes from \"./routes/form-G\";\r\nimport formHRoutes from \"./routes/form-H\";\r\nimport monographEvaluationRoutes from \"./routes/form-k\";\r\n\r\nconst app = express();\r\n\r\n// Parsers\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: false }));\r\n\r\n// API routes\r\napp.use(\"/api/monograph\", monographRoutes);\r\napp.use(\"/api/conference\", conferenceRoutes);\r\napp.use(\"/api/evaluationFormE\", evaluationFormERoutes);\r\napp.use(\"/api/evaluationFormH\", formHRoutes);\r\napp.use(\"/api/evaluationFormG\", evaluationFormGRoutes);\r\napp.use(\"/api/monographEvaluation\", monographEvaluationRoutes);\r\n\r\n// Logging middleware for API responses\r\napp.use((req, res, next) => {\r\n  const start = Date.now();\r\n  const path = req.path;\r\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\r\n\r\n  const originalResJson = res.json;\r\n  res.json = function (bodyJson, ...args) {\r\n    capturedJsonResponse = bodyJson;\r\n    return originalResJson.apply(res, [bodyJson, ...args]);\r\n  };\r\n\r\n  res.on(\"finish\", () => {\r\n    const duration = Date.now() - start;\r\n    if (path.startsWith(\"/api\")) {\r\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\r\n      if (capturedJsonResponse) {\r\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\r\n      }\r\n      if (logLine.length > 80) {\r\n        logLine = logLine.slice(0, 79) + \"…\";\r\n      }\r\n      log(logLine);\r\n    }\r\n  });\r\n\r\n  next();\r\n});\r\n\r\n// Error handler\r\napp.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\r\n  const status = err.status || err.statusCode || 500;\r\n  const message = err.message || \"Internal Server Error\";\r\n  res.status(status).json({ message });\r\n});\r\n\r\n// ---- Main bootstrap ----\r\n(async () => {\r\n  // DB\r\n  await connectDB();\r\n\r\n  // registerRoutes returns http.Server usually\r\n  const server = await registerRoutes(app);\r\n\r\n  // در حالت production فایل‌های استاتیک را سرو کن\r\n  if (app.get(\"env\") !== \"development\") {\r\n    serveStatic(app);\r\n  }\r\n\r\n  // Listen\r\n  const port = parseInt(process.env.PORT || \"5000\", 10);\r\n  server.listen(\r\n    { port, host: \"0.0.0.0\" },\r\n    async () => {\r\n      log(`serving on port ${port}`);\r\n\r\n      // فقط در حالت dev یک بار setupVite را اجرا کن\r\n      if (app.get(\"env\") === \"development\") {\r\n        try {\r\n          await setupVite(app, server);\r\n          log(\"Vite development server setup complete\");\r\n        } catch (error) {\r\n          console.error(\"Vite setup failed:\", error);\r\n        }\r\n      }\r\n    }\r\n  );\r\n})();\r\n","size_bytes":2930},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport MongoStore from \"connect-mongo\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const mongoStore = MongoStore.create({\n    mongoUrl: process.env.DATABASE_URL || 'mongodb://localhost:27017/hospital-residents',\n    touchAfter: 24 * 3600, // lazy session update\n  });\n  \n  return session({\n    secret: process.env.SESSION_SECRET || 'demo-secret-key-for-hospital-system',\n    store: mongoStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: false, // Set to false for development\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4276},"server/routes.ts":{"content":"import type { Express } from \"express\";\r\nimport { createServer, type Server } from \"http\";\r\nimport { setupDemoAuth, isDemoAuthenticated } from \"./demoAuth\";\r\nimport { UserController, ResidentController, TeacherController } from \"./controllers\";\r\nimport { trainerRoutes } from \"./routes/trainerRoutes\";\r\nimport { TeacherModel } from \"./models\";\r\nimport { teacherActivityRoutes } from \"./routes/teacherActivityRoutes\";\r\nimport checklistRoutes from \"./routes/form-F\";\r\n\r\n\r\n\r\n\r\nexport async function registerRoutes(app: Express): Promise<Server> {\r\n  // Demo Auth middleware\r\n  await setupDemoAuth(app);\r\n//////////////////////////////////////\r\n  \r\n  //tranerRoters\r\n  app.use('/api/trainers', trainerRoutes);\r\n  \r\n  ///////////////////////////////////////////\r\n  // Checklist routes\r\n  // استفاده از روتر\r\napp.use(\"/api/checklists\", checklistRoutes);\r\n\r\n  ///////////////////////////////////////////\r\n\r\n  // Teacher Activity routes\r\n  //////////////////////////////////////////////\r\n\r\n  app.use(\"/api/teacher-activities\", teacherActivityRoutes);\r\n\r\n  //////////////////////////////////////////////\r\n\r\n\r\n  // Auth routes\r\n  app.get('/api/auth/user', isDemoAuthenticated, UserController.getCurrentUser);\r\n\r\n  // User routes\r\n  app.get(\"/api/users\", isDemoAuthenticated, UserController.getAllUsers);\r\n  app.get(\"/api/users/:id\", isDemoAuthenticated, UserController.getUserById);\r\n\r\n  // Resident routes\r\n  app.get(\"/api/residents\", isDemoAuthenticated, ResidentController.getAllResidents);\r\n  app.get(\"/api/residents/:id\", isDemoAuthenticated, ResidentController.getResidentById);\r\n  app.post(\"/api/residents\", isDemoAuthenticated, ResidentController.createResident);\r\n  app.put(\"/api/residents/:id\", isDemoAuthenticated, ResidentController.updateResident);\r\n  app.delete(\"/api/residents/:id\", isDemoAuthenticated, ResidentController.deleteResident);\r\n\r\n  // Teacher routes\r\n  app.get(\"/api/teachers\", isDemoAuthenticated, TeacherController.getAllTeachers);\r\n  app.get(\"/api/teachers/:id\", isDemoAuthenticated, TeacherController.getTeacherById);\r\n  app.post(\"/api/teachers\", isDemoAuthenticated, TeacherController.createTeacher);\r\n  app.put(\"/api/teachers/:id\", isDemoAuthenticated, TeacherController.updateTeacher);\r\n  app.delete(\"/api/teachers/:id\", isDemoAuthenticated, TeacherController.deleteTeacher);\r\n\r\n  // Forms\r\n  app.get(\"/api/forms\", isDemoAuthenticated, async (req, res) => {\r\n    try {\r\n      // Return form types for the forms system\r\n      const formTypes = [\r\n        { id: 'J', name: 'Form J - Initial Assessment' },\r\n        { id: 'F', name: 'Form F - Monthly Evaluation' },\r\n        { id: 'D', name: 'Form D - Skills Assessment' },\r\n        { id: 'I', name: 'Form I - Clinical Performance' },\r\n        { id: 'G', name: 'Form G - Research Progress' },\r\n        { id: 'E', name: 'Form E - Professional Development' },\r\n        { id: 'C', name: 'Form C - Case Study Review' },\r\n        { id: 'H', name: 'Form H - Final Evaluation' },\r\n        { id: 'K', name: 'Form K - Competency Review' }\r\n      ];\r\n      res.json(formTypes);\r\n    } catch (error) {\r\n      console.error(\"Error fetching forms:\", error);\r\n      res.status(500).json({ message: \"Failed to fetch forms\" });\r\n    }\r\n  });\r\n\r\n  // Disciplinary actions\r\n  app.get(\"/api/disciplinary\", isDemoAuthenticated, async (req, res) => {\r\n    try {\r\n      // Placeholder for disciplinary actions\r\n      res.json([]);\r\n    } catch (error) {\r\n      console.error(\"Error fetching disciplinary actions:\", error);\r\n      res.status(500).json({ message: \"Failed to fetch disciplinary actions\" });\r\n    }\r\n  });\r\n\r\n  // Rewards\r\n  app.get(\"/api/rewards\", isDemoAuthenticated, async (req, res) => {\r\n    try {\r\n      // Placeholder for rewards\r\n      res.json([]);\r\n    } catch (error) {\r\n      console.error(\"Error fetching rewards:\", error);\r\n      res.status(500).json({ message: \"Failed to fetch rewards\" });\r\n    }\r\n  });\r\n\r\n  // Reports\r\n  app.get(\"/api/reports\", isDemoAuthenticated, async (req, res) => {\r\n    try {\r\n      const { ResidentModel } = await import(\"./models\");\r\n      const reports = {\r\n        residents: await ResidentModel.countDocuments(),\r\n        teachers: await TeacherModel.countDocuments(),\r\n        forms: 9, // Number of form types\r\n        activeResidents: await ResidentModel.countDocuments({ status: 'active' }),\r\n        inactiveResidents: await ResidentModel.countDocuments({ status: 'inactive' }),\r\n        activeTeachers: await TeacherModel.countDocuments({ status: 'active' }),\r\n        inactiveTeachers: await TeacherModel.countDocuments({ status: 'inactive' })\r\n      };\r\n      res.json(reports);\r\n    } catch (error) {\r\n      console.error(\"Error generating reports:\", error);\r\n      res.status(500).json({ message: \"Failed to generate reports\" });\r\n    }\r\n  });\r\n\r\n  return createServer(app);\r\n}","size_bytes":4809},"server/storage.ts":{"content":"import { UserModel, ResidentModel, TeacherModel } from \"./models\";\nimport {\n  type User,\n  type UpsertUser,\n  type Resident,\n  type InsertResident,\n  type Teacher,\n  type InsertTeacher,\n  type Form,\n  type InsertForm,\n  type DisciplinaryAction,\n  type InsertDisciplinaryAction,\n  type Reward,\n  type InsertReward,\n  DEMO_CREDENTIALS,\n} from \"@shared/schema\";\nimport { connectDB } from \"./db\";\n// import { seedDatabase } from \"./seeds\"; // Removed\n\nexport interface IStorage {\n  // User operations (mandatory for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n\n  // Resident operations\n  getAllResidents(): Promise<Resident[]>;\n  getResident(id: string): Promise<Resident | undefined>;\n  createResident(resident: InsertResident): Promise<Resident>;\n  updateResident(id: string, resident: Partial<InsertResident>): Promise<Resident>;\n  deleteResident(id: string): Promise<void>;\n\n  // Teacher operations (replacing faculty)\n\n  getAllTeachers(): Promise<Teacher[]>;\n  getTeacher(id: string): Promise<Teacher | undefined>;\n  createTeacher(teacher: InsertTeacher): Promise<Teacher>;\n  updateTeacher(id: string, teacher: Partial<InsertTeacher>): Promise<Teacher>;\n  deleteTeacher(id: string): Promise<void>;\n\n  // Form operations\n  getResidentForms(residentId: string): Promise<Form[]>;\n  getForm(id: string): Promise<Form | undefined>;\n  createForm(form: InsertForm): Promise<Form>;\n  updateForm(id: string, form: Partial<InsertForm>): Promise<Form>;\n  deleteForm(id: string): Promise<void>;\n\n  // Disciplinary action operations\n  getResidentDisciplinaryActions(residentId: string): Promise<DisciplinaryAction[]>;\n  createDisciplinaryAction(action: InsertDisciplinaryAction): Promise<DisciplinaryAction>;\n  updateDisciplinaryAction(id: string, action: Partial<InsertDisciplinaryAction>): Promise<DisciplinaryAction>;\n  deleteDisciplinaryAction(id: string): Promise<void>;\n\n  // Reward operations\n  getResidentRewards(residentId: string): Promise<Reward[]>;\n  createReward(reward: InsertReward): Promise<Reward>;\n  updateReward(id: string, reward: Partial<InsertReward>): Promise<Reward>;\n  deleteReward(id: string): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  private demoUsers: Map<string, User> = new Map();\n  private demoResidents: Map<string, Resident> = new Map();\n  private demoTeachers: Map<string, Teacher> = new Map();\n  private demoForms: Map<string, Form> = new Map();\n  private demoDisciplinaryActions: Map<string, DisciplinaryAction> = new Map();\n  private demoRewards: Map<string, Reward> = new Map();\n  private isMongoConnected: boolean = false;\n\n  constructor() {\n    // Initialize database connection and demo data\n    this.initializeDatabase();\n  }\n\n  private async initializeDatabase() {\n    try {\n      await connectDB();\n      this.isMongoConnected = true;\n      \n      // MongoDB connected successfully\n      \n    } catch (error) {\n      console.warn('MongoDB initialization failed, using in-memory storage:', (error as Error).message);\n      this.isMongoConnected = false;\n      this.createDemoUsers();\n    }\n  }\n\n  private createDemoUsers() {\n    // Create demo admin user\n    this.demoUsers.set(DEMO_CREDENTIALS.admin.id, {\n      _id: DEMO_CREDENTIALS.admin.id,\n      email: DEMO_CREDENTIALS.admin.username,\n      firstName: DEMO_CREDENTIALS.admin.firstName,\n      lastName: DEMO_CREDENTIALS.admin.lastName,\n      role: DEMO_CREDENTIALS.admin.role,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    } as User);\n\n    // Create demo viewer user\n    this.demoUsers.set(DEMO_CREDENTIALS.viewer.id, {\n      _id: DEMO_CREDENTIALS.viewer.id,\n      email: DEMO_CREDENTIALS.viewer.username,\n      firstName: DEMO_CREDENTIALS.viewer.firstName,\n      lastName: DEMO_CREDENTIALS.viewer.lastName,\n      role: DEMO_CREDENTIALS.viewer.role,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    } as User);\n\n    console.log('Demo users initialized successfully');\n  }\n\n  // User operations (mandatory for Replit Auth)\n  async getUser(id: string): Promise<User | undefined> {\n    if (this.isMongoConnected) {\n      try {\n        const user = await UserModel.findById(id);\n        return user || undefined;\n      } catch (error) {\n        console.error('Error fetching user from MongoDB:', (error as Error).message);\n      }\n    }\n    return this.demoUsers.get(id);\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    if (this.isMongoConnected) {\n      try {\n        const user = await UserModel.findByIdAndUpdate(\n          userData._id,\n          {\n            ...userData,\n            role: userData.role || \"viewer\",\n            updatedAt: new Date(),\n          },\n          { upsert: true, new: true }\n        );\n        return user!;\n      } catch (error) {\n        console.error('Error upserting user to MongoDB:', (error as Error).message);\n      }\n    }\n    \n    const user: User = {\n      _id: userData._id,\n      email: userData.email,\n      firstName: userData.firstName,\n      lastName: userData.lastName,\n      role: userData.role || \"viewer\",\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    } as User;\n    \n    this.demoUsers.set(userData._id, user);\n    return user;\n  }\n\n  // Resident operations\n  async getAllResidents(): Promise<Resident[]> {\n    if (this.isMongoConnected) {\n      try {\n        const residents = await ResidentModel.find({ status: 'active' })\n          .sort({ department: 1, fullName: 1 });\n        return residents;\n      } catch (error) {\n        console.error('Error fetching residents from MongoDB:', (error as Error).message);\n      }\n    }\n    return Array.from(this.demoResidents.values()).sort((a, b) => \n      new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n    );\n  }\n\n  async getResident(id: string): Promise<Resident | undefined> {\n    if (this.isMongoConnected) {\n      try {\n        const resident = await ResidentModel.findById(id);\n        return resident || undefined;\n      } catch (error) {\n        console.error('Error fetching resident from MongoDB:', (error as Error).message);\n      }\n    }\n    return this.demoResidents.get(id);\n  }\n\n  async createResident(resident: InsertResident): Promise<Resident> {\n    if (this.isMongoConnected) {\n      try {\n        const newResident = await ResidentModel.create(resident);\n        return newResident;\n      } catch (error) {\n        console.error('Error creating resident in MongoDB:', (error as Error).message);\n      }\n    }\n    \n    const id = `resident_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const newResident: Resident = {\n      _id: id,\n      ...resident,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    } as Resident;\n    \n    this.demoResidents.set(id, newResident);\n    return newResident;\n  }\n\n  async updateResident(id: string, resident: Partial<InsertResident>): Promise<Resident> {\n    const existing = this.demoResidents.get(id);\n    if (!existing) {\n      throw new Error('Resident not found');\n    }\n    \n    const updated = { ...existing, ...resident, updatedAt: new Date() } as Resident;\n    this.demoResidents.set(id, updated);\n    return updated;\n  }\n\n  async deleteResident(id: string): Promise<void> {\n    this.demoResidents.delete(id);\n  }\n\n\n  // Teacher operations\n  async getAllTeachers(): Promise<Teacher[]> {\n    if (this.isMongoConnected) {\n      try {\n        const teachers = await TeacherModel.find({ status: 'active' })\n          .sort({ department: 1, name: 1 });\n        return teachers;\n      } catch (error) {\n        console.error('Error fetching teachers from MongoDB:', (error as Error).message);\n      }\n    }\n    return Array.from(this.demoTeachers.values()).sort((a, b) => \n      new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n    );\n  }\n\n  async getTeacher(id: string): Promise<Teacher | undefined> {\n    if (this.isMongoConnected) {\n      try {\n        const teacher = await TeacherModel.findById(id);\n        return teacher || undefined;\n      } catch (error) {\n        console.error('Error fetching teacher from MongoDB:', (error as Error).message);\n      }\n    }\n    return this.demoTeachers.get(id);\n  }\n\n  async createTeacher(teacherData: InsertTeacher): Promise<Teacher> {\n    if (this.isMongoConnected) {\n      try {\n        const teacher = await TeacherModel.create(teacherData);\n        return teacher;\n      } catch (error) {\n        console.error('Error creating teacher in MongoDB:', (error as Error).message);\n      }\n    }\n    \n    const id = `teacher_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const newTeacher: Teacher = {\n      _id: id,\n      ...teacherData,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    } as Teacher;\n    \n    this.demoTeachers.set(id, newTeacher);\n    return newTeacher;\n  }\n\n  async updateTeacher(id: string, teacherData: Partial<InsertTeacher>): Promise<Teacher> {\n    if (this.isMongoConnected) {\n      try {\n        const teacher = await TeacherModel.findByIdAndUpdate(\n          id,\n          { ...teacherData, updatedAt: new Date() },\n          { new: true }\n        );\n        if (!teacher) {\n          throw new Error('Teacher not found');\n        }\n        return teacher;\n      } catch (error) {\n        console.error('Error updating teacher in MongoDB:', (error as Error).message);\n      }\n    }\n    \n    const existing = this.demoTeachers.get(id);\n    if (!existing) {\n      throw new Error('Teacher not found');\n    }\n    \n    const updated = { ...existing, ...teacherData, updatedAt: new Date() } as Teacher;\n    this.demoTeachers.set(id, updated);\n    return updated;\n  }\n\n  async deleteTeacher(id: string): Promise<void> {\n    if (this.isMongoConnected) {\n      try {\n        const result = await TeacherModel.findByIdAndDelete(id);\n      } catch (error) {\n        console.error('Error deleting teacher from MongoDB:', (error as Error).message);\n      }\n    }\n    \n    this.demoTeachers.delete(id);\n  }\n\n  // Form operations\n  async getResidentForms(residentId: string): Promise<Form[]> {\n    return Array.from(this.demoForms.values())\n      .filter(form => form.residentId === residentId)\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n  }\n\n  async getForm(id: string): Promise<Form | undefined> {\n    return this.demoForms.get(id);\n  }\n\n  async createForm(form: InsertForm): Promise<Form> {\n    const id = `form_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const newForm: Form = {\n      _id: id,\n      ...form,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    } as Form;\n    \n    this.demoForms.set(id, newForm);\n    return newForm;\n  }\n\n  async updateForm(id: string, form: Partial<InsertForm>): Promise<Form> {\n    const existing = this.demoForms.get(id);\n    if (!existing) {\n      throw new Error('Form not found');\n    }\n    \n    const updated = { ...existing, ...form, updatedAt: new Date() } as Form;\n    this.demoForms.set(id, updated);\n    return updated;\n  }\n\n  async deleteForm(id: string): Promise<void> {\n    this.demoForms.delete(id);\n  }\n\n  // Disciplinary action operations\n  async getResidentDisciplinaryActions(residentId: string): Promise<DisciplinaryAction[]> {\n    return Array.from(this.demoDisciplinaryActions.values())\n      .filter(action => action.residentId === residentId)\n      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n  }\n\n  async createDisciplinaryAction(action: InsertDisciplinaryAction): Promise<DisciplinaryAction> {\n    const id = `disciplinary_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const newAction: DisciplinaryAction = {\n      _id: id,\n      ...action,\n    } as DisciplinaryAction;\n    \n    this.demoDisciplinaryActions.set(id, newAction);\n    return newAction;\n  }\n\n  async updateDisciplinaryAction(\n    id: string,\n    action: Partial<InsertDisciplinaryAction>\n  ): Promise<DisciplinaryAction> {\n    const existing = this.demoDisciplinaryActions.get(id);\n    if (!existing) {\n      throw new Error('Disciplinary action not found');\n    }\n    \n    const updated = { ...existing, ...action } as DisciplinaryAction;\n    this.demoDisciplinaryActions.set(id, updated);\n    return updated;\n  }\n\n  async deleteDisciplinaryAction(id: string): Promise<void> {\n    this.demoDisciplinaryActions.delete(id);\n  }\n\n  // Reward operations\n  async getResidentRewards(residentId: string): Promise<Reward[]> {\n    return Array.from(this.demoRewards.values())\n      .filter(reward => reward.residentId === residentId)\n      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n  }\n\n  async createReward(reward: InsertReward): Promise<Reward> {\n    const id = `reward_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const newReward: Reward = {\n      _id: id,\n      ...reward,\n    } as Reward;\n    \n    this.demoRewards.set(id, newReward);\n    return newReward;\n  }\n\n  async updateReward(id: string, reward: Partial<InsertReward>): Promise<Reward> {\n    const existing = this.demoRewards.get(id);\n    if (!existing) {\n      throw new Error('Reward not found');\n    }\n    \n    const updated = { ...existing, ...reward } as Reward;\n    this.demoRewards.set(id, updated);\n    return updated;\n  }\n\n  async deleteReward(id: string): Promise<void> {\n    this.demoRewards.delete(id);\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":13371},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { z } from \"zod\";\r\n\r\n// Demo User Credentials\r\nexport const DEMO_CREDENTIALS = {\r\n  admin: {\r\n    username: \"admin@com\",\r\n    password: \"admin123\",\r\n    id: \"demo_admin_001\",\r\n    firstName: \"Admin\",\r\n    lastName: \"User\",\r\n    role: \"admin\"\r\n  },\r\n  viewer: {\r\n    username: \"viewer@com\",\r\n    password: \"Viewer123\",\r\n    id: \"demo_viewer_001\", \r\n    firstName: \"Viewer\",\r\n    lastName: \"User\",\r\n    role: \"viewer\"\r\n  }\r\n};\r\n\r\n// Zod validation schemas\r\nexport const insertResidentSchema = z.object({\r\n  fullName: z.string().min(1),\r\n  age: z.number().min(1).max(150),\r\n  gender: z.string().min(1),\r\n  department: z.string().min(1),\r\n  startDate: z.date(),\r\n  endDate: z.date().optional(),\r\n  status: z.string().default(\"active\"),\r\n  profileImageUrl: z.string().optional(),\r\n});\r\n\r\nexport const insertTeacherSchema = z.object({\r\n  name: z.string().min(1),\r\n  lostname: z.string().min(1),\r\n  fatherName: z.string().min(1),\r\n  grandfatherName: z.string().min(1),\r\n  academicRank: z.string().min(1),\r\n  rankAchievementDate: z.date(),\r\n  trainerAppointmentDate: z.date(),\r\n  gender: z.string().min(1),\r\n  province: z.string().min(1),\r\n  subject: z.string().min(1),\r\n  position: z.string().min(1),\r\n  hospital: z.string().min(1),\r\n  dateOfBirth: z.date(),\r\n  idNumber: z.string().min(1),\r\n  dutyStartDate: z.date(),\r\n  contactInfo: z.string().min(1),\r\n  whatsappNumber: z.string().min(1),\r\n  emailAddress: z.string().email(),\r\n  postCode: z.string().min(1),\r\n  appointmentType: z.string().min(1),\r\n  department: z.string().min(1),\r\n  experience: z.number().min(0),\r\n  status: z.string().default(\"active\"),\r\n  profileImageUrl: z.string().optional(),\r\n});\r\n\r\nexport const insertFormSchema = z.object({\r\n  residentId: z.string().min(1),\r\n  formType: z.string().min(1),\r\n  formData: z.record(z.any()),\r\n  supervisorId: z.string().optional(),\r\n  status: z.string().default(\"draft\"),\r\n  completedAt: z.date().optional(),\r\n});\r\n\r\nexport const insertDisciplinaryActionSchema = z.object({\r\n  residentId: z.string().min(1),\r\n  date: z.date(),\r\n  description: z.string().min(1),\r\n  actionTaken: z.string().min(1),\r\n  severity: z.string().default(\"minor\"),\r\n  createdBy: z.string().min(1),\r\n});\r\n\r\nexport const insertRewardSchema = z.object({\r\n  residentId: z.string().min(1),\r\n  date: z.date(),\r\n  description: z.string().min(1),\r\n  rewardType: z.string().min(1),\r\n  amount: z.string().optional(),\r\n  createdBy: z.string().min(1),\r\n});\r\n\r\n// Basic Types for interface compatibility\r\nexport type UpsertUser = {\r\n  _id: string;\r\n  email?: string;\r\n  firstName?: string;\r\n  lastName?: string;\r\n  profileImageUrl?: string;\r\n  role?: string;\r\n};\r\n\r\nexport type InsertResident = z.infer<typeof insertResidentSchema>;\r\nexport type InsertTeacher = z.infer<typeof insertTeacherSchema>;\r\nexport type InsertForm = z.infer<typeof insertFormSchema>;\r\nexport type InsertDisciplinaryAction = z.infer<typeof insertDisciplinaryActionSchema>;\r\nexport type InsertReward = z.infer<typeof insertRewardSchema>;\r\n\r\n// Interface types that match our models\r\nexport type User = {\r\n  _id: string;\r\n  email?: string;\r\n  firstName?: string;\r\n  lastName?: string;\r\n  profileImageUrl?: string;\r\n  role: string;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n};\r\n\r\nexport type Resident = {\r\n  _id: string;\r\n  fullName: string;\r\n  age: number;\r\n  gender: string;\r\n  department: string;\r\n  startDate: Date;\r\n  endDate?: Date;\r\n  status: string;\r\n  profileImageUrl?: string;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n};\r\n\r\nexport type Teacher = {\r\n  _id: string;\r\n  name: string;\r\n  fatherName: string;\r\n  grandfatherName: string;\r\n  academicRank: string;\r\n  rankAchievementDate: Date;\r\n  trainerAppointmentDate: Date;\r\n  gender: string;\r\n  province: string;\r\n  subject: string;\r\n  position: string;\r\n  hospital: string;\r\n  dateOfBirth: Date;\r\n  idNumber: string;\r\n  dutyStartDate: Date;\r\n  contactInfo: string;\r\n  whatsappNumber: string;\r\n  emailAddress: string;\r\n  postCode: string;\r\n  appointmentType: string;\r\n  department: string;\r\n  experience: number;\r\n  status: string;\r\n  profileImageUrl?: string;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n};\r\n\r\nexport type Form = {\r\n  _id: string;\r\n  residentId: string;\r\n  formType: string;\r\n  formData: Record<string, any>;\r\n  supervisorId?: string;\r\n  status: string;\r\n  completedAt?:string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n};\r\n\r\nexport type DisciplinaryAction = {\r\n  _id: string;\r\n  residentId: string;\r\n  date: Date;\r\n  description: string;\r\n  actionTaken: string;\r\n  severity: string;\r\n  createdBy: string;\r\n  createdAt: Date;\r\n};\r\n\r\nexport type Reward = {\r\n  _id: string;\r\n  residentId: string;\r\n  date: Date;\r\n  description: string;\r\n  rewardType: string;\r\n  amount?: string;\r\n  createdBy: string;\r\n  createdAt: Date;\r\n};","size_bytes":4736},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Landing from \"@/pages/landing\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Residents from \"@/pages/residents\";\nimport Teachers from \"@/pages/teachers\";\nimport Reports from \"@/pages/reports\";\nimport NotFound from \"@/pages/not-found\";\nimport  Setting  from \"@/pages/setting\";\nimport  About  from \"@/pages/about\";\n\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Residents} />\n          <Route path=\"/residents\" component={Residents} />\n          \n\n          <Route path=\"/teachers\" component={Teachers} />\n          <Route path=\"/reports\" component={Reports} />\n          <Route path=\"/setting\" component={Setting} />\n          <Route path=\"/about\" component={About} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1481},"client/src/index.css":{"content":"/* Dari/Farsi Font Support */\r\n@import url('https://fonts.googleapis.com/css2?family=Vazirmatn:wght@100;200;300;400;500;600;700;800;900&display=swap');\r\n\r\n@tailwind base;\r\n@tailwind components;\r\n@tailwind utilities;\r\n\r\n/* RTL Support */\r\nhtml[dir=\"rtl\"] * {\r\n  direction: rtl;\r\n}\r\n\r\nhtml[dir=\"rtl\"] .ltr {\r\n  direction: ltr;\r\n}\r\n\r\n:root {\r\n  --background: hsl(0 0% 100%);\r\n  --foreground: hsl(210 25% 7.8431%);\r\n  --card: hsl(180 6.6667% 97.0588%);\r\n  --card-foreground: hsl(210 25% 7.8431%);\r\n  --popover: hsl(0 0% 100%);\r\n  --popover-foreground: hsl(210 25% 7.8431%);\r\n  --primary: hsl(203.8863 88.2845% 53.1373%);\r\n  --primary-foreground: hsl(0 0% 100%);\r\n  --secondary: hsl(210 25% 7.8431%);\r\n  --secondary-foreground: hsl(0 0% 100%);\r\n  --muted: hsl(240 1.9608% 90%);\r\n  --muted-foreground: hsl(210 25% 7.8431%);\r\n  --accent: hsl(211.5789 51.3514% 92.7451%);\r\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\r\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\r\n  --destructive-foreground: hsl(0 0% 100%);\r\n  --border: hsl(201.4286 30.4348% 90.9804%);\r\n  --input: hsl(200 23.0769% 97.4510%);\r\n  --ring: hsl(202.8169 89.1213% 53.1373%);\r\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\r\n  --chart-2: hsl(159.7826 100% 36.0784%);\r\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\r\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\r\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\r\n  --sidebar: hsl(180 6.6667% 97.0588%);\r\n  --sidebar-foreground: hsl(210 25% 7.8431%);\r\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\r\n  --sidebar-primary-foreground: hsl(0 0% 100%);\r\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\r\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\r\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\r\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\r\n  --font-sans: Inter, sans-serif;\r\n  --font-serif: Georgia, serif;\r\n  --font-mono: Menlo, monospace;\r\n  --radius: 1.3rem;\r\n  --hospital-green-50: hsl(152 76% 96%);\r\n  --hospital-green-100: hsl(148 79% 90%);\r\n  --hospital-green-200: hsl(149 75% 80%);\r\n  --hospital-green-300: hsl(147 71% 67%);\r\n  --hospital-green-400: hsl(142 69% 58%);\r\n  --hospital-green-500: hsl(142 71% 45%);\r\n  --hospital-green-600: hsl(142 76% 36%);\r\n  --hospital-green-700: hsl(142 72% 29%);\r\n  --hospital-green-800: hsl(143 64% 24%);\r\n  --hospital-green-900: hsl(144 61% 20%);\r\n}\r\n\r\n.dark {\r\n  --background: hsl(0 0% 0%);\r\n  --foreground: hsl(200 6.6667% 91.1765%);\r\n  --card: hsl(228 9.8039% 10%);\r\n  --card-foreground: hsl(0 0% 85.0980%);\r\n  --popover: hsl(0 0% 0%);\r\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\r\n  --primary: hsl(203.7736 87.6033% 52.5490%);\r\n  --primary-foreground: hsl(0 0% 100%);\r\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\r\n  --secondary-foreground: hsl(210 25% 7.8431%);\r\n  --muted: hsl(0 0% 9.4118%);\r\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\r\n  --accent: hsl(205.7143 70% 7.8431%);\r\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\r\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\r\n  --destructive-foreground: hsl(0 0% 100%);\r\n  --border: hsl(210 5.2632% 14.9020%);\r\n  --input: hsl(207.6923 27.6596% 18.4314%);\r\n  --ring: hsl(202.8169 89.1213% 53.1373%);\r\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\r\n  --chart-2: hsl(159.7826 100% 36.0784%);\r\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\r\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\r\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\r\n  --sidebar: hsl(228 9.8039% 10%);\r\n  --sidebar-foreground: hsl(0 0% 85.0980%);\r\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\r\n  --sidebar-primary-foreground: hsl(0 0% 100%);\r\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\r\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\r\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\r\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\r\n  --font-sans: Inter, sans-serif;\r\n  --font-serif: Georgia, serif;\r\n  --font-mono: Menlo, monospace;\r\n  --radius: 1.3rem;\r\n}\r\n\r\n@layer base {\r\n  * {\r\n    @apply border-border;\r\n  }\r\n\r\n  body {\r\n    @apply font-sans antialiased bg-background text-foreground;\r\n    font-family: 'Vazirmatn', 'Inter', sans-serif;\r\n  }\r\n}\r\n\r\n@layer utilities {\r\n  .bg-hospital-green-50 {\r\n    background-color: var(--hospital-green-50);\r\n  }\r\n  .bg-hospital-green-100 {\r\n    background-color: var(--hospital-green-100);\r\n  }\r\n  .bg-hospital-green-200 {\r\n    background-color: var(--hospital-green-200);\r\n  }\r\n  .bg-hospital-green-300 {\r\n    background-color: var(--hospital-green-300);\r\n  }\r\n  .bg-hospital-green-400 {\r\n    background-color: var(--hospital-green-400);\r\n  }\r\n  .bg-hospital-green-500 {\r\n    background-color: var(--hospital-green-500);\r\n  }\r\n  .bg-hospital-green-600 {\r\n    background-color: var(--hospital-green-600);\r\n  }\r\n  .bg-hospital-green-700 {\r\n    background-color: var(--hospital-green-700);\r\n  }\r\n  .bg-hospital-green-800 {\r\n    background-color: var(--hospital-green-800);\r\n  }\r\n  .bg-hospital-green-900 {\r\n    background-color: var(--hospital-green-900);\r\n  }\r\n  \r\n  .text-hospital-green-50 {\r\n    color: var(--hospital-green-50);\r\n  }\r\n  .text-hospital-green-100 {\r\n    color: var(--hospital-green-100);\r\n  }\r\n  .text-hospital-green-200 {\r\n    color: var(--hospital-green-200);\r\n  }\r\n  .text-hospital-green-300 {\r\n    color: var(--hospital-green-300);\r\n  }\r\n  .text-hospital-green-400 {\r\n    color: var(--hospital-green-400);\r\n  }\r\n  .text-hospital-green-500 {\r\n    color: var(--hospital-green-500);\r\n  }\r\n  .text-hospital-green-600 {\r\n    color: var(--hospital-green-600);\r\n  }\r\n  .text-hospital-green-700 {\r\n    color: var(--hospital-green-700);\r\n  }\r\n  .text-hospital-green-800 {\r\n    color: var(--hospital-green-800);\r\n  }\r\n  .text-hospital-green-900 {\r\n    color: var(--hospital-green-900);\r\n  }\r\n  \r\n  .border-hospital-green-50 {\r\n    border-color: var(--hospital-green-50);\r\n  }\r\n  .border-hospital-green-100 {\r\n    border-color: var(--hospital-green-100);\r\n  }\r\n  .border-hospital-green-200 {\r\n    border-color: var(--hospital-green-200);\r\n  }\r\n  .border-hospital-green-300 {\r\n    border-color: var(--hospital-green-300);\r\n  }\r\n  .border-hospital-green-400 {\r\n    border-color: var(--hospital-green-400);\r\n  }\r\n  .border-hospital-green-500 {\r\n    border-color: var(--hospital-green-500);\r\n  }\r\n  .border-hospital-green-600 {\r\n    border-color: var(--hospital-green-600);\r\n  }\r\n  .border-hospital-green-700 {\r\n    border-color: var(--hospital-green-700);\r\n  }\r\n  .border-hospital-green-800 {\r\n    border-color: var(--hospital-green-800);\r\n  }\r\n  .border-hospital-green-900 {\r\n    border-color: var(--hospital-green-900);\r\n  }\r\n\r\n  .hover\\:bg-hospital-green-50:hover {\r\n    background-color: var(--hospital-green-50);\r\n  }\r\n  .hover\\:bg-hospital-green-100:hover {\r\n    background-color: var(--hospital-green-100);\r\n  }\r\n  .hover\\:bg-hospital-green-200:hover {\r\n    background-color: var(--hospital-green-200);\r\n  }\r\n  .hover\\:bg-hospital-green-300:hover {\r\n    background-color: var(--hospital-green-300);\r\n  }\r\n  .hover\\:bg-hospital-green-400:hover {\r\n    background-color: var(--hospital-green-400);\r\n  }\r\n  .hover\\:bg-hospital-green-500:hover {\r\n    background-color: var(--hospital-green-500);\r\n  }\r\n  .hover\\:bg-hospital-green-600:hover {\r\n    background-color: var(--hospital-green-600);\r\n  }\r\n  .hover\\:bg-hospital-green-700:hover {\r\n    background-color: var(--hospital-green-700);\r\n  }\r\n  .hover\\:bg-hospital-green-800:hover {\r\n    background-color: var(--hospital-green-800);\r\n  }\r\n  .hover\\:bg-hospital-green-900:hover {\r\n    background-color: var(--hospital-green-900);\r\n  }\r\n\r\n  .hover\\:text-hospital-green-50:hover {\r\n    color: var(--hospital-green-50);\r\n  }\r\n  .hover\\:text-hospital-green-100:hover {\r\n    color: var(--hospital-green-100);\r\n  }\r\n  .hover\\:text-hospital-green-200:hover {\r\n    color: var(--hospital-green-200);\r\n  }\r\n  .hover\\:text-hospital-green-300:hover {\r\n    color: var(--hospital-green-300);\r\n  }\r\n  .hover\\:text-hospital-green-400:hover {\r\n    color: var(--hospital-green-400);\r\n  }\r\n  .hover\\:text-hospital-green-500:hover {\r\n    color: var(--hospital-green-500);\r\n  }\r\n  .hover\\:text-hospital-green-600:hover {\r\n    color: var(--hospital-green-600);\r\n  }\r\n  .hover\\:text-hospital-green-700:hover {\r\n    color: var(--hospital-green-700);\r\n  }\r\n  .hover\\:text-hospital-green-800:hover {\r\n    color: var(--hospital-green-800);\r\n  }\r\n  .hover\\:text-hospital-green-900:hover {\r\n    color: var(--hospital-green-900);\r\n  }\r\n\r\n  .hover\\:border-hospital-green-300:hover {\r\n    border-color: var(--hospital-green-300);\r\n  }\r\n}\r\n","size_bytes":8488},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/controllers/TeacherActivityController.ts":{"content":"import { Request, Response } from \"express\";\r\nimport { TeacherActivityModel } from \"../models/TeacherActivity\";\r\n\r\nexport const TeacherActivityController = {\r\n  create: async (req: Request, res: Response) => {\r\n    try {\r\n      const { teachers, activities } = req.body;\r\n      const newRecord = new TeacherActivityModel({ teachers, activities });\r\n      await newRecord.save();\r\n      res.status(201).json({ message: \"Form saved successfully\", data: newRecord });\r\n    } catch (err) {\r\n      console.error(err);\r\n      res.status(500).json({ message: \"Failed to save teacher activity\" });\r\n    }\r\n  },\r\n\r\n  getAll: async (req: Request, res: Response) => {\r\n    try {\r\n      const records = await TeacherActivityModel.find().sort({ createdAt: -1 });\r\n      res.json(records);\r\n    } catch (err) {\r\n      res.status(500).json({ message: \"Failed to fetch teacher activities\" });\r\n    }\r\n  },\r\n};\r\n","size_bytes":895},"server/controllers/form-C.ts":{"content":"// controllers/monographController.ts\r\nimport { Request, Response } from 'express';\r\nimport { MonographEvaluationForm } from '../models/form-C';\r\n\r\nexport class MonographController {\r\n  // ایجاد فرم جدید\r\n  static async createForm(req: Request, res: Response) {\r\n    try {\r\n      const formData = req.body;\r\n      const newForm = new MonographEvaluationForm(formData);\r\n      const savedForm = await newForm.save();\r\n      \r\n      res.status(201).json({\r\n        success: true,\r\n        message: 'فرم با موفقیت ذخیره شد',\r\n        data: savedForm\r\n      });\r\n    } catch (error: any) {\r\n      console.error('Error saving form:', error);\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'خطا در ذخیره فرم'\r\n      });\r\n    }\r\n  }\r\n\r\n  // دریافت تمام فرم‌ها\r\n// controllers/monographController.ts\r\nstatic async getAllForms(req: Request, res: Response) {\r\n  try {\r\n    // فعلاً همه‌ی فرم‌ها را می‌گیریم\r\n    const forms = await MonographEvaluationForm.find().sort({ createdAt: -1 });\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      data: forms\r\n    });\r\n  } catch (error: any) {\r\n    console.error('Error fetching forms:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'خطا در دریافت داده‌ها'\r\n    });\r\n  }\r\n}\r\n\r\n}","size_bytes":1382},"server/controllers/form-D.ts":{"content":"// controllers/form-D.ts\r\nimport { Request, Response } from \"express\";\r\nimport ConferenceEvaluation from \"../models/form-D\";\r\n\r\nexport const createEvaluation = async (req: Request, res: Response) => {\r\n  try {\r\n    const newEvaluation = new ConferenceEvaluation(req.body);\r\n    await newEvaluation.save();\r\n    res.status(201).json({ message: \"دیتا با موفقیت ذخیره شد ✅\" });\r\n  } catch (err) {\r\n    console.error(err);\r\n    res.status(500).json({ message: \"خطا در ذخیره دیتا ❌\" });\r\n  }\r\n};\r\n\r\nexport const getEvaluations = async (req: Request, res: Response) => {\r\n  try {\r\n    const { residentId } = req.query;\r\n\r\n    // اگر residentId فرستاده نشده باشد فیلتر نمی‌کنیم و همه دیتاها را برمی‌گردانیم\r\n    const filter: any = {};\r\n    if (residentId && residentId !== \"undefined\" && residentId !== \"null\") {\r\n      filter.residentId = residentId;\r\n    }\r\n\r\n    const evaluations = await ConferenceEvaluation.find(filter).populate(\"residentId\");\r\n    res.status(200).json(evaluations);\r\n  } catch (err) {\r\n    console.error(err);\r\n    res.status(500).json({ message: \"خطا در گرفتن دیتا ❌\" });\r\n  }\r\n};\r\n","size_bytes":1211},"server/controllers/form-E.ts":{"content":"import { Request, Response } from \"express\";\r\nimport { EvaluationFormE } from \"../models/form-E\";\r\n\r\n// ایجاد فرم جدید\r\nexport const createEvaluationFormE = async (req: Request, res: Response) => {\r\n  try {\r\n    // بدنه‌ی درخواست باید شامل residentId و بقیه فیلدها باشد\r\n    const form = new EvaluationFormE(req.body);\r\n    await form.save();\r\n    res.status(201).json(form);\r\n  } catch (error) {\r\n    res.status(400).json({ message: \"خطا در ایجاد فرم\", error });\r\n  }\r\n};\r\n\r\n// گرفتن تمام فرم‌ها بدون فیلتر\r\nexport const getAllEvaluationFormsE = async (req: Request, res: Response) => {\r\n  try {\r\n    const forms = await EvaluationFormE.find().populate(\"residentId\");\r\n    res.json(forms);\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"خطا در گرفتن تمام فرم‌ها\", error });\r\n  }\r\n};\r\n\r\n// گرفتن تمام فرم‌ها برای یک Resident خاص\r\nexport const getEvaluationFormsByResident = async (\r\n  req: Request,\r\n  res: Response\r\n) => {\r\n  try {\r\n    const { residentId } = req.params;\r\n    // جستجو بر اساس residentId\r\n    const forms = await EvaluationFormE.find({ residentId }).populate(\r\n      \"residentId\"\r\n    );\r\n    res.json(forms);\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"خطا در گرفتن فرم‌ها\", error });\r\n  }\r\n};\r\n\r\n// گرفتن یک فرم با آیدی خودش\r\nexport const getEvaluationFormEById = async (req: Request, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const form = await EvaluationFormE.findById(id).populate(\"residentId\");\r\n    if (!form) {\r\n      return res.status(404).json({ message: \"فرم پیدا نشد\" });\r\n    }\r\n    res.json(form);\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"خطا در گرفتن فرم\", error });\r\n  }\r\n};\r\n\r\n// آپدیت فرم\r\nexport const updateEvaluationFormE = async (req: Request, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const updated = await EvaluationFormE.findByIdAndUpdate(id, req.body, {\r\n      new: true,\r\n    });\r\n    if (!updated) return res.status(404).json({ message: \"فرم پیدا نشد\" });\r\n    res.json(updated);\r\n  } catch (error) {\r\n    res.status(400).json({ message: \"خطا در آپدیت فرم\", error });\r\n  }\r\n};\r\n\r\n// حذف فرم\r\nexport const deleteEvaluationFormE = async (req: Request, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const deleted = await EvaluationFormE.findByIdAndDelete(id);\r\n    if (!deleted) return res.status(404).json({ message: \"فرم پیدا نشد\" });\r\n    res.json({ message: \"فرم حذف شد\" });\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"خطا در حذف فرم\", error });\r\n  }\r\n};\r\n","size_bytes":2801},"server/controllers/form-F.ts":{"content":"import { Request, Response } from \"express\";\nimport Checklist from \"../models/form-F\";\n\n// ایجاد Checklist\nexport const createChecklist = async (req: Request, res: Response) => {\n  try {\n    const { studentName, fatherName, year, sections } = req.body;\n\n    if (!studentName || !fatherName || !year || !sections) {\n      return res.status(400).json({ message: \"اطلاعات ناقص است\" });\n    }\n\n    const checklist = new Checklist({\n      studentName,\n      fatherName,\n      year,\n      sections,\n    });\n\n    const saved = await checklist.save();\n    res.status(201).json(saved);\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ message: \"خطا در ذخیره اطلاعات\" });\n  }\n};\n\n// دریافت Checklist بر اساس نام ترینی\nexport const getChecklistByStudentName = async (req: Request, res: Response) => {\n  try {\n    const { studentName } = req.params;\n\n    const checklist = await Checklist.findOne({ studentName });\n    if (!checklist) return res.status(404).json({ message: \"Checklist not found\" });\n\n    // Transform sections data to scores format for frontend\n    const scores: Record<string, Record<number, number>> = {};\n    \n    checklist.sections.forEach(section => {\n      section.activities.forEach(activity => {\n        scores[activity.id] = {};\n        activity.months.forEach(monthData => {\n          scores[activity.id][monthData.month] = monthData.value;\n        });\n      });\n    });\n\n    // Return data in the format frontend expects\n    const response = {\n      studentName: checklist.studentName,\n      fatherName: checklist.fatherName,\n      year: checklist.year,\n      scores: scores\n    };\n\n    res.json(response);\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ message: \"Server error\" });\n  }\n};\n","size_bytes":1803},"server/controllers/form-G.ts":{"content":"import { Request, Response } from \"express\";\r\nimport { EvaluationFormG } from \"../models/form-G\";\r\n\r\n// ایجاد فرم جدید بدون نیاز به residentId\r\nexport const createEvaluationFormG = async (req: Request, res: Response) => {\r\n  try {\r\n    const form = new EvaluationFormG({\r\n      ...req.body,\r\n      total:\r\n        (Number(req.body.exam1Written) || 0) +\r\n        (Number(req.body.exam1Practical) || 0) +\r\n        (Number(req.body.exam2Written) || 0) +\r\n        (Number(req.body.exam2Practical) || 0) +\r\n        (Number(req.body.finalWritten) || 0) +\r\n        (Number(req.body.finalPractical) || 0),\r\n    });\r\n\r\n    await form.save();\r\n    res.status(201).json(form);\r\n  } catch (error) {\r\n    res.status(400).json({ message: \"خطا در ایجاد فرم\", error });\r\n  }\r\n};\r\n\r\n// گرفتن تمام فرم‌ها\r\nexport const getEvaluationFormsG = async (req: Request, res: Response) => {\r\n  try {\r\n    const forms = await EvaluationFormG.find();\r\n    res.json(forms);\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"خطا در گرفتن فرم‌ها\", error });\r\n  }\r\n};\r\n\r\n// گرفتن فرم با ID\r\nexport const getEvaluationFormGById = async (req: Request, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const form = await EvaluationFormG.findById(id);\r\n    if (!form) return res.status(404).json({ message: \"فرم پیدا نشد\" });\r\n    res.json(form);\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"خطا در گرفتن فرم\", error });\r\n  }\r\n};\r\n\r\n// آپدیت فرم\r\nexport const updateEvaluationFormG = async (req: Request, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const updated = await EvaluationFormG.findByIdAndUpdate(id, req.body, { new: true });\r\n    if (!updated) return res.status(404).json({ message: \"فرم پیدا نشد\" });\r\n    res.json(updated);\r\n  } catch (error) {\r\n    res.status(400).json({ message: \"خطا در آپدیت فرم\", error });\r\n  }\r\n};\r\n\r\n// حذف فرم\r\nexport const deleteEvaluationFormG = async (req: Request, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const deleted = await EvaluationFormG.findByIdAndDelete(id);\r\n    if (!deleted) return res.status(404).json({ message: \"فرم پیدا نشد\" });\r\n    res.json({ message: \"فرم حذف شد\" });\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"خطا در حذف فرم\", error });\r\n  }\r\n};\r\n","size_bytes":2440},"server/controllers/form-H.ts":{"content":"// controllers/form-H.ts\r\nimport { Request, Response } from \"express\";\r\nimport { EvaluationFormH } from \"../models/form-H\";\r\n\r\n// ایجاد فرم جدید\r\nexport const createEvaluationFormH = async (req: Request, res: Response) => {\r\n  try {\r\n    const form = new EvaluationFormH({\r\n      ...req.body, // studentId را هم می‌گیرد\r\n    });\r\n\r\n    await form.save();\r\n    res.status(201).json(form);\r\n  } catch (error) {\r\n    res.status(400).json({ message: \"خطا در ایجاد فرم\", error });\r\n  }\r\n};\r\n\r\n// گرفتن تمام فرم‌ها (بدون نیاز به آیدی)\r\nexport const getEvaluationFormsH = async (req: Request, res: Response) => {\r\n  try {\r\n    const forms = await EvaluationFormH.find().populate(\"studentId\");\r\n    res.json(forms);\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"خطا در گرفتن فرم‌ها\", error });\r\n  }\r\n};\r\n","size_bytes":893},"server/controllers/form-K.ts":{"content":"// controllers/monographEvaluation.ts\r\nimport { Request, Response } from \"express\";\r\nimport { MonographEvaluation } from \"../models/form-K\"; // <-- حتما نام فایل صحیح\r\n\r\nexport const createMonographEvaluation = async (req: Request, res: Response) => {\r\n  console.log(\"[createMonographEvaluation] body:\", JSON.stringify(req.body).slice(0,200));\r\n  try {\r\n    const form = new MonographEvaluation(req.body);\r\n    const saved = await form.save();\r\n    console.log(\"[createMonographEvaluation] saved id:\", saved._id);\r\n    return res.status(201).json(saved);\r\n  } catch (err) {\r\n    console.error(\"[createMonographEvaluation] error:\", err);\r\n    // بازگرداندن JSON با پیام خطا\r\n    return res.status(400).json({ message: (err as any)?.message || \"خطا\", error: err });\r\n  }\r\n};\r\n\r\nexport const getMonographEvaluations = async (_req: Request, res: Response) => {\r\n  try {\r\n    const forms = await MonographEvaluation.find().populate(\"studentId\");\r\n    return res.json(forms);\r\n  } catch (error) {\r\n    console.error(\"[getMonographEvaluations] error:\", error);\r\n    return res.status(500).json({ message: \"خطا در گرفتن فرم‌ها\", error });\r\n  }\r\n};\r\n","size_bytes":1195},"server/controllers/index.ts":{"content":"export * from './userController';\nexport * from './residentController';\nexport * from './teacherController';","size_bytes":108},"server/controllers/residentController.ts":{"content":"import { Request, Response } from 'express';\nimport { ResidentModel, UserModel } from '../models';\nimport { z } from 'zod';\n\nconst createResidentSchema = z.object({\n  fullName: z.string().min(1, \"Full name is required\"),\n  age: z.number().min(18, \"Age must be at least 18\").max(100, \"Age must be less than 100\"),\n  gender: z.enum([\"Male\", \"Female\"]),\n  department: z.string().min(1, \"Department is required\"),\n  startDate: z.string().transform((str) => new Date(str)),\n  endDate: z.string().optional().transform((str) => str ? new Date(str) : undefined),\n  status: z.string().optional().default(\"active\"),\n  profileImageUrl: z.string().optional(),\n});\n\nexport class ResidentController {\n  static async getAllResidents(req: Request, res: Response) {\n    try {\n      const residents = await ResidentModel.find().sort({ createdAt: -1 });\n      res.json(residents);\n    } catch (error) {\n      console.error('Error fetching residents:', error);\n      res.status(500).json({ message: 'Failed to fetch residents' });\n    }\n  }\n\n  static async getResidentById(req: Request, res: Response) {\n    try {\n      const resident = await ResidentModel.findById(req.params.id);\n      if (!resident) {\n        return res.status(404).json({ message: 'Resident not found' });\n      }\n      res.json(resident);\n    } catch (error) {\n      console.error('Error fetching resident:', error);\n      res.status(500).json({ message: 'Failed to fetch resident' });\n    }\n  }\n\n  static async createResident(req: any, res: Response) {\n    try {\n      const user = await UserModel.findById(req.user.claims.sub);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const validatedData = createResidentSchema.parse(req.body);\n      const resident = new ResidentModel(validatedData);\n      const savedResident = await resident.save();\n      res.status(201).json(savedResident);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: 'Validation error', \n          errors: error.errors \n        });\n      }\n      console.error(\"Error creating resident:\", error);\n      res.status(500).json({ message: \"Failed to create resident\" });\n    }\n  }\n\n  static async updateResident(req: any, res: Response) {\n    try {\n      const user = await UserModel.findById(req.user.claims.sub);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const validatedData = createResidentSchema.partial().parse(req.body);\n      const resident = await ResidentModel.findByIdAndUpdate(\n        req.params.id,\n        { ...validatedData, updatedAt: new Date() },\n        { new: true, runValidators: true }\n      );\n      \n      if (!resident) {\n        return res.status(404).json({ message: \"Resident not found\" });\n      }\n      \n      res.json(resident);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: 'Validation error', \n          errors: error.errors \n        });\n      }\n      console.error(\"Error updating resident:\", error);\n      res.status(500).json({ message: \"Failed to update resident\" });\n    }\n  }\n\n  static async deleteResident(req: any, res: Response) {\n    try {\n      const user = await UserModel.findById(req.user.claims.sub);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const resident = await ResidentModel.findByIdAndDelete(req.params.id);\n      if (!resident) {\n        return res.status(404).json({ message: \"Resident not found\" });\n      }\n      res.json({ message: \"Resident deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting resident:\", error);\n      res.status(500).json({ message: \"Failed to delete resident\" });\n    }\n  }\n}","size_bytes":3897},"server/controllers/teacherController.ts":{"content":"import { Request, Response } from 'express';\nimport { storage } from '../storage';\nimport { z } from 'zod';\n\nconst createTeacherSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  lostname: z.string().min(1, \"Last name is required\"),\n  fatherName: z.string().min(1, \"Father name is required\"),\n  grandfatherName: z.string().min(1, \"Grandfather name is required\"),\n  academicRank: z.string().min(1, \"Academic rank is required\"),\n  rankAchievementDate: z.string().transform((str) => new Date(str)),\n  trainerAppointmentDate: z.string().transform((str) => new Date(str)),\n  gender: z.string().min(1, \"Gender is required\"),\n  province: z.string().min(1, \"Province is required\"),\n  subject: z.string().min(1, \"Subject is required\"),\n  position: z.string().min(1, \"Position is required\"),\n  hospital: z.string().min(1, \"Hospital is required\"),\n  dateOfBirth: z.string().transform((str) => new Date(str)),\n  idNumber: z.string().min(1, \"ID number is required\"),\n  dutyStartDate: z.string().transform((str) => new Date(str)),\n  contactInfo: z.string().min(1, \"Contact info is required\"),\n  whatsappNumber: z.string().min(1, \"WhatsApp number is required\"),\n  emailAddress: z.string().email(\"Valid email is required\"),\n  postCode: z.string().min(1, \"Post code is required\"),\n  appointmentType: z.string().min(1, \"Appointment type is required\"),\n  department: z.string().min(1, \"Department is required\"),\n  experience: z.number().min(0, \"Experience must be non-negative\"),\n  status: z.string().optional().default(\"active\"),\n  profileImageUrl: z.string().optional(),\n});\n\nexport class TeacherController {\n  static async getAllTeachers(req: Request, res: Response) {\n    try {\n      const teachers = await storage.getAllTeachers();\n      res.json(teachers);\n    } catch (error) {\n      console.error('Error fetching teachers:', error);\n      res.status(500).json({ message: 'Failed to fetch teachers' });\n    }\n  }\n\n  static async getTeacherById(req: Request, res: Response) {\n    try {\n      const teacher = await storage.getTeacher(req.params.id);\n      if (!teacher) {\n        return res.status(404).json({ message: 'Teacher not found' });\n      }\n      res.json(teacher);\n    } catch (error) {\n      console.error('Error fetching teacher:', error);\n      res.status(500).json({ message: 'Failed to fetch teacher' });\n    }\n  }\n\n  static async createTeacher(req: any, res: Response) {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const validatedData = createTeacherSchema.parse(req.body);\n      const savedTeacher = await storage.createTeacher(validatedData);\n      \n      console.log('Teacher saved successfully:', savedTeacher._id);\n      res.status(201).json(savedTeacher);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        console.error('Validation error creating teacher:', error.errors);\n        return res.status(400).json({ \n          message: 'Validation error', \n          errors: error.errors \n        });\n      }\n      console.error(\"Error creating teacher:\", error);\n      res.status(500).json({ message: \"Failed to create teacher\" });\n    }\n  }\n\n  static async updateTeacher(req: any, res: Response) {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const validatedData = createTeacherSchema.partial().parse(req.body);\n      const teacher = await storage.updateTeacher(req.params.id, validatedData);\n      \n      res.json(teacher);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: 'Validation error', \n          errors: error.errors \n        });\n      }\n      console.error(\"Error updating teacher:\", error);\n      res.status(500).json({ message: \"Failed to update teacher\" });\n    }\n  }\n\n  static async deleteTeacher(req: any, res: Response) {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      await storage.deleteTeacher(req.params.id);\n      res.json({ message: \"Teacher deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting teacher:\", error);\n      res.status(500).json({ message: \"Failed to delete teacher\" });\n    }\n  }\n}","size_bytes":4525},"server/controllers/trainerController.ts":{"content":"import { Request, Response } from \"express\";\r\nimport TrainerModel from \"../models/trainerModel\";\r\n\r\nexport const TrainerController = {\r\n  // ➕ ایجاد ترینر جدید\r\n  createTrainer: async (req: Request, res: Response) => {\r\n    try {\r\n      const {\r\n        name,\r\n        lastName,\r\n        province,\r\n        department,\r\n        specialty,\r\n        email,\r\n        phoneNumber,\r\n      } = req.body;\r\n\r\n      // ✅ اعتبارسنجی اولیه (حداقل فیلدهای ضروری)\r\n      if (!name || !lastName || !province || !department || !specialty) {\r\n        return res.status(400).json({\r\n          message: \"لطفاً تمام فیلدهای ضروری (نام، تخلص، ولایت، دیپارتمنت، رشته) را تکمیل کنید\",\r\n        });\r\n      }\r\n\r\n      // ✅ اگر ایمیل تکراری نباشد (اختیاری)\r\n      if (email) {\r\n        const existing = await TrainerModel.findOne({ email });\r\n        if (existing) {\r\n          return res.status(409).json({ message: \"این ایمیل قبلاً ثبت شده است\" });\r\n        }\r\n      }\r\n\r\n      const newTrainer = await TrainerModel.create(req.body);\r\n      res.status(201).json({\r\n        message: \"ترینر با موفقیت ایجاد شد\",\r\n        data: newTrainer,\r\n      });\r\n    } catch (error) {\r\n      console.error(\"❌ Error creating trainer:\", error);\r\n      res.status(500).json({ message: \"خطا در ثبت ترینر\" });\r\n    }\r\n  },\r\n\r\n  // 📋 دریافت لیست تمام ترینرها\r\n  getAllTrainers: async (_req: Request, res: Response) => {\r\n    try {\r\n      const trainers = await TrainerModel.find().sort({ createdAt: -1 });\r\n      res.status(200).json(trainers);\r\n    } catch (error) {\r\n      console.error(\"❌ Error fetching trainers:\", error);\r\n      res.status(500).json({ message: \"خطا در دریافت ترینرها\" });\r\n    }\r\n  },\r\n\r\n  // 🔍 دریافت یک ترینر بر اساس ID\r\n  getTrainerById: async (req: Request, res: Response) => {\r\n    try {\r\n      const trainer = await TrainerModel.findById(req.params.id);\r\n      if (!trainer) {\r\n        return res.status(404).json({ message: \"ترینر یافت نشد\" });\r\n      }\r\n      res.status(200).json(trainer);\r\n    } catch (error) {\r\n      console.error(\"❌ Error fetching trainer by ID:\", error);\r\n      res.status(500).json({ message: \"خطا در دریافت ترینر\" });\r\n    }\r\n  },\r\n\r\n  // ✏️ بروزرسانی ترینر\r\n  updateTrainer: async (req: Request, res: Response) => {\r\n    try {\r\n      const updatedTrainer = await TrainerModel.findByIdAndUpdate(\r\n        req.params.id,\r\n        req.body,\r\n        { new: true, runValidators: true }\r\n      );\r\n\r\n      if (!updatedTrainer) {\r\n        return res.status(404).json({ message: \"ترینر یافت نشد\" });\r\n      }\r\n\r\n      res.status(200).json({\r\n        message: \"ترینر با موفقیت بروزرسانی شد\",\r\n        data: updatedTrainer,\r\n      });\r\n    } catch (error) {\r\n      console.error(\"❌ Error updating trainer:\", error);\r\n      res.status(500).json({ message: \"خطا در بروزرسانی ترینر\" });\r\n    }\r\n  },\r\n\r\n  // 🗑️ حذف ترینر\r\n  deleteTrainer: async (req: Request, res: Response) => {\r\n    try {\r\n      const deletedTrainer = await TrainerModel.findByIdAndDelete(req.params.id);\r\n      if (!deletedTrainer) {\r\n        return res.status(404).json({ message: \"ترینر یافت نشد\" });\r\n      }\r\n      res.status(200).json({ message: \"ترینر با موفقیت حذف شد\" });\r\n    } catch (error) {\r\n      console.error(\"❌ Error deleting trainer:\", error);\r\n      res.status(500).json({ message: \"خطا در حذف ترینر\" });\r\n    }\r\n  },\r\n};\r\n","size_bytes":3737},"server/controllers/userController.ts":{"content":"import { Request, Response } from 'express';\nimport { storage } from '../storage';\n\nexport class UserController {\n  static async getAllUsers(req: Request, res: Response) {\n    try {\n      // Since there's no getAllUsers in the storage interface, return empty array for now\n      res.json([]);\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      res.status(500).json({ message: 'Failed to fetch users' });\n    }\n  }\n\n  static async getUserById(req: Request, res: Response) {\n    try {\n      const user = await storage.getUser(req.params.id);\n      if (!user) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n      res.json(user);\n    } catch (error) {\n      console.error('Error fetching user:', error);\n      res.status(500).json({ message: 'Failed to fetch user' });\n    }\n  }\n\n  static async getCurrentUser(req: any, res: Response) {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (user) {\n        res.json({\n          _id: user._id,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          role: user.role\n        });\n      } else {\n        res.status(404).json({ message: \"User not found\" });\n      }\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  }\n}","size_bytes":1431},"server/models/Resident.ts":{"content":"import mongoose, { Document, Schema } from \"mongoose\";\n\nexport interface IResident extends Document {\n  _id: string;\n  fullName: string;\n  age: number;\n  gender: string;\n  department: string;\n  startDate: Date;\n  endDate?: Date;\n  status: string;\n  profileImageUrl?: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nconst residentSchema = new Schema<IResident>({\n  fullName: { type: String, required: true },\n  age: { type: Number, required: true },\n  gender: { type: String, required: true },\n  department: { type: String, required: true },\n  startDate: { type: Date, required: true },\n  endDate: Date,\n  status: { type: String, required: true, default: \"active\" },\n  profileImageUrl: String,\n  createdAt: { type: Date, default: Date.now },\n  updatedAt: { type: Date, default: Date.now },\n});\n\nexport const ResidentModel = mongoose.model<IResident>(\"Resident\", residentSchema);","size_bytes":878},"server/models/Teacher.ts":{"content":"import mongoose, { Document, Schema } from \"mongoose\";\n\nexport interface ITeacher extends Document {\n  _id: string;\n  name: string;\n  lostname:string;\n  fatherName: string;\n  grandfatherName: string;\n  academicRank: string;\n  rankAchievementDate: Date;\n  trainerAppointmentDate: Date;\n  gender: string;\n  province: string;\n  subject: string;\n  position: string;\n  hospital: string;\n  dateOfBirth: Date;\n  idNumber: string;\n  dutyStartDate: Date;\n  contactInfo: string;\n  whatsappNumber: string;\n  emailAddress: string;\n  postCode: string;\n  appointmentType: string;\n  department: string;\n  experience: number;\n  status: string;\n  profileImageUrl?: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nconst teacherSchema = new Schema<ITeacher>({\n  name: { type: String, required: true },\n  lostname: { type: String, required: true },\n  fatherName: { type: String, required: true },\n  grandfatherName: { type: String, required: true },\n  academicRank: { type: String, required: true },\n  rankAchievementDate: { type: Date, required: true },\n  trainerAppointmentDate: { type: Date, required: true },\n  gender: { type: String, required: true },\n  province: { type: String, required: true },\n  subject: { type: String, required: true },\n  position: { type: String, required: true },\n  hospital: { type: String, required: true },\n  dateOfBirth: { type: Date, required: true },\n  idNumber: { type: String, required: true, unique: true },\n  dutyStartDate: { type: Date, required: true },\n  contactInfo: { type: String, required: true },\n  whatsappNumber: { type: String, required: true },\n  emailAddress: { type: String, required: true },\n  postCode: { type: String, required: true },\n  appointmentType: { type: String, required: true },\n  department: { type: String, required: true },\n  experience: { type: Number, required: true },\n  status: { type: String, required: true, default: \"active\" },\n  profileImageUrl: String,\n  createdAt: { type: Date, default: Date.now },\n  updatedAt: { type: Date, default: Date.now },\n});\n\nexport const TeacherModel = mongoose.model<ITeacher>(\"Teacher\", teacherSchema);","size_bytes":2093},"server/models/TeacherActivity.ts":{"content":"import mongoose, { Schema, Document } from \"mongoose\";\r\n\r\ninterface IActivity {\r\n  section: string;\r\n  activity: string;\r\n  evaluators: boolean[];\r\n}\r\n\r\nexport interface ITeacherActivity extends Document {\r\n  teachers: string[];\r\n  activities: IActivity[];\r\n  createdAt: Date;\r\n}\r\n\r\nconst ActivitySchema: Schema = new Schema({\r\n  section: { type: String, required: true },\r\n  activity: { type: String, required: true },\r\n  evaluators: { type: [Boolean], required: true },\r\n});\r\n\r\nconst TeacherActivitySchema: Schema = new Schema(\r\n  {\r\n    teachers: { type: [String], required: true },\r\n    activities: { type: [ActivitySchema], required: true },\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\nexport const TeacherActivityModel = mongoose.model<ITeacherActivity>(\r\n  \"TeacherActivity\",\r\n  TeacherActivitySchema\r\n);\r\n","size_bytes":806},"server/models/User.ts":{"content":"import mongoose, { Document, Schema } from \"mongoose\";\n\nexport interface IUser extends Document {\n  _id: string;\n  email?: string;\n  firstName?: string;\n  lastName?: string;\n  profileImageUrl?: string;\n  role: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nconst userSchema = new Schema<IUser>({\n  _id: { type: String, required: true },\n  email: { type: String, unique: true, sparse: true },\n  firstName: String,\n  lastName: String,\n  profileImageUrl: String,\n  role: { type: String, required: true, default: \"viewer\" }, // admin or viewer\n  createdAt: { type: Date, default: Date.now },\n  updatedAt: { type: Date, default: Date.now },\n});\n\nexport const UserModel = mongoose.model<IUser>(\"User\", userSchema);","size_bytes":710},"server/models/form-C.ts":{"content":"// models/MonographEvaluationForm.ts\r\nimport mongoose, { Document, Schema } from \"mongoose\";\r\n\r\nexport interface IMonographEvaluationForm extends Document {\r\n  name: string;\r\n  lastName: string;\r\n  fatherName: string;\r\n  idNumber: string;\r\n  field: string;\r\n  trainingYear: string;\r\n  startYear: string;\r\n  date: string;\r\n  chef: string;\r\n  departmentHead: string;\r\n  hospitalHead: string;\r\n  evaluations: {\r\n    section: string;\r\n    percentage: string;\r\n    score: string;\r\n    teacherName: string;\r\n    teacherSigned: boolean;\r\n    characteristics: string;\r\n    total: string;\r\n    finalResult: string;\r\n  }[];\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nconst MonographEvaluationItemSchema: Schema = new Schema({\r\n  section: { type: String, required: true },\r\n  percentage: { type: String, required: true },\r\n  score: { type: String, required: true },\r\n  teacherName: { type: String, required: true },\r\n  teacherSigned: { type: Boolean, default: false },\r\n  characteristics: { type: String, default: \"\" },\r\n  total: { type: String, required: true },\r\n  finalResult: { type: String, required: true }\r\n});\r\n\r\nconst MonographEvaluationFormSchema: Schema = new Schema(\r\n  {\r\n    name: { type: String, required: true },\r\n    lastName: { type: String, required: true },\r\n    fatherName: { type: String, required: true },\r\n    idNumber: { type: String, required: true },\r\n    field: { type: String, required: true },\r\n    trainingYear: { type: String, required: true },\r\n    startYear: { type: String, required: true },\r\n    date: { type: String, required: true },\r\n    chef: { type: String, required: true },\r\n    departmentHead: { type: String, required: true },\r\n    hospitalHead: { type: String, required: true },\r\n    evaluations: [MonographEvaluationItemSchema]\r\n  },\r\n  {\r\n    timestamps: true\r\n  }\r\n);\r\n\r\nexport const MonographEvaluationForm = mongoose.model<IMonographEvaluationForm>(\r\n  \"MonographEvaluationForm\",\r\n  MonographEvaluationFormSchema\r\n);","size_bytes":1959},"server/models/form-D.ts":{"content":"import mongoose, { Schema, Document } from \"mongoose\";\r\n\r\nexport interface IConferenceEvaluation extends Document {\r\n  residentId: mongoose.Types.ObjectId;\r\n  year: string;\r\n  name: string;\r\n  fatherName: string;\r\n  department: string;\r\n  trainingYear: string;\r\n  conferenceTitle: string;\r\n  score: string;\r\n  date: string;\r\n  teacherName: string;\r\n  teacherSigned: boolean;\r\n  notes: boolean;\r\n  departmentHead: string;\r\n  programHead: string;\r\n  hospitalHead: string;\r\n}\r\n\r\nconst ConferenceEvaluationSchema: Schema = new Schema({\r\n   residentId: {\r\n    type: Schema.Types.ObjectId,\r\n    ref: \"Resident\",  // 👈 به مدل Resident\r\n    required: false,  // 👈 فعلاً الزامی نیست\r\n  },\r\n  year: { type: String, required: true },\r\n  name: { type: String, required: true },\r\n  fatherName: { type: String, required: true },\r\n  department: { type: String, required: true },\r\n  trainingYear: { type: String, required: true },\r\n  conferenceTitle: { type: String, required: true },\r\n  score: { type: String, required: true },\r\n  date: { type: String, required: true },\r\n  teacherName: { type: String, required: true },\r\n  teacherSigned: { type: Boolean, default: false },\r\n  notes: { type: Boolean, default: false },\r\n  departmentHead: { type: String, required: true },\r\n  programHead: { type: String, required: true },\r\n  hospitalHead: { type: String, required: true },\r\n});\r\n\r\nexport default mongoose.model<IConferenceEvaluation>(\r\n  \"ConferenceEvaluation\",\r\n  ConferenceEvaluationSchema\r\n);\r\n","size_bytes":1508},"server/models/form-E.ts":{"content":"import mongoose, { Schema, Document } from \"mongoose\";\r\n\r\nexport interface IEvaluationFormE extends Document {\r\n  residentId: mongoose.Types.ObjectId; // رفرنس به Resident\r\n  year: string;\r\n  name: string;\r\n  fatherName: string;\r\n  trainingYear: string;\r\n  incidentTitle: string;\r\n  date: string;\r\n  score: string;\r\n  teacherName: string;\r\n  teacherSigned: boolean;\r\n  notes: boolean;\r\n  averageScore: string;\r\n  departmentHead: string;\r\n  programHead: string;\r\n  hospitalHead: string;\r\n}\r\n\r\nconst EvaluationFormESchema = new Schema<IEvaluationFormE>(\r\n  {\r\n    // این فیلد رفرنس به Resident است\r\n    residentId: {\r\n      type: Schema.Types.ObjectId,\r\n      ref: \"Resident\",\r\n     \r\n    },\r\n    year: String,\r\n    name: String,\r\n    fatherName: String,\r\n    trainingYear: String,\r\n    incidentTitle: String,\r\n    date: String,\r\n    score: String,\r\n    teacherName: String,\r\n    teacherSigned: { type: Boolean, default: false },\r\n    notes: { type: Boolean, default: false },\r\n    averageScore: String,\r\n    departmentHead: String,\r\n    programHead: String,\r\n    hospitalHead: String,\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\nexport const EvaluationFormE = mongoose.model<IEvaluationFormE>(\r\n  \"EvaluationFormE\",\r\n  EvaluationFormESchema\r\n);\r\n","size_bytes":1262},"server/models/form-F.ts":{"content":"import mongoose, { Schema, Document } from \"mongoose\";\r\n\r\ninterface MonthScore {\r\n  month: number;\r\n  value: number;\r\n}\r\n\r\ninterface Activity {\r\n  id: string;\r\n  title: string;\r\n  percent: number;\r\n  months: MonthScore[];\r\n  total: number;\r\n}\r\n\r\ninterface Section {\r\n  name: string;\r\n  activities: Activity[];\r\n}\r\n\r\nexport interface IChecklist extends Document {\r\n  studentName: string;\r\n  fatherName: string;\r\n  year: string;\r\n  sections: Section[];\r\n}\r\n\r\nconst MonthScoreSchema = new Schema<MonthScore>({\r\n  month: { type: Number, required: true },\r\n  value: { type: Number, required: true },\r\n});\r\n\r\nconst ActivitySchema = new Schema<Activity>({\r\n  id: { type: String, required: true },\r\n  title: { type: String, required: true },\r\n  percent: { type: Number, required: true },\r\n  months: { type: [MonthScoreSchema], required: true },\r\n  total: { type: Number, required: true },\r\n});\r\n\r\nconst SectionSchema = new Schema<Section>({\r\n  name: { type: String, required: true },\r\n  activities: { type: [ActivitySchema], required: true },\r\n});\r\n\r\nconst ChecklistSchema = new Schema<IChecklist>({\r\n  studentName: { type: String, required: true },\r\n  fatherName: { type: String, required: true },\r\n  year: { type: String, required: true },\r\n  sections: { type: [SectionSchema], required: true },\r\n});\r\n\r\nexport default mongoose.model<IChecklist>(\"Checklist\", ChecklistSchema);\r\n","size_bytes":1372},"server/models/form-G.ts":{"content":"import mongoose, { Schema, Document } from \"mongoose\";\r\n\r\nexport interface IEvaluationFormG extends Document {\r\n  residentId: mongoose.Types.ObjectId; // رفرنس به Resident\r\n  year: string;\r\n  name: string;\r\n  fatherName: string;\r\n  trainingYear: string;\r\n  department: string;\r\n  exam1Written: number;\r\n  exam1Practical: number;\r\n  exam2Written: number;\r\n  exam2Practical: number;\r\n  finalWritten: number;\r\n  finalPractical: number;\r\n  total: number;\r\n  average: string;\r\n  teacherName: string;\r\n  teacherSigned: boolean;\r\n  departmentHead: string;\r\n  programHead: string;\r\n  hospitalHead: string;\r\n}\r\n\r\nconst EvaluationFormGSchema = new Schema<IEvaluationFormG>(\r\n  {\r\n    residentId: { type: Schema.Types.ObjectId, ref: \"Resident\" },\r\n    year: String,\r\n    name: String,\r\n    fatherName: String,\r\n    trainingYear: String,\r\n    department: String,\r\n    exam1Written: { type: Number, default: 0 },\r\n    exam1Practical: { type: Number, default: 0 },\r\n    exam2Written: { type: Number, default: 0 },\r\n    exam2Practical: { type: Number, default: 0 },\r\n    finalWritten: { type: Number, default: 0 },\r\n    finalPractical: { type: Number, default: 0 },\r\n    total: { type: Number, default: 0 },\r\n    average: String,\r\n    teacherName: String,\r\n    teacherSigned: { type: Boolean, default: false },\r\n    departmentHead: String,\r\n    programHead: String,\r\n    hospitalHead: String,\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\nexport const EvaluationFormG = mongoose.model<IEvaluationFormG>(\r\n  \"EvaluationFormG\",\r\n  EvaluationFormGSchema\r\n);\r\n","size_bytes":1539},"server/models/form-H.ts":{"content":"// models/form-H.ts\r\nimport mongoose, { Schema, Document } from \"mongoose\";\r\n\r\nexport interface IEvaluationFormH extends Document {\r\n  studentId: mongoose.Types.ObjectId; // رفرنس به Resident\r\n  year: string;\r\n  residentName: string;\r\n  fatherName: string;\r\n  department: string;\r\n  trainingYear: string;\r\n  totalScore: number;\r\n  averageScore: number;\r\n  instructorName: string;\r\n  instructorSigned: boolean;\r\n  shiftDepartment: string;\r\n  programDirector: string;\r\n  presidentSigned: boolean;\r\n}\r\n\r\nconst EvaluationFormHSchema = new Schema<IEvaluationFormH>(\r\n  {\r\n    studentId: { type: Schema.Types.ObjectId, ref: \"Resident\" }, // 👈 رفرنس\r\n    year: String,\r\n    residentName: String,\r\n    fatherName: String,\r\n    department: String,\r\n    trainingYear: String,\r\n    totalScore: { type: Number, default: 0 },\r\n    averageScore: { type: Number, default: 0 },\r\n    instructorName: String,\r\n    instructorSigned: { type: Boolean, default: false },\r\n    shiftDepartment: String,\r\n    programDirector: String,\r\n    presidentSigned: { type: Boolean, default: false },\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\nexport const EvaluationFormH = mongoose.model<IEvaluationFormH>(\r\n  \"EvaluationFormH\",\r\n  EvaluationFormHSchema\r\n);\r\n","size_bytes":1235},"server/models/form-K.ts":{"content":"// models/monographEvaluation.ts\r\nimport mongoose, { Schema, Document } from \"mongoose\";\r\n\r\nexport interface IMonographEvaluation extends Document {\r\n  studentId: mongoose.Types.ObjectId;\r\n  name: string;\r\n  lastName: string;\r\n  fatherName: string;\r\n  idNumber: string;\r\n  field: string;\r\n  trainingYear: string;\r\n  startYear: string;\r\n  date: string;\r\n  evaluations: {\r\n    section: string;\r\n    writingStyle: string;\r\n    presentation: string;\r\n    answersToQuestions: string;\r\n    defense: string;\r\n    answersToAdditional: string;\r\n    percentage: string;\r\n    score: string;\r\n    teacherName: string;\r\n    teacherSigned: boolean;\r\n    characteristics: string;\r\n    total: string;\r\n    average: string;\r\n  }[];\r\n}\r\n\r\nconst EvaluationItemSchema = new Schema(\r\n  {\r\n    section: String,\r\n    writingStyle: String,\r\n    presentation: String,\r\n    answersToQuestions: String,\r\n    defense: String,\r\n    answersToAdditional: String,\r\n    percentage: String,\r\n    score: String,\r\n    teacherName: String,\r\n    teacherSigned: Boolean,\r\n    characteristics: String,\r\n    total: String,\r\n    average: String,\r\n  },\r\n  { _id: false }\r\n);\r\n\r\nconst MonographEvaluationSchema = new Schema(\r\n  {\r\n    studentId: {\r\n      type: Schema.Types.ObjectId,\r\n      ref: \"Resident\",\r\n    },\r\n    name: String,\r\n    lastName: String,\r\n    fatherName: String,\r\n    idNumber: String,\r\n    field: String,\r\n    trainingYear: String,\r\n    startYear: String,\r\n    date: String,\r\n    evaluations: [EvaluationItemSchema],\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\nexport const MonographEvaluation = mongoose.model<IMonographEvaluation>(\r\n  \"MonographEvaluation\",\r\n  MonographEvaluationSchema\r\n);\r\n","size_bytes":1664},"server/models/index.ts":{"content":"export * from './User';\nexport * from './Resident';\nexport * from './Teacher';","size_bytes":78},"server/models/trainerModel.ts":{"content":"import mongoose, { Schema, Document } from \"mongoose\";\r\n\r\nexport interface ITrainer extends Document {\r\n  id: string;                // ایدی کاربر (اختیاری ولی اگر لازم است نگهداری شود)\r\n  name: string;\r\n  lastName: string;\r\n  parentType: string;\r\n  parentName: string;\r\n  gender: string;\r\n  province: string;\r\n  department: string;\r\n  specialty: string;\r\n  hospital: string;\r\n  joiningDate: Date;\r\n  trainingYear: string;\r\n  supervisorName: string;\r\n  birthDate: Date;\r\n  idNumber: string;\r\n  phoneNumber: string;\r\n  whatsappNumber: string;\r\n  email: string;\r\n  postNumberAndCode: string;\r\n  appointmentType: string;\r\n  status: string;\r\n}\r\n\r\nconst trainerSchema = new Schema<ITrainer>(\r\n  {\r\n    id: { type: String }, // اگر نیاز دارید که ایدی اختصاصی ذخیره شود\r\n    name: { type: String, required: true, trim: true },\r\n    lastName: { type: String, required: true, trim: true },\r\n    parentType: { type: String, trim: true },\r\n    parentName: { type: String, trim: true },\r\n    gender: { type: String, enum: [\"مرد\", \"زن\", \"\"], default: \"\" },\r\n    province: { type: String, required: true, trim: true },\r\n    department: { type: String, required: true, trim: true },\r\n    specialty: { type: String, required: true, trim: true },\r\n    hospital: { type: String, trim: true },\r\n    joiningDate: { type: Date },\r\n    trainingYear: { type: String, trim: true },\r\n    supervisorName: { type: String, trim: true },\r\n    birthDate: { type: Date },\r\n    idNumber: { type: String, trim: true },\r\n    phoneNumber: { type: String, trim: true },\r\n    whatsappNumber: { type: String, trim: true },\r\n    email: { type: String, lowercase: true, trim: true },\r\n    postNumberAndCode: { type: String, trim: true },\r\n    appointmentType: {\r\n      type: String,\r\n      enum: [\"رقابت آزاد\", \"داوطلب\", \"حکمی\", \"بست خالی\", \"\"],\r\n      default: \"\",\r\n    },\r\n    status: {\r\n      type: String,\r\n      enum: [\"برحال\", \"خدماتی\", \"\"],\r\n      default: \"\",\r\n    },\r\n  },\r\n  { timestamps: true } // ایجاد createdAt و updatedAt\r\n);\r\n\r\nexport default mongoose.models.Trainer ||\r\n  mongoose.model<ITrainer>(\"Trainer\", trainerSchema);\r\n","size_bytes":2222},"server/routes/form-C.ts":{"content":"// routes/monographRoutes.ts\r\nimport express from 'express';\r\nimport { MonographController } from '../controllers/form-C';\r\n\r\nconst router = express.Router();\r\n\r\n// ذخیره فرم جدید\r\nrouter.post('/', MonographController.createForm);\r\n\r\n// دریافت تمام فرم‌ها\r\nrouter.get('/', MonographController.getAllForms);\r\n\r\nexport default router;","size_bytes":361},"server/routes/form-D.ts":{"content":"import express from \"express\";\r\nimport { createEvaluation, getEvaluations } from \"../controllers/form-D\";\r\n\r\nconst router = express.Router();\r\n\r\nrouter.post(\"/\", createEvaluation); // ذخیره فرم\r\nrouter.get(\"/\", getEvaluations);    // گرفتن تمام فرم‌ها (اختیاری)\r\n\r\nexport default router;\r\n","size_bytes":320},"server/routes/form-E.ts":{"content":"import express from \"express\";\r\nimport {\r\n  createEvaluationFormE,\r\n  getAllEvaluationFormsE,\r\n  getEvaluationFormsByResident,\r\n  getEvaluationFormEById,\r\n  updateEvaluationFormE,\r\n  deleteEvaluationFormE,\r\n} from \"../controllers/form-E\";\r\n\r\nconst router = express.Router();\r\n\r\n\r\n\r\n// ایجاد فرم جدید\r\nrouter.post(\"/\", createEvaluationFormE);\r\n// گرفتن تمام فرم‌ها بدون فیلتر\r\nrouter.get(\"/\", getAllEvaluationFormsE);\r\n// تمام فرم‌های یک Resident خاص\r\nrouter.get(\"/resident/:residentId\", getEvaluationFormsByResident);\r\n\r\n// یک فرم خاص با ID خودش\r\nrouter.get(\"/:id\", getEvaluationFormEById);\r\n\r\n// آپدیت فرم\r\nrouter.put(\"/:id\", updateEvaluationFormE);\r\n\r\n// حذف فرم\r\nrouter.delete(\"/:id\", deleteEvaluationFormE);\r\n\r\nexport default router;\r\n","size_bytes":821},"server/routes/form-F.ts":{"content":"import express from \"express\";\r\nimport { createChecklist,getChecklistByStudentName   } from \"../controllers/form-F\";\r\n\r\nconst router = express.Router();\r\n\r\nrouter.post(\"/\", createChecklist); // ذخیره فرم\r\n// router.get(\"/\", getChecklists);    // مشاهده لیست ذخیره شده\r\nrouter.get(\"/student/:studentName\", getChecklistByStudentName);\r\nexport default router;\r\n","size_bytes":384},"server/routes/form-G.ts":{"content":"import { Router } from \"express\";\r\nimport {\r\n  createEvaluationFormG,\r\n  getEvaluationFormsG,\r\n  getEvaluationFormGById,\r\n  updateEvaluationFormG,\r\n  deleteEvaluationFormG,\r\n} from \"../controllers/form-G\";\r\n\r\nconst router = Router();\r\n\r\n// ایجاد فرم جدید\r\nrouter.post(\"/\", createEvaluationFormG);\r\n\r\n// گرفتن همه فرم‌ها\r\nrouter.get(\"/\", getEvaluationFormsG);\r\n\r\n// گرفتن فرم با ID\r\nrouter.get(\"/:id\", getEvaluationFormGById);\r\n\r\n// آپدیت فرم\r\nrouter.put(\"/:id\", updateEvaluationFormG);\r\n\r\n// حذف فرم\r\nrouter.delete(\"/:id\", deleteEvaluationFormG);\r\n\r\nexport default router;\r\n","size_bytes":625},"server/routes/form-H.ts":{"content":"// routes/form-H.ts\r\nimport { Router } from \"express\";\r\nimport {\r\n  createEvaluationFormH,\r\n  getEvaluationFormsH,\r\n} from \"../controllers/form-H\";\r\n\r\nconst router = Router();\r\n\r\n// ایجاد فرم جدید\r\nrouter.post(\"/\", createEvaluationFormH);\r\n\r\n// گرفتن همه فرم‌ها\r\nrouter.get(\"/\", getEvaluationFormsH);\r\n\r\nexport default router;\r\n","size_bytes":355},"server/routes/form-k.ts":{"content":"// routes/monographEvaluation.ts\r\nimport { Router } from \"express\";\r\nimport {\r\n  createMonographEvaluation,\r\n  getMonographEvaluations,\r\n} from \"../controllers/form-K\"; // <-- مطمئن شو مسیر صحیح است\r\n\r\nconst router = Router();\r\n\r\nrouter.post(\"/\", (req, res, next) => {\r\n  console.log(\"[route] POST /api/monographEvaluation\", Object.keys(req.body).length ? \"body present\" : \"no body\");\r\n  return createMonographEvaluation(req, res).catch(next);\r\n});\r\n\r\nrouter.get(\"/\", (req, res, next) => {\r\n  console.log(\"[route] GET /api/monographEvaluation\");\r\n  return getMonographEvaluations(req, res).catch(next);\r\n});\r\n\r\nexport default router;\r\n","size_bytes":653},"server/routes/residentRoutes.ts":{"content":"import express from 'express';\nimport { ResidentModel } from '../models';\nimport { z } from 'zod';\n\nconst router = express.Router();\n\n// Resident validation schema\nconst createResidentSchema = z.object({\n  fullName: z.string().min(1, \"Full name is required\"),\n  age: z.number().min(18, \"Age must be at least 18\").max(100, \"Age must be less than 100\"),\n  gender: z.enum([\"Male\", \"Female\"]),\n  department: z.string().min(1, \"Department is required\"),\n  startDate: z.string().transform((str) => new Date(str)),\n  endDate: z.string().optional().transform((str) => str ? new Date(str) : undefined),\n  status: z.string().optional().default(\"active\"),\n  profileImageUrl: z.string().optional(),\n});\n\nconst updateResidentSchema = createResidentSchema.partial();\n\n// Get all residents\nrouter.get('/', async (req, res) => {\n  try {\n    const residents = await ResidentModel.find().sort({ createdAt: -1 });\n    res.json(residents);\n  } catch (error) {\n    console.error('Error fetching residents:', error);\n    res.status(500).json({ message: 'Failed to fetch residents' });\n  }\n});\n\n// Get resident by ID\nrouter.get('/:id', async (req, res) => {\n  try {\n    const resident = await ResidentModel.findById(req.params.id);\n    if (!resident) {\n      return res.status(404).json({ message: 'Resident not found' });\n    }\n    res.json(resident);\n  } catch (error) {\n    console.error('Error fetching resident:', error);\n    res.status(500).json({ message: 'Failed to fetch resident' });\n  }\n});\n\n// Create new resident\nrouter.post('/', async (req, res) => {\n  try {\n    const validatedData = createResidentSchema.parse(req.body);\n    const resident = new ResidentModel(validatedData);\n    const savedResident = await resident.save();\n    res.status(201).json(savedResident);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ \n        message: 'Validation error', \n        errors: error.errors \n      });\n    }\n    console.error('Error creating resident:', error);\n    res.status(500).json({ message: 'Failed to create resident' });\n  }\n});\n\n// Update resident\nrouter.put('/:id', async (req, res) => {\n  try {\n    const validatedData = updateResidentSchema.parse(req.body);\n    const resident = await ResidentModel.findByIdAndUpdate(\n      req.params.id,\n      { ...validatedData, updatedAt: new Date() },\n      { new: true, runValidators: true }\n    );\n    \n    if (!resident) {\n      return res.status(404).json({ message: 'Resident not found' });\n    }\n    \n    res.json(resident);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ \n        message: 'Validation error', \n        errors: error.errors \n      });\n    }\n    console.error('Error updating resident:', error);\n    res.status(500).json({ message: 'Failed to update resident' });\n  }\n});\n\n// Delete resident\nrouter.delete('/:id', async (req, res) => {\n  try {\n    const resident = await ResidentModel.findByIdAndDelete(req.params.id);\n    if (!resident) {\n      return res.status(404).json({ message: 'Resident not found' });\n    }\n    res.json({ message: 'Resident deleted successfully' });\n  } catch (error) {\n    console.error('Error deleting resident:', error);\n    res.status(500).json({ message: 'Failed to delete resident' });\n  }\n});\n\nexport { router as residentRoutes };","size_bytes":3314},"server/routes/teacherActivityRoutes.ts":{"content":"import { Router } from \"express\";\r\nimport { TeacherActivityController } from \"../controllers/TeacherActivityController\";\r\nimport { isDemoAuthenticated } from \"../demoAuth\";\r\n\r\nexport const teacherActivityRoutes = Router();\r\n\r\nteacherActivityRoutes.post(\"/\", isDemoAuthenticated, TeacherActivityController.create);\r\nteacherActivityRoutes.get(\"/\", isDemoAuthenticated, TeacherActivityController.getAll);\r\n","size_bytes":403},"server/routes/teacherRoutes.ts":{"content":"import express from 'express';\nimport { TeacherModel } from '../models';\nimport { z } from 'zod';\n\nconst router = express.Router();\n\n// Teacher validation schema\nconst createTeacherSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  fatherName: z.string().min(1, \"Father name is required\"),\n  grandfatherName: z.string().min(1, \"Grandfather name is required\"),\n  academicRank: z.string().min(1, \"Academic rank is required\"),\n  rankAchievementDate: z.string().transform((str) => new Date(str)),\n  trainerAppointmentDate: z.string().transform((str) => new Date(str)),\n  gender: z.enum([\"Male\", \"Female\"]),\n  province: z.string().min(1, \"Province is required\"),\n  subject: z.string().min(1, \"Subject is required\"),\n  position: z.string().min(1, \"Position is required\"),\n  hospital: z.string().min(1, \"Hospital is required\"),\n  dateOfBirth: z.string().transform((str) => new Date(str)),\n  idNumber: z.string().min(1, \"ID number is required\"),\n  dutyStartDate: z.string().transform((str) => new Date(str)),\n  contactInfo: z.string().min(1, \"Contact info is required\"),\n  whatsappNumber: z.string().min(1, \"WhatsApp number is required\"),\n  emailAddress: z.string().email(\"Valid email is required\"),\n  postCode: z.string().min(1, \"Post code is required\"),\n  appointmentType: z.string().min(1, \"Appointment type is required\"),\n  department: z.string().min(1, \"Department is required\"),\n  experience: z.number().min(0, \"Experience must be non-negative\"),\n  status: z.string().optional().default(\"active\"),\n  profileImageUrl: z.string().optional(),\n});\n\nconst updateTeacherSchema = createTeacherSchema.partial();\n\n// Get all teachers\nrouter.get('/', async (req, res) => {\n  try {\n    const teachers = await TeacherModel.find().sort({ createdAt: -1 });\n    res.json(teachers);\n  } catch (error) {\n    console.error('Error fetching teachers:', error);\n    res.status(500).json({ message: 'Failed to fetch teachers' });\n  }\n});\n\n// Get teacher by ID\nrouter.get('/:id', async (req, res) => {\n  try {\n    const teacher = await TeacherModel.findById(req.params.id);\n    if (!teacher) {\n      return res.status(404).json({ message: 'Teacher not found' });\n    }\n    res.json(teacher);\n  } catch (error) {\n    console.error('Error fetching teacher:', error);\n    res.status(500).json({ message: 'Failed to fetch teacher' });\n  }\n});\n\n// Create new teacher\nrouter.post('/', async (req, res) => {\n  try {\n    const validatedData = createTeacherSchema.parse(req.body);\n    const teacher = new TeacherModel(validatedData);\n    const savedTeacher = await teacher.save();\n    res.status(201).json(savedTeacher);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ \n        message: 'Validation error', \n        errors: error.errors \n      });\n    }\n    console.error('Error creating teacher:', error);\n    res.status(500).json({ message: 'Failed to create teacher' });\n  }\n});\n\n// Update teacher\nrouter.put('/:id', async (req, res) => {\n  try {\n    const validatedData = updateTeacherSchema.parse(req.body);\n    const teacher = await TeacherModel.findByIdAndUpdate(\n      req.params.id,\n      { ...validatedData, updatedAt: new Date() },\n      { new: true, runValidators: true }\n    );\n    \n    if (!teacher) {\n      return res.status(404).json({ message: 'Teacher not found' });\n    }\n    \n    res.json(teacher);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ \n        message: 'Validation error', \n        errors: error.errors \n      });\n    }\n    console.error('Error updating teacher:', error);\n    res.status(500).json({ message: 'Failed to update teacher' });\n  }\n});\n\n// Delete teacher\nrouter.delete('/:id', async (req, res) => {\n  try {\n    const teacher = await TeacherModel.findByIdAndDelete(req.params.id);\n    if (!teacher) {\n      return res.status(404).json({ message: 'Teacher not found' });\n    }\n    res.json({ message: 'Teacher deleted successfully' });\n  } catch (error) {\n    console.error('Error deleting teacher:', error);\n    res.status(500).json({ message: 'Failed to delete teacher' });\n  }\n});\n\nexport { router as teacherRoutes };","size_bytes":4140},"server/routes/trainerRoutes.ts":{"content":"import express, { Request, Response } from \"express\";\r\nimport Trainer, { ITrainer } from \"../models/trainerModel\";\r\n\r\nconst router = express.Router();\r\n\r\n// Create Trainer\r\nrouter.post(\"/\", async (req: Request, res: Response) => {\r\n  try {\r\n    const newTrainer = new Trainer(req.body);\r\n    const savedTrainer = await newTrainer.save();\r\n    res.status(201).json(savedTrainer);\r\n  } catch (error) {\r\n    console.error(\"Error creating trainer:\", error);\r\n    res.status(500).json({ message: \"خطا در ثبت ترینر\" });\r\n  }\r\n});\r\n\r\n// Get all Trainers\r\nrouter.get(\"/\", async (_req: Request, res: Response) => {\r\n  try {\r\n    const trainers = await Trainer.find().lean();\r\n    res.status(200).json(trainers);\r\n  } catch (error) {\r\n    console.error(\"Error fetching trainers:\", error);\r\n    res.status(500).json({ message: \"خطا در دریافت ترینرها\" });\r\n  }\r\n});\r\n\r\n// Get Trainer by ID\r\nrouter.get(\"/:id\", async (req: Request, res: Response) => {\r\n  try {\r\n    const trainer = await Trainer.findById(req.params.id).lean();\r\n    if (!trainer) return res.status(404).json({ message: \"ترینر یافت نشد\" });\r\n    res.status(200).json(trainer);\r\n  } catch (error) {\r\n    console.error(\"Error fetching trainer:\", error);\r\n    res.status(500).json({ message: \"خطا در دریافت ترینر\" });\r\n  }\r\n});\r\n\r\n// Update Trainer by ID\r\nrouter.put(\"/:id\", async (req: Request, res: Response) => {\r\n  try {\r\n    const updatedTrainer = await Trainer.findByIdAndUpdate(req.params.id, req.body, { new: true });\r\n    if (!updatedTrainer) return res.status(404).json({ message: \"ترینر یافت نشد\" });\r\n    res.status(200).json(updatedTrainer);\r\n  } catch (error) {\r\n    console.error(\"Error updating trainer:\", error);\r\n    res.status(500).json({ message: \"خطا در بروزرسانی ترینر\" });\r\n  }\r\n});\r\n\r\n// Delete Trainer by ID\r\nrouter.delete(\"/:id\", async (req: Request, res: Response) => {\r\n  try {\r\n    const deletedTrainer = await Trainer.findByIdAndDelete(req.params.id);\r\n    if (!deletedTrainer) return res.status(404).json({ message: \"ترینر یافت نشد\" });\r\n    res.status(200).json({ message: \"ترینر حذف شد\" });\r\n  } catch (error) {\r\n    console.error(\"Error deleting trainer:\", error);\r\n    res.status(500).json({ message: \"خطا در حذف ترینر\" });\r\n  }\r\n});\r\n\r\nexport { router as trainerRoutes };\r\n","size_bytes":2384},"server/routes/userRoutes.ts":{"content":"import express from 'express';\nimport { UserModel } from '../models';\n\nconst router = express.Router();\n\n// Get all users\nrouter.get('/', async (req, res) => {\n  try {\n    const users = await UserModel.find().sort({ createdAt: -1 });\n    res.json(users);\n  } catch (error) {\n    console.error('Error fetching users:', error);\n    res.status(500).json({ message: 'Failed to fetch users' });\n  }\n});\n\n// Get user by ID\nrouter.get('/:id', async (req, res) => {\n  try {\n    const user = await UserModel.findById(req.params.id);\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n    res.json(user);\n  } catch (error) {\n    console.error('Error fetching user:', error);\n    res.status(500).json({ message: 'Failed to fetch user' });\n  }\n});\n\nexport { router as userRoutes };","size_bytes":807},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\nimport { getQueryFn } from \"@/lib/queryClient\";\n\nexport function useAuth() {\n  const { data: user, isLoading, error } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user && !error,\n  };\n}\n","size_bytes":422},"client/src/hooks/useTrainers.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\r\nimport type { Trainer } from \"server/models/Trainers\";\r\n\r\nexport function useTrainers() {\r\n  return useQuery<Trainer[]>({\r\n    queryKey: [\"trainers\"],\r\n    queryFn: async () => {\r\n      const res = await fetch(\"/api/trainers\");\r\n      if (!res.ok) throw new Error(\"Failed to fetch trainers\");\r\n      return res.json();\r\n    },\r\n  });\r\n}\r\n","size_bytes":389},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  url: string,\n  options?: {\n    method?: string;\n    body?: string;\n    headers?: Record<string, string>;\n  }\n): Promise<Response> {\n  const res = await fetch(url, {\n    method: options?.method || \"GET\",\n    headers: options?.headers || {},\n    body: options?.body,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1403},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/about.tsx":{"content":"// AboutUs.tsx\nimport React from \"react\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { FaGlobe, FaTwitter, FaLinkedin, FaInstagram, FaFacebook, FaLeaf } from \"react-icons/fa\";\n\nexport default function AboutUs() {\n  const companies = [\n    {\n      name: \"WinSoft Technology\",\n      description: \"فناوری اطلاعات و خدمات نرم‌افزاری\",\n      details:\n        \"شرکت تکنالوژی وین سافت با بیش از ۱۰ سال تجربه در ارائه راهکارهای نرم‌افزاری و خدمات IT، پروژه‌های متعددی را با موفقیت انجام داده است.\",\n      website: \"https://companyA.com\",\n      logo: \"/logos/companyA.png\",\n      color: \"bg-gradient-to-br from-emerald-50 to-green-50\",\n      buttonColor: \"bg-emerald-600 hover:bg-emerald-700 text-white\",\n      socialMedia: [\n        { platform: \"twitter\", url: \"https://twitter.com/companyA\", icon: <FaTwitter className=\"text-emerald-600\" /> },\n        { platform: \"linkedin\", url: \"https://linkedin.com/company/companyA\", icon: <FaLinkedin className=\"text-emerald-700\" /> },\n        { platform: \"instagram\", url: \"https://instagram.com/companyA\", icon: <FaInstagram className=\"text-emerald-800\" /> },\n      ]\n    },\n    {\n      name: \"CodeA Software Development Team\",\n      description: \"طراحی و توسعه وب و اپلیکیشن\",\n      details:\n        \"شرکت تکنالوژی وین سافت با تیم حرفه‌ای خود خدمات طراحی و توسعه وب‌سایت و اپلیکیشن‌های موبایل را ارائه می‌دهد.\",\n      website: \"https://companyB.com\",\n      logo: \"/logos/companyB.png\",\n      color: \"bg-gradient-to-br from-lime-50 to-green-100\",\n      buttonColor: \"bg-lime-600 hover:bg-lime-700 text-white\",\n      socialMedia: [\n        { platform: \"website\", url: \"https://companyB.com\", icon: <FaGlobe className=\"text-lime-600\" /> },\n        { platform: \"twitter\", url: \"https://twitter.com/companyB\", icon: <FaTwitter className=\"text-lime-700\" /> },\n        { platform: \"facebook\", url: \"https://facebook.com/companyB\", icon: <FaFacebook className=\"text-lime-800\" /> },\n      ]\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <Header />\n      <Sidebar />\n      <div className=\"mr-64 pt-20 p-6 space-y-6\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold tracking-tight bg-gradient-to-r from-emerald-700 to-green-600 bg-clip-text text-transparent\">\n            درباره ما\n          </h1>\n          <p className=\"text-slate-600 mt-2 text-sm max-w-2xl mx-auto\">\n            معرفی شرکت‌های گروه و خدمات متنوعی که ارائه می‌دهیم\n          </p>\n        </div>\n\n        {/* Grid شرکت‌ها */}\n        <div className=\"grid gap-6 md:grid-cols-2\">\n          {companies.map((company) => (\n            <Card\n              key={company.name}\n              className={`hover:shadow-lg transition-all duration-300 transform hover:-translate-y-0.5 ${company.color} rounded-lg overflow-hidden border-0 shadow-md`}\n            >\n              <CardHeader className=\"flex flex-row items-center gap-4 pb-3 border-b border-emerald-100/50\">\n                {company.logo && (\n                  <div className=\"relative\">\n                    <img\n                      src={company.logo}\n                      alt={company.name}\n                      className=\"w-14 h-14 rounded-full border-2 border-white shadow-sm\"\n                    />\n                    <div className=\"absolute -bottom-1 -right-1 w-4 h-4 rounded-full bg-white flex items-center justify-center shadow-xs\">\n                      <div className=\"w-3 h-3 rounded-full bg-emerald-400\"></div>\n                    </div>\n                  </div>\n                )}\n                <div className=\"flex-1\">\n                  <CardTitle className=\"text-lg font-bold text-emerald-900\">{company.name}</CardTitle>\n                  <CardDescription className=\"text-emerald-700 mt-1 text-xs\">\n                    {company.description}\n                  </CardDescription>\n                </div>\n              </CardHeader>\n              <CardContent className=\"pt-4\">\n                <p className=\"text-slate-700 mb-4 leading-relaxed text-justify text-sm\">{company.details}</p>\n                \n                <div className=\"mb-4\">\n                  <h3 className=\"text-xs font-semibold text-emerald-600 mb-2\">شبکه‌های اجتماعی</h3>\n                  <div className=\"flex gap-2\">\n                    {company.socialMedia.map((social, index) => (\n                      <a\n                        key={index}\n                        href={social.url}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        className=\"w-8 h-8 rounded-full bg-white flex items-center justify-center shadow-xs hover:shadow-sm transition-shadow border border-emerald-100 hover:border-emerald-200\"\n                        aria-label={`${social.platform} ${company.name}`}\n                      >\n                        {social.icon}\n                      </a>\n                    ))}\n                  </div>\n                </div>\n                \n                <div className=\"flex justify-between items-center pt-3 border-t border-emerald-100/50\">\n                  <div className=\"flex gap-1\">\n                    <span className=\"text-xs py-1 px-2 rounded-full bg-emerald-100 text-emerald-700\">فناوری</span>\n                    <span className=\"text-xs py-1 px-2 rounded-full bg-emerald-100 text-emerald-700\">نوآوری</span>\n                  </div>\n                  <a\n                    href={company.website}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className={`flex items-center gap-1 px-3 py-1.5 rounded-full ${company.buttonColor} shadow-xs hover:shadow-sm transition-shadow text-xs`}\n                  >\n                    <FaGlobe className=\"text-xs\" />\n                    <span>وب‌سایت</span>\n                  </a>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* بخش اضافی برای اطلاعات تماس */}\n        <Card className=\"rounded-lg bg-gradient-to-r from-emerald-50 to-green-50 border-0 shadow-md mt-8\">\n          <CardHeader className=\"text-center pb-3\">\n            <CardTitle className=\"text-lg font-bold text-emerald-900\">با ما در ارتباط باشید</CardTitle>\n            <CardDescription className=\"text-slate-600 text-xs\">\n              برای کسب اطلاعات بیشتر درباره خدمات ما، با ما تماس بگیرید\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"text-center pt-1\">\n            <div className=\"flex justify-center gap-4 mb-4\">\n              <a href=\"tel:+982112345678\" className=\"flex items-center gap-1 text-slate-700 hover:text-emerald-600 transition-colors text-xs\">\n                <span className=\"w-8 h-8 rounded-full bg-white flex items-center justify-center shadow-xs\">\n                  📞\n                </span>\n                <span>+98 21 1234 5678</span>\n              </a>\n              <a href=\"mailto:info@example.com\" className=\"flex items-center gap-1 text-slate-700 hover:text-emerald-600 transition-colors text-xs\">\n                <span className=\"w-8 h-8 rounded-full bg-white flex items-center justify-center shadow-xs\">\n                  ✉️\n                </span>\n                <span>info@example.com</span>\n              </a>\n            </div>\n            <Button className=\"rounded-full bg-gradient-to-r from-emerald-600 to-green-600 hover:from-emerald-700 hover:to-green-700 border-0 shadow-xs text-xs py-1.5 px-4\">\n              <FaLeaf className=\"ml-1 text-xs\" />\n              درخواست مشاوره\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":8271},"client/src/pages/dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-hospital-green-500\"></div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <Header />\n      <Sidebar />\n      <div className=\"ml-64\">\n        {/* Content rendered by individual pages */}\n      </div>\n    </div>\n  );\n}\n","size_bytes":1197},"client/src/pages/landing.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useState } from \"react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Landing() {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [showDemo, setShowDemo] = useState(false);\n  const { toast } = useToast();\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      await apiRequest(\"/api/login\", {\n        method: \"POST\",\n        body: JSON.stringify({ username, password }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n\n      toast({\n        title: \"Login successful\",\n        description: \"Welcome to the Hospital Resident Management System\",\n      });\n\n      // Refresh the page to trigger auth state update\n      window.location.reload();\n    } catch (error) {\n      toast({\n        title: \"Login failed\",\n        description: \"Please check your credentials and try again\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const fillDemoCredentials = (type: 'admin' | 'viewer') => {\n    if (type === 'admin') {\n      setUsername(\"admin@com\");\n      setPassword(\"admin123\");\n    } else {\n      setUsername(\"viewer@com\");\n      setPassword(\"Viewer123\");\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-slate-50 to-slate-100\">\n      <Card className=\"w-[400px] h-[450px] max-w-md mx-4 \">\n        <CardHeader className=\"text-center\">\n          <div className=\"mx-auto h-16 w-16 bg-hospital-green-500 rounded-full flex items-center justify-center mb-4\">\n            <svg\n              className=\"h-8 w-8 text-white\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              viewBox=\"0 0 24 24\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4\"\n              />\n            </svg>\n          </div>\n          <CardTitle className=\"text-3xl font-bold text-slate-900\">سیستم مدیریتی ترینری شفاخانه چشم نور</CardTitle>\n          {/* <p className=\"text-slate-600\">ورود به سیستم </p> */}\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleLogin} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"username\">ایمیل</Label>\n              <Input \n                id=\"username\"\n                type=\"email\"\n                placeholder=\"ایمیل خود را وارد کنید\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                required\n                data-testid=\"input-username\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"password\">پسورد</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"پسورد خود را بنویسید\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n                data-testid=\"input-password\"\n              />\n            </div>\n            <Button\n              type=\"submit\"\n              className=\"w-full bg-hospital-green-600 hover:bg-hospital-green-700\"\n              disabled={isLoading}\n              data-testid=\"button-login\"\n            >\n              {isLoading ? \"Signing in...\" : \"Sign In\"}\n            </Button>\n          </form>\n\n          {/* <div className=\"mt-6 pt-4 border-t\"> */}\n            {/* <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => setShowDemo(!showDemo)}\n              className=\"w-full mb-3\"\n              data-testid=\"button-show-demo\"\n            >\n              {showDemo ? \"پنهان\" : \"نمایش\"} اکونت های دیمو\n            </Button> */}\n\n            {showDemo && (\n              <div className=\"space-y-2\">\n                {/* <div className=\"text-sm text-slate-600 mb-3\">\n                  استفاده از اکونت دیمو\n                </div> */}\n                {/* <div className=\"flex gap-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"secondary\"\n                    size=\"sm\"\n                    onClick={() => fillDemoCredentials('admin')}\n                    className=\"flex-1\"\n                    data-testid=\"button-demo-admin\"\n                  >\n                    ادمین\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    variant=\"secondary\"\n                    size=\"sm\"\n                    onClick={() => fillDemoCredentials('viewer')}\n                    className=\"flex-1\"\n                    data-testid=\"button-demo-viewer\"\n                  >\n                    ناظر\n                  </Button>\n                </div> */}\n                <div className=\"text-xs text-slate-500 mt-2\">\n                  ادمین: دسترسی تمام • ناظر: فقد دیدن سیستم\n                </div>\n              </div>\n            )}\n          {/* </div> */}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5771},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">صفحه پیدا نشد</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":717},"client/src/pages/reports.tsx":{"content":"import ReportCards from \"@/components/reports/report-cards\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\n\nexport default function Reports() {\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <Header />\n      <Sidebar />\n      <div className=\"mr-64 pt-20 p-6\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b border-slate-200 -m-6 mb-6\">\n        <div className=\"px-6 py-4\">\n          <h1 className=\"text-2xl font-semibold text-slate-900\">گزارشات و تحلیل‌ها</h1>\n        </div>\n      </header>\n\n      <ReportCards />\n      </div>\n    </div>\n  );\n}\n","size_bytes":660},"client/src/pages/residents.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Input } from \"@/components/ui/input\";\nimport TrainerRegistrationForm from \"@/components/forms/TrainerRegistrationForm\";\nimport TrainerDetails from \"@/components/residents/resident-details\";\n\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\nimport { Search, Eye, MoreHorizontal, Plus, X } from \"lucide-react\";\nimport FormModal from \"@/components/forms/form-modal\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\ntype Trainer = {\n  _id: string;\n  id: string;\n  name: string;\n  lastName: string;\n  parentType: string;\n  parentName: string;\n  gender: string;\n  province: string;\n  department: string;\n  specialty: string;\n  hospital: string;\n  joiningDate: string;\n  trainingYear: string;\n  supervisorName: string;\n  birthDate: string;\n  idNumber: string;\n  phoneNumber: string;\n  whatsappNumber: string;\n  email: string;\n  postNumberAndCode: string;\n  appointmentType: string;\n  status: string;\n  profileImageUrl?: string;\n};\n\ntype FormType = { type: string; name: string };\n\nconst FORM_TYPES: FormType[] = [\n  { type: \"J\", name: \"Initial Assessment\" },\n  { type: \"F\", name: \"Mid-Training Evaluation\" },\n  { type: \"D\", name: \"Clinical Skills\" },\n  { type: \"I\", name: \"Research Progress\" },\n  { type: \"G\", name: \"Communication Skills\" },\n  { type: \"E\", name: \"Ethics & Professionalism\" },\n  { type: \"C\", name: \"Case Presentation\" },\n  { type: \"H\", name: \"Hands-on Procedure\" },\n  { type: \"K\", name: \"Final Competency\" },\n];\n\nexport default function TrainersPage() {\n  const { user } = useAuth();\n  const [selectedTrainer, setSelectedTrainer] = useState<string | null>(null);\n  const [selectedForm, setSelectedForm] = useState<any | null>(null);\n  const [showDropdownId, setShowDropdownId] = useState<string | null>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [departmentFilter, setDepartmentFilter] = useState(\"all\");\n  const [showForm, setShowForm] = useState(false);\n\n  const { data: trainers = [], isLoading } = useQuery<Trainer[]>({\n    queryKey: [\"/api/trainers\"],\n    queryFn: async () => {\n      const res = await fetch(\"/api/trainers\");\n      return res.json();\n    },\n  });\n\n  const filteredTrainers = trainers.filter((trainer) => {\n    const fullName = `${trainer.name} ${trainer.lastName}`.toLowerCase();\n    const matchesSearch =\n      fullName.includes(searchTerm.toLowerCase()) ||\n      trainer.department.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesDepartment =\n      departmentFilter === \"all\" || trainer.department === departmentFilter;\n    return matchesSearch && matchesDepartment;\n  });\n\n  const departments = Array.from(new Set(trainers.map((t) => t.department)));\n\n  const handleSelectForm = (trainer: Trainer, ft: FormType) => {\n    setSelectedForm({\n      _id: `new-${ft.type}`,\n      formType: ft.type,\n      status: \"pending\",\n      createdAt: new Date().toISOString(),\n      completedAt: null,\n      trainerId: trainer._id,\n    });\n    setShowDropdownId(null);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-slate-50\">\n        <Header />\n        <Sidebar />\n        <div className=\"mr-64 pt-20 p-6\">\n          <div className=\"animate-pulse space-y-6\">\n            <div className=\"h-8 bg-slate-200 rounded w-64\"></div>\n            <div className=\"h-20 bg-slate-200 rounded\"></div>\n            <div className=\"space-y-4\">\n              {[...Array(3)].map((_, i) => (\n                <div key={i} className=\"h-32 bg-slate-200 rounded\"></div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <Header />\n      <Sidebar />\n      <div className=\"mr-64 pt-20 p-6\">\n        <header className=\"bg-white shadow-sm border-b border-slate-200 -m-6 mb-6\">\n          <div className=\"px-6 py-4 flex items-center justify-between\">\n            <h1 className=\"text-2xl font-semibold text-slate-900\">\n              مدیریت ترینرها\n            </h1>\n            {user?.role === \"admin\" && (\n              <>\n                <Button\n                  className=\"bg-hospital-green-600 hover:bg-hospital-green-700\"\n                  onClick={() => setShowForm(true)}\n                >\n                  <Plus className=\"h-4 w-4 ml-2\" />\n                  افزودن ترینر جدید\n                </Button>\n\n                {showForm && (\n                  <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/50\">\n                    <div className=\"bg-white rounded-lg shadow-lg w-full max-w-lg p-6 relative\">\n                      <button\n                        onClick={() => setShowForm(false)}\n                        className=\"absolute top-3 right-3 text-slate-500 hover:text-slate-900\"\n                      >\n                        ✕\n                      </button>\n\n                      <TrainerRegistrationForm\n                        onClose={() => setShowForm(false)}\n                      />\n                    </div>\n                  </div>\n                )}\n              </>\n            )}\n          </div>\n        </header>\n\n        <div className=\"mb-6 bg-white p-4 rounded-lg shadow-sm border border-slate-200 flex flex-wrap items-center gap-4\">\n          <div className=\"relative\">\n            <Search className=\"h-4 w-4 absolute right-3 top-1/2 transform -translate-y-1/2 text-slate-400\" />\n            <Input\n              type=\"text\"\n              placeholder=\"جستجو ترینری...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pr-10 w-64\"\n            />\n          </div>\n          <Select value={departmentFilter} onValueChange={setDepartmentFilter}>\n            <SelectTrigger className=\"w-48\">\n              <SelectValue placeholder=\"همه بخش‌ها\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">همه بخش‌ها</SelectItem>\n              {departments.map((dept) => (\n                <SelectItem key={dept} value={dept}>\n                  {dept}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        <table className=\"min-w-full border border-slate-200 text-sm\">\n          <thead className=\"bg-slate-100 text-slate-700 font-semibold\">\n            <tr>\n              <th className=\"p-2 text-center\">تصویر</th>\n              <th className=\"p-2 text-center\">نام</th>\n              <th className=\"p-2 text-center\">تخلص</th>\n              <th className=\"p-2 text-center\">آیدی</th>\n              <th className=\"p-2 text-center\">دپارتمان</th>\n              <th className=\"p-2 text-center\">اضافه نمودن فرم</th>\n              <th className=\"p-2 text-center\">جزئیات</th>\n              <th className=\"p-2 text-center\">اکشن</th>\n            </tr>\n          </thead>\n          <tbody>\n            {filteredTrainers.map((trainer) => (\n              <tr key={trainer._id} className=\"border-b hover:bg-slate-50\">\n                <td className=\"p-2 text-center\">\n                  <img\n                    src={\n                      trainer.profileImageUrl ??\n                      \"/assets/img/default-avatar.png\"\n                    }\n                    className=\"w-12 h-12 rounded-full mx-auto\"\n                  />\n                </td>\n                <td className=\"p-2 text-center\">{trainer.name}</td>\n                <td className=\"p-2 text-center\">{trainer.lastName}</td>\n                <td className=\"p-2 text-center\">{trainer.id}</td>\n                <td className=\"p-2 text-center\">{trainer.department}</td>\n\n                <td className=\"p-2 text-center relative\">\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    className=\"flex items-center gap-1\"\n                    onClick={() =>\n                      setShowDropdownId(\n                        showDropdownId === trainer._id ? null : trainer._id\n                      )\n                    }\n                  >\n                    <Plus className=\"h-3 w-3\" />\n                    اضافه نمودن فرم\n                  </Button>\n\n                  {showDropdownId === trainer._id && (\n                    <div className=\"absolute right-0 top-full mt-2 bg-white border border-slate-200 rounded-xl shadow-lg p-3 z-50 w-40\">\n                      <div className=\"flex justify-between items-center mb-2\">\n                        <span className=\"text-sm font-semibold text-slate-700\">\n                          انتخاب فرم\n                        </span>\n                        <button\n                          onClick={() => setShowDropdownId(null)}\n                          className=\"text-slate-500 hover:text-red-500\"\n                        >\n                          <X className=\"w-4 h-4\" />\n                        </button>\n                      </div>\n                      <div className=\"flex flex-col gap-2 max-h-80 overflow-y-auto\">\n                        {FORM_TYPES.map((ft) => (\n                          <button\n                            key={ft.type}\n                            onClick={() => handleSelectForm(trainer, ft)}\n                            className=\"flex items-center justify-center w-10 h-10 rounded-full bg-slate-100 hover:bg-hospital-green-600 hover:text-white font-bold transition\"\n                            title={ft.name}\n                          >\n                            {ft.type}\n                          </button>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </td>\n\n                <td className=\"p-2 text-center\">\n                  <Button\n                    size=\"icon\"\n                    variant=\"outline\"\n                    onClick={() => setSelectedTrainer(trainer._id)}\n                  >\n                    <Eye className=\"h-4 w-4\" />\n                  </Button>\n                </td>\n\n                <td className=\"p-2 text-center\">\n                  <Button size=\"icon\" variant=\"outline\">\n                    <MoreHorizontal className=\"h-4 w-4\" />\n                  </Button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n\n        {selectedTrainer && (\n          <TrainerDetails\n            trainerId={selectedTrainer}\n            onClose={() => setSelectedTrainer(null)}\n          />\n        )}\n        {selectedForm && (\n          <FormModal\n            form={selectedForm}\n            onClose={() => setSelectedForm(null)}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":10937},"client/src/pages/setting.tsx":{"content":"// UserManagement.tsx\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { User } from \"@shared/schema\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Plus, Search } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\n\nexport default function UserManagement() {\n  const { toast } = useToast();\n  const [users, setUsers] = useState<User[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isUserDialogOpen, setIsUserDialogOpen] = useState(false);\n\n\n\n\n  // دریافت کاربران از سرور\n  const fetchUsers = async () => {\n    try {\n      setLoading(true);\n      const res = await axios.get<User[]>(\"/api/users\");\n      setUsers(res.data);\n    } catch (err: any) {\n      setError(err.message || \"خطا در دریافت کاربران\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n\n  // حذف کاربر\n  const deleteUser = async (id: string) => {\n    if (!confirm(\"آیا مطمئن هستید که می‌خواهید این کاربر را حذف کنید؟\")) return;\n    try {\n      await axios.delete(`/api/users/${id}`);\n      setUsers((prev) => prev.filter((u) => u._id !== id));\n      toast({ title: \"موفقیت\", description: \"کاربر حذف شد\" });\n    } catch (err: any) {\n      toast({ title: \"خطا\", description: \"حذف کاربر با خطا مواجه شد\", variant: \"destructive\" });\n    }\n  };\n\n// فیلتر جستجو\nconst filteredUsers = users.filter(\n  (u) =>\n    u.firstName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    u.email?.toLowerCase().includes(searchTerm.toLowerCase())\n);\n\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <Header />\n      <Sidebar />\n      <div className=\"mr-64 pt-20 p-6 space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold tracking-tight\">مدیریت کاربران</h1>\n            <p className=\"text-slate-600 dark:text-slate-400\">مدیریت حساب‌های کاربران سیستم</p>\n          </div>\n          <Button\n  onClick={() => setIsUserDialogOpen(true)}\n  data-testid=\"button-add-user\"\n>\n  <Plus className=\"h-4 w-4 mr-2\" />\n  افزودن کاربر جدید\n</Button>\n\n        </div>\n\n        {/* Main Card */}\n        <Card>\n          <CardHeader>\n            <CardTitle>لیست کاربران</CardTitle>\n            <CardDescription>مجموع {filteredUsers.length} کاربر</CardDescription>\n          </CardHeader>\n          <CardContent>\n            {/* Search */}\n            <div className=\"mb-6\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-slate-400\" />\n                <Input\n                  placeholder=\"جستجو بر اساس نام یا ایمیل...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n\n            {/* Content */}\n            {loading ? (\n              <div className=\"flex justify-center py-8\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-hospital-green-500\"></div>\n              </div>\n            ) : error ? (\n              <p className=\"text-red-600\">{error}</p>\n            ) : filteredUsers.length === 0 ? (\n              <div className=\"text-center py-8 text-slate-500\">\n                {searchTerm ? \"هیچ کاربری یافت نشد\" : \"هنوز کاربری اضافه نشده است\"}\n              </div>\n            ) : (\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full border-collapse rounded-lg overflow-hidden shadow-sm\">\n                  <thead className=\"bg-slate-100 text-slate-700\">\n                    <tr>\n                      <th className=\"border p-2 text-center\">نام</th>\n                      <th className=\"border p-2 text-center\">ایمیل</th>\n                      <th className=\"border p-2 text-center\">نقش</th>\n                      <th className=\"border p-2 text-center\">عملیات</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {filteredUsers.map((user) => (\n                      <tr key={user._id} className=\"text-center hover:bg-slate-50\">\n                      <td className=\"border p-2\">{user.firstName ?? \"-\"}</td>\n                      <td className=\"border p-2\">{user.email ?? \"-\"}</td>\n                      <td className=\"border p-2\">{user.role ?? \"-\"}</td>\n\n                        <td className=\"border p-2 flex items-center justify-center gap-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => alert(\"ویرایش کاربر هنوز آماده نیست\")}\n                          >\n                            ویرایش\n                          </Button>\n                          <Button\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            onClick={() => deleteUser(user._id)}\n                          >\n                            حذف\n                          </Button>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5952},"client/src/pages/teachers.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Plus, Search } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport TeacherTable from \"@/components/teachers/teacher-table\";\nimport TeacherFormDialog from \"@/components/forms/teacher-form-dialog\";\nimport { Teacher, InsertTeacher, insertTeacherSchema } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\n\nexport default function Teachers() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [editingTeacher, setEditingTeacher] = useState<Teacher | null>(null);\n\n  const { data: teachers = [], isLoading, error } = useQuery<Teacher[]>({\n    queryKey: ['/api/teachers'],\n  });\n\n  const createTeacherMutation = useMutation({\n    mutationFn: async (teacherData: InsertTeacher) => {\n      const response = await apiRequest('/api/teachers', {\n        method: 'POST',\n        body: JSON.stringify(teacherData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/teachers'] });\n      setIsAddDialogOpen(false);\n      toast({\n        title: \"موفقیت\",\n        description: \"استاد با موفقیت اضافه شد\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"خطا\",\n        description: error.message || \"خطا در افزودن استاد\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateTeacherMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertTeacher> }) => {\n      const response = await apiRequest(`/api/teachers/${id}`, {\n        method: 'PUT',\n        body: JSON.stringify(data),\n        headers: { 'Content-Type': 'application/json' }\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/teachers'] });\n      setEditingTeacher(null);\n      toast({\n        title: \"موفقیت\",\n        description: \"استاد با موفقیت بروزرسانی شد\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"خطا\",\n        description: error.message || \"خطا در بروزرسانی استاد\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteTeacherMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(`/api/teachers/${id}`, { method: 'DELETE' });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/teachers'] });\n      toast({\n        title: \"موفقیت\",\n        description: \"استاد با موفقیت حذف شد\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"خطا\",\n        description: error.message || \"خطا در حذف استاد\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredTeachers = teachers.filter((teacher: Teacher) =>\n    teacher.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    teacher.department.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    teacher.subject.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const handleViewDetails = (teacher: Teacher) => {\n    // Open teacher details modal\n    console.log(\"View teacher details:\", teacher);\n  };\n\n  const handleEdit = (teacher: Teacher) => {\n    setEditingTeacher(teacher);\n    setIsAddDialogOpen(true);\n  };\n\n  const handleDelete = (teacherId: string) => {\n    if (window.confirm(\"آیا از حذف این استاد اطمینان دارید؟\")) {\n      deleteTeacherMutation.mutate(teacherId);\n    }\n  };\n\n  const handleSubmit = (data: InsertTeacher) => {\n    if (editingTeacher) {\n      updateTeacherMutation.mutate({ id: editingTeacher._id, data });\n    } else {\n      createTeacherMutation.mutate(data);\n    }\n  };\n\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-slate-50\">\n        <Header />\n        <Sidebar />\n        <div className=\"mr-64 pt-20 p-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <p className=\"text-red-600\">خطا در بارگذاری اطلاعات استادان</p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <Header />\n      <Sidebar />\n      <div className=\"mr-64 pt-20 p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\" data-testid=\"heading-teachers\">\n            مدیریت استادان\n          </h1>\n          {/* <p className=\"text-slate-600 dark:text-slate-400\">\n            مدیریت اطلاعات استادان و هیئت علمی\n          </p> */}\n        </div>\n        <Button \n          onClick={() => {\n            setEditingTeacher(null);\n            setIsAddDialogOpen(true);\n          }}\n          data-testid=\"button-add-teacher\"\n        >\n          <Plus className=\"h-4 w-4 mr-2\" />\n          افزودن استاد جدید\n        </Button>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>لیست استادان</CardTitle>\n          <CardDescription>\n            مجموع {filteredTeachers.length} استاد\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"mb-6\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-slate-400\" />\n              <Input\n                placeholder=\"جستجو بر اساس نام، بخش یا موضوع تدریس...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search-teachers\"\n              />\n            </div>\n          </div>\n\n          {isLoading ? (\n            <div className=\"flex justify-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-hospital-green-500\"></div>\n            </div>\n          ) : filteredTeachers.length > 0 ? (\n            <TeacherTable\n              teachers={filteredTeachers}\n              onViewDetails={handleViewDetails}\n              onEdit={handleEdit}\n              onDelete={handleDelete}\n            />\n          ) : (\n            <div className=\"text-center py-8 text-slate-500\">\n              {searchTerm ? \"هیچ استادی با این مشخصات یافت نشد\" : \"هنوز استادی اضافه نشده است\"}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <TeacherFormDialog\n        isOpen={isAddDialogOpen}\n        onClose={() => {\n          setIsAddDialogOpen(false);\n          setEditingTeacher(null);\n        }}\n        onSubmit={handleSubmit}\n        title={editingTeacher ? \"ویرایش معلومات استاد\" : \"افزودن استاد جدید\"}\n        defaultValues={editingTeacher || undefined}\n        isSubmitting={createTeacherMutation.isPending || updateTeacherMutation.isPending}\n      />\n      </div>\n    </div>\n  );\n}","size_bytes":7594},"client/src/components/forms/Form-E.tsx":{"content":"import React, { useState } from \"react\";\r\n\r\nexport default function EvaluationFormE() {\r\n  const [year, setYear] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [fatherName, setFatherName] = useState(\"\");\r\n  const [trainingYear, setTrainingYear] = useState(\"\");\r\n  const [incidentTitle, setIncidentTitle] = useState(\"\");\r\n  const [date, setDate] = useState(\"\");\r\n  const [score, setScore] = useState(\"\");\r\n  const [teacherName, setTeacherName] = useState(\"\");\r\n  const [teacherSigned, setTeacherSigned] = useState(false);\r\n  const [notes, setNotes] = useState(false);\r\n  const [averageScore, setAverageScore] = useState(\"\");\r\n  const [departmentHead, setDepartmentHead] = useState(\"\");\r\n  const [programHead, setProgramHead] = useState(\"\");\r\n  const [hospitalHead, setHospitalHead] = useState(\"\");\r\n\r\n  const inputClass = \"border rounded px-2 py-2 w-full text-center\";\r\n\r\n  const handleSubmit = async () => {\r\n    try {\r\n      const res = await fetch(\"http://localhost:5000/api/evaluationFormE\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          year,\r\n          name,\r\n          fatherName,\r\n          trainingYear,\r\n          incidentTitle,\r\n          date,\r\n          score,\r\n          teacherName,\r\n          teacherSigned,\r\n          notes,\r\n          averageScore,\r\n          departmentHead,\r\n          programHead,\r\n          hospitalHead,\r\n        }),\r\n      });\r\n\r\n      if (!res.ok) {\r\n        throw new Error(\"خطا در ذخیره فرم\");\r\n      }\r\n\r\n      const data = await res.json();\r\n      console.log(\"فرم ذخیره شد:\", data);\r\n\r\n      // اینجا می‌توانید فرم را ریست کنید یا پیام موفقیت بدهید\r\n      alert(\"فرم با موفقیت ذخیره شد!\");\r\n      setYear(\"\");\r\n    setName(\"\");\r\n    setFatherName(\"\");\r\n    setTrainingYear(\"\");\r\n    setIncidentTitle(\"\");\r\n    setDate(\"\");\r\n    setScore(\"\");\r\n    setTeacherName(\"\");\r\n    setTeacherSigned(false);\r\n    setNotes(false);\r\n    setAverageScore(\"\");\r\n    setDepartmentHead(\"\");\r\n    setProgramHead(\"\");\r\n    setHospitalHead(\"\");\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(\"خطا در ذخیره فرم\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-5xl mx-auto bg-white shadow-lg rounded-2xl p-6 mt-6\">\r\n      <h2 className=\"text-xl font-bold text-center mb-4\">\r\n        فرم ارزشیابی سالانه دستیار\r\n      </h2>\r\n      {/* فیلد سال */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">سال</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"سال\"\r\n            value={year}\r\n            onChange={(e) => setYear(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* اطلاعات فردی */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">اسم</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"اسم\"\r\n            value={name}\r\n            onChange={(e) => setName(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">ولد</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"ولد\"\r\n            value={fatherName}\r\n            onChange={(e) => setFatherName(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">سال تریننگ</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"سال تریننگ\"\r\n            value={trainingYear}\r\n            onChange={(e) => setTrainingYear(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* جزئیات ارزشیابی */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">عنوان واقعه</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"عنوان واقعه\"\r\n            value={incidentTitle}\r\n            onChange={(e) => setIncidentTitle(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">تاریخ</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"تاریخ\"\r\n            value={date}\r\n            onChange={(e) => setDate(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">نمره داده شده</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"نمره داده شده\"\r\n            value={score}\r\n            onChange={(e) => setScore(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* استاد */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">نام استاد</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"نام استاد\"\r\n            value={teacherName}\r\n            onChange={(e) => setTeacherName(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"flex items-center mt-6\">\r\n          <label className=\"flex items-center space-x-2\">\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={teacherSigned}\r\n              onChange={(e) => setTeacherSigned(e.target.checked)}\r\n            />\r\n            امضای استاد\r\n          </label>\r\n        </div>\r\n\r\n        <div className=\"flex items-center mt-6\">\r\n          <label className=\"flex items-center space-x-2\">\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={notes}\r\n              onChange={(e) => setNotes(e.target.checked)}\r\n            />\r\n            ملاحظات\r\n          </label>\r\n        </div>\r\n      </div>\r\n\r\n      {/* اوسط نمرات */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">اوسط نمرات</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"اوسط نمرات\"\r\n            value={averageScore}\r\n            onChange={(e) => setAverageScore(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* امضاها */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">شف دیپارتمنت</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"شف دیپارتمنت\"\r\n            value={departmentHead}\r\n            onChange={(e) => setDepartmentHead(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">آمر پروگرام تریننگ</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"آمر پروگرام تریننگ\"\r\n            value={programHead}\r\n            onChange={(e) => setProgramHead(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">ریس شفاخانه</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"ریس شفاخانه\"\r\n            value={hospitalHead}\r\n            onChange={(e) => setHospitalHead(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"text-center mt-6\">\r\n        <button\r\n          onClick={handleSubmit}\r\n          className=\"px-6 py-2 bg-green-600 text-white rounded-xl hover:bg-green-700 transition\"\r\n        >\r\n          ذخیره فرم\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","size_bytes":8251},"client/src/components/forms/TrainerRegistrationForm.tsx":{"content":"import React from \"react\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport { X } from \"lucide-react\"; // آیکن ضربدر برای بستن\r\n\r\n// A clean, readable Trainer Registration form in TSX using TailwindCSS + react-hook-form\r\n// Usage: import TrainerRegistrationForm from './TrainerRegistrationForm';\r\n// Dependencies: react, react-dom, react-hook-form, tailwindcss (optional)\r\n\r\ntype FormValues = {\r\n  id: string;\r\n  name: string;\r\n  lastName: string;\r\n  parentType: \"ولد\" | \"بنت\" | string; // allow free text for flexibility\r\n  parentName: string;\r\n  gender: \"مرد\" | \"زن\" | string;\r\n  province: string;\r\n  department: string;\r\n  specialty: string;\r\n  hospital: string;\r\n  joiningDate: string; // YYYY-MM-DD\r\n  trainingYear: string;\r\n  supervisorName: string;\r\n  birthDate: string; // YYYY-MM-DD\r\n  idNumber: string;\r\n  phoneNumber: string;\r\n  whatsappNumber: string;\r\n  email: string;\r\n  postNumberAndCode: string;\r\n  appointmentType: \"رقابت آزاد\" | \"داوطلب\" | \"حکمی\" | \"بست خالی\" | string;\r\n  status: \"برحال\" | \"خدماتی\" | string;\r\n};\r\n\r\ntype TrainerRegistrationFormProps = {\r\n  onClose: () => void;\r\n};\r\n\r\nexport default function TrainerRegistrationForm({\r\n  onClose,\r\n}: TrainerRegistrationFormProps) {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    control,\r\n    formState: { errors },\r\n  } = useForm<FormValues>({\r\n    defaultValues: {\r\n      id: \"\",\r\n      name: \"\",\r\n      lastName: \"\",\r\n      parentType: \"\",\r\n      parentName: \"\",\r\n      gender: \"\",\r\n      province: \"\",\r\n      department: \"\",\r\n      specialty: \"\",\r\n      hospital: \"\",\r\n      joiningDate: \"\",\r\n      trainingYear: \"\",\r\n      supervisorName: \"\",\r\n      birthDate: \"\",\r\n      idNumber: \"\",\r\n      phoneNumber: \"\",\r\n      whatsappNumber: \"\",\r\n      email: \"\",\r\n      postNumberAndCode: \"\",\r\n      appointmentType: \"\",\r\n      status: \"\",\r\n    },\r\n  });\r\n\r\n  const onSubmit = async (data: FormValues) => {\r\n    try {\r\n      const response = await fetch(\"/api/trainers\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(data),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        alert(\"خطا در ثبت فرم: \" + (errorData.message || \"اطلاعات نادرست\"));\r\n        return;\r\n      }\r\n\r\n      const savedTrainer = await response.json();\r\n      alert(\"ترینر با موفقیت ثبت شد!\");\r\n      reset();\r\n      onClose(); // فرم بسته شود\r\n    } catch (error) {\r\n      console.error(error);\r\n      alert(\"خطا در ثبت فرم، دوباره تلاش کنید.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"h-screen overflow-y-auto bg-gray-50\">\r\n      <div className=\"max-w-4xl mx-auto p-6 bg-white rounded-xl shadow-md relative\">\r\n        {/* دکمه بستن */}\r\n        <button\r\n          type=\"button\"\r\n          onClick={onClose}\r\n          className=\"absolute top-4 right-4 p-2 rounded-full hover:bg-gray-200\"\r\n        >\r\n          <X className=\"w-5 h-5 text-gray-600\" />\r\n        </button>\r\n\r\n        <h1 className=\"text-2xl font-semibold mb-4 text-center\">\r\n          فورم ثبت نام ترینری\r\n        </h1>\r\n\r\n        <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            <label className=\"flex flex-col\">\r\n              <span className=\"text-sm\">ایدی</span>\r\n              <input\r\n                {...register(\"id\", { required: \"ایدی لازم است\" })}\r\n                className=\"mt-1 p-2 border rounded-md focus:outline-none focus:ring-2\"\r\n                placeholder=\"ایدی را وارد کنید.\"\r\n              />\r\n              {errors.name && (\r\n                <span className=\"text-red-600 text-sm\">\r\n                  {errors.name.message}\r\n                </span>\r\n              )}\r\n            </label>\r\n            <label className=\"flex flex-col\">\r\n              <span className=\"text-sm\">اسم</span>\r\n              <input\r\n                {...register(\"name\", { required: \"اسم لازم است\" })}\r\n                className=\"mt-1 p-2 border rounded-md focus:outline-none focus:ring-2\"\r\n                placeholder=\"اسم را وارد کنید.\"\r\n              />\r\n              {errors.name && (\r\n                <span className=\"text-red-600 text-sm\">\r\n                  {errors.name.message}\r\n                </span>\r\n              )}\r\n            </label>\r\n\r\n            <label className=\"flex flex-col\">\r\n              <span className=\"text-sm\">تخلص</span>\r\n              <input\r\n                {...register(\"lastName\", { required: \"اسم لازم است\" })}\r\n                className=\"mt-1 p-2 border rounded-md focus:outline-none focus:ring-2\"\r\n                placeholder=\"تخلص را وارد کنید.\"\r\n              />\r\n              {errors.lastName && (\r\n                <span className=\"text-red-600 text-sm\">\r\n                  {errors.lastName.message}\r\n                </span>\r\n              )}\r\n            </label>\r\n\r\n            <label className=\"flex flex-col\">\r\n              <span className=\"text-sm\">ولد/بنت</span>\r\n              <input\r\n                {...register(\"parentType\")}\r\n                className=\"mt-1 p-2 border rounded-md\"\r\n                placeholder=\"نام پدر را وارد کنید.\"\r\n              />\r\n            </label>\r\n\r\n            <label className=\"flex flex-col\">\r\n              <span className=\"text-sm\">ولدیت</span>\r\n              <input\r\n                {...register(\"parentName\")}\r\n                className=\"mt-1 p-2 border rounded-md\"\r\n                placeholder=\"نام پدر بزرگ را وارد کنید.\"\r\n              />\r\n            </label>\r\n\r\n            <label className=\"flex flex-col\">\r\n              <span className=\"text-sm\">جنسیت</span>\r\n              <select\r\n                {...register(\"gender\")}\r\n                className=\"mt-1 p-2 border rounded-md\"\r\n              >\r\n                <option value=\"\">جنسیت را انتخاب کنید.</option>\r\n                <option value=\"مرد\">مرد</option>\r\n                <option value=\"زن\">زن</option>\r\n              </select>\r\n            </label>\r\n\r\n            <label className=\"flex flex-col\">\r\n              <span className=\"text-sm\">ولایت</span>\r\n              <select\r\n                {...register(\"province\", { required: \"انتخاب ولایت لازم است\" })}\r\n                className=\"mt-1 p-2 border rounded-md\"\r\n              >\r\n                <option value=\"\">ولایت را انتخاب کنید.</option>\r\n                <option value=\"کابل\">کابل</option>\r\n                <option value=\"پروان\">پروان</option>\r\n                <option value=\"کاپیسا\">کاپیسا</option>\r\n                <option value=\"پنجشیر\">پنجشیر</option>\r\n                <option value=\"میدان وردک\">میدان وردک</option>\r\n                <option value=\"لوگر\">لوگر</option>\r\n                <option value=\"غزنی\">غزنی</option>\r\n                <option value=\"پکتیا\">پکتیا</option>\r\n                <option value=\"پکتیکا\">پکتیکا</option>\r\n                <option value=\"خوست\">خوست</option>\r\n                <option value=\"ننگرهار\">ننگرهار</option>\r\n                <option value=\"لغمان\">لغمان</option>\r\n                <option value=\"کنر\">کنر</option>\r\n                <option value=\"نورستان\">نورستان</option>\r\n                <option value=\"بغلان\">بغلان</option>\r\n                <option value=\"کندز\">کندز</option>\r\n                <option value=\"تخار\">تخار</option>\r\n                <option value=\"بدخشان\">بدخشان</option>\r\n                <option value=\"سمنگان\">سمنگان</option>\r\n                <option value=\"بلخ\">بلخ</option>\r\n                <option value=\"جوزجان\">جوزجان</option>\r\n                <option value=\"فاریاب\">فاریاب</option>\r\n                <option value=\"سرپل\">سرپل</option>\r\n                <option value=\"بامیان\">بامیان</option>\r\n                <option value=\"دایکندی\">دایکندی</option>\r\n                <option value=\"هرات\">هرات</option>\r\n                <option value=\"بادغیس\">بادغیس</option>\r\n                <option value=\"فراه\">فراه</option>\r\n                <option value=\"نیمروز\">نیمروز</option>\r\n                <option value=\"هلمند\">هلمند</option>\r\n                <option value=\"قندهار\">قندهار</option>\r\n                <option value=\"زابل\">زابل</option>\r\n                <option value=\"ارزگان\">ارزگان</option>\r\n                <option value=\"غور\">غور</option>\r\n              </select>\r\n              {errors.province && (\r\n                <span className=\"text-red-600 text-sm\">\r\n                  {errors.province.message}\r\n                </span>\r\n              )}\r\n            </label>\r\n\r\n            <label className=\"flex flex-col\">\r\n              <span className=\"text-sm\">دیپارتمنت</span>\r\n              <select\r\n                {...register(\"department\", { required: \"دیپارتمنت لازم است\" })}\r\n                className=\"mt-1 p-2 border rounded-md\"\r\n              >\r\n                <option value=\"\"> دیپارتمنت را انتخاب کنید.</option>\r\n                <option value=\"شبکیه\">شبکیه</option>\r\n                <option value=\"اطفال\">اطفال</option>\r\n                <option value=\"چشم پولیس\">چشم پولیس</option>\r\n                <option value=\"جراحی پلاستیک\">جراحی پلاستیک</option>\r\n                <option value=\"قرنیه\">قرنیه</option>\r\n                <option value=\"گلوکوم\">گلوکوم</option>\r\n                <option value=\"دیدکم\">دیدکم</option>\r\n                <option value=\"پبپکم\">پبپکم</option>\r\n                <option value=\"عمومی\">عمومی</option>\r\n              </select>\r\n              {errors.department && (\r\n                <span className=\"text-red-600 text-sm\">\r\n                  {errors.department.message}\r\n                </span>\r\n              )}\r\n            </label>\r\n\r\n            <label className=\"flex flex-col\">\r\n              <span className=\"text-sm\">رشته تخصصی</span>\r\n              <select\r\n                {...register(\"specialty\", { required: \"رشته تخصصی لازم است\" })}\r\n                className=\"mt-1 p-2 border rounded-md\"\r\n              >\r\n                <option value=\"\">رشته تخصص را انتخاب کنید.</option>\r\n                <option value=\"چشم\">چشم</option>\r\n                {/* در آینده می‌توانید گزینه‌های دیگر اضافه کنید */}\r\n              </select>\r\n              {errors.specialty && (\r\n                <span className=\"text-red-600 text-sm\">\r\n                  {errors.specialty.message}\r\n                </span>\r\n              )}\r\n            </label>\r\n\r\n            <label className=\"flex flex-col\">\r\n              <span className=\"text-sm\">شفاخانه</span>\r\n              <input\r\n                {...register(\"hospital\")}\r\n                className=\"mt-1 p-2 border rounded-md\"\r\n                placeholder=\"نام شفاخانه را وارد کنید.\"\r\n              />\r\n            </label>\r\n\r\n            <label className=\"flex flex-col\">\r\n              <span className=\"text-sm\">تاریخ شمولیت به پروگرام تریننگ</span>\r\n              <input\r\n                type=\"date\"\r\n                {...register(\"joiningDate\")}\r\n                className=\"mt-1 p-2 border rounded-md\"\r\n                placeholder=\"تاریخ را انتخاب کنید.\"\r\n              />\r\n            </label>\r\n\r\n            <label className=\"flex flex-col\">\r\n              <span className=\"text-sm\">سال تریننگ فعلی (صنف)</span>\r\n              <input\r\n                {...register(\"trainingYear\")}\r\n                className=\"mt-1 p-2 border rounded-md\"\r\n                placeholder=\"سال تریننگ را را وارد کنید.\"\r\n              />\r\n            </label>\r\n\r\n            <label className=\"flex flex-col\">\r\n              <span className=\"text-sm\">اسم سوپروایزر (ترینر)</span>\r\n              <input\r\n                {...register(\"supervisorName\")}\r\n                className=\"mt-1 p-2 border rounded-md\"\r\n                placeholder=\"اسم سوپروایزر را وارد کنید.\"\r\n              />\r\n            </label>\r\n\r\n            <label className=\"flex flex-col\">\r\n              <span className=\"text-sm\">تاریخ تولد</span>\r\n              <input\r\n                type=\"date\"\r\n                {...register(\"birthDate\")}\r\n                className=\"mt-1 p-2 border rounded-md\"\r\n              />\r\n            </label>\r\n\r\n            <label className=\"flex flex-col\">\r\n              <span className=\"text-sm\">نمبر تذکره</span>\r\n              <input\r\n                {...register(\"idNumber\")}\r\n                className=\"mt-1 p-2 border rounded-md\"\r\n                placeholder=\"نمبر تذکره را وارد کنید.\"\r\n              />\r\n            </label>\r\n\r\n            <label className=\"flex flex-col\">\r\n              <span className=\"text-sm\">شماره تماس</span>\r\n              <input\r\n                {...register(\"phoneNumber\")}\r\n                className=\"mt-1 p-2 border rounded-md\"\r\n                placeholder=\"شماره تماس را وارد کنید.\"\r\n              />\r\n            </label>\r\n\r\n            <label className=\"flex flex-col\">\r\n              <span className=\"text-sm\">شماره واتسپ</span>\r\n              <input\r\n                {...register(\"whatsappNumber\")}\r\n                className=\"mt-1 p-2 border rounded-md\"\r\n                placeholder=\"شماره واتسپ را وارد کنید.\"\r\n              />\r\n            </label>\r\n\r\n            <label className=\"flex flex-col \">\r\n              <span className=\"text-sm\">ایمل آدرس</span>\r\n              <input\r\n                type=\"email\"\r\n                {...register(\"email\")}\r\n                className=\"mt-1 p-2 border rounded-md\"\r\n                placeholder=\"ایمل آدرس را وارد کنید.\"\r\n              />\r\n            </label>\r\n\r\n            <label className=\"flex flex-col\">\r\n              <span className=\"text-sm\">شماره و کود بست</span>\r\n              <input\r\n                {...register(\"postNumberAndCode\")}\r\n                className=\"mt-1 p-2 border rounded-md\"\r\n                placeholder=\"شماره و کود بست را وارد کنید.\"\r\n              />\r\n            </label>\r\n\r\n            <label className=\"flex flex-col\">\r\n              <span className=\"text-sm\">نوع تقرر</span>\r\n              <select\r\n                {...register(\"appointmentType\")}\r\n                className=\"mt-1 p-2 border rounded-md\"\r\n              >\r\n                <option value=\"\">نوع تقرر را انتخاب کنید.</option>\r\n                <option value=\"رقابت آزاد\">رقابت آزاد</option>\r\n                <option value=\"داوطلب\">داوطلب</option>\r\n                <option value=\"حکمی\">حکمی</option>\r\n                <option value=\"بست خالی\">بست خالی</option>\r\n              </select>\r\n            </label>\r\n\r\n            <label className=\"flex flex-col\">\r\n              <span className=\"text-sm\">وضعیت فعلی</span>\r\n              <select\r\n                {...register(\"status\")}\r\n                className=\"mt-1 p-2 border rounded-md\"\r\n              >\r\n                <option value=\"\">وضعیت فعلی را انتخاب کنید</option>\r\n                <option value=\"برحال\">برحال</option>\r\n                <option value=\"خدماتی\">خدماتی</option>\r\n              </select>\r\n            </label>\r\n          </div>\r\n\r\n          <div className=\"flex items-center gap-3 justify-end\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => reset()}\r\n              className=\"px-4 py-2 bg-gray-200 rounded-md hover:bg-gray-300\"\r\n            >\r\n              لغو\r\n            </button>\r\n\r\n            <button\r\n              type=\"submit\"\r\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700\"\r\n            >\r\n              ثبت\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","size_bytes":16623},"client/src/components/forms/UserFormDialog.tsx":{"content":"import * as React from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport axios from \"axios\";\n\ninterface UserFormDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSuccess: () => void;\n}\n\nexport default function UserFormDialog({ isOpen, onClose, onSuccess }: UserFormDialogProps) {\n  const { toast } = useToast();\n  const [firstName, setFirstName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [role, setRole] = useState(\"user\"); // نقش پیش‌فرض\n  const [loading, setLoading] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    try {\n      await axios.post(\"/api/users\", { firstName, email, role });\n      toast({ title: \"موفقیت\", description: \"کاربر جدید ثبت شد\" });\n      setFirstName(\"\");\n      setEmail(\"\");\n      setRole(\"user\");\n      onSuccess();\n      onClose();\n    } catch (err: any) {\n      toast({ title: \"خطا\", description: err.message || \"ثبت کاربر با خطا مواجه شد\", variant: \"destructive\" });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={(open) => !open && onClose()}>\n      <DialogContent className=\"sm:max-w-lg\">\n        <DialogHeader>\n          <DialogTitle>ثبت کاربر جدید</DialogTitle>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <label className=\"block mb-1\">نام</label>\n            <Input value={firstName} onChange={(e) => setFirstName(e.target.value)} required />\n          </div>\n          <div>\n            <label className=\"block mb-1\">ایمیل</label>\n            <Input type=\"email\" value={email} onChange={(e) => setEmail(e.target.value)} required />\n          </div>\n          <div>\n            <label className=\"block mb-1\">نقش</label>\n            <select\n              value={role}\n              onChange={(e) => setRole(e.target.value)}\n              className=\"w-full border rounded-md p-2\"\n            >\n              <option value=\"user\">کاربر عادی</option>\n              <option value=\"admin\">مدیر</option>\n            </select>\n          </div>\n          <DialogFooter>\n            <Button type=\"submit\" disabled={loading}>\n              ثبت کاربر\n            </Button>\n            <Button variant=\"outline\" onClick={onClose} disabled={loading}>\n              لغو\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":2798},"client/src/components/forms/add-form-dialog.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\ninterface AddFormDialogProps {\n  residentId: string;\n  onClose: () => void;\n  availableFormTypes: string[];\n}\n\nconst FORM_TYPES = {\n  J: 'Initial Assessment & Orientation',\n  F: 'Mid-Training Evaluation',\n  D: 'Clinical Skills Assessment',\n  I: 'Research & Academic Progress',\n  G: 'Communication Skills Review',\n  E: 'Ethics & Professionalism',\n  C: 'Case Presentation Evaluation',\n  H: 'Hands-on Procedure Assessment',\n  K: 'Final Competency Evaluation',\n};\n\nexport default function AddFormDialog({ residentId, onClose, availableFormTypes }: AddFormDialogProps) {\n  const [selectedFormType, setSelectedFormType] = useState<string>('');\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const createFormMutation = useMutation({\n    mutationFn: async (formData: any) => {\n      await apiRequest('POST', '/api/forms', formData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/residents', residentId, 'forms'] });\n      toast({\n        title: \"Success\",\n        description: \"Form created successfully.\",\n      });\n      onClose();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create form. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreate = () => {\n    if (!selectedFormType) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a form type.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createFormMutation.mutate({\n      residentId,\n      formType: selectedFormType,\n      formData: {},\n      status: 'draft',\n    });\n  };\n\n  return (\n    <Dialog open={true} onOpenChange={onClose}>\n      <DialogContent data-testid=\"dialog-add-form\">\n        <DialogHeader>\n          <DialogTitle data-testid=\"text-add-form-title\">Add New Form</DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4 mt-4\">\n          <div>\n            <Label htmlFor=\"formType\">Form Type</Label>\n            <Select value={selectedFormType} onValueChange={setSelectedFormType}>\n              <SelectTrigger data-testid=\"select-form-type\">\n                <SelectValue placeholder=\"Select form type\" />\n              </SelectTrigger>\n              <SelectContent>\n                {availableFormTypes.map((formType) => (\n                  <SelectItem key={formType} value={formType}>\n                    Form {formType} - {FORM_TYPES[formType as keyof typeof FORM_TYPES]}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        <div className=\"flex items-center justify-end pt-4 border-t border-slate-200 mt-6 space-x-3\">\n          <Button variant=\"outline\" onClick={onClose} data-testid=\"button-cancel-add-form\">\n            Cancel\n          </Button>\n          <Button\n            onClick={handleCreate}\n            disabled={createFormMutation.isPending}\n            className=\"bg-hospital-green-600 hover:bg-hospital-green-700\"\n            data-testid=\"button-create-form\"\n          >\n            {createFormMutation.isPending ? 'Creating...' : 'Create Form'}\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":4089},"client/src/components/forms/form-D.tsx":{"content":"import React, { useState } from \"react\";\r\n\r\nexport default function EvaluationFormD() {\r\n  // اطلاعات عمومی\r\n  const [year, setYear] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [fatherName, setFatherName] = useState(\"\");\r\n  const [department, setDepartment] = useState(\"\");\r\n  const [trainingYear, setTrainingYear] = useState(\"\");\r\n\r\n  // جزئیات کنفرانس\r\n  const [conferenceTitle, setConferenceTitle] = useState(\"\");\r\n  const [score, setScore] = useState(\"\");\r\n  const [date, setDate] = useState(\"\");\r\n\r\n  // استاد\r\n  const [teacherName, setTeacherName] = useState(\"\");\r\n  const [teacherSigned, setTeacherSigned] = useState(false);\r\n\r\n  // ملاحظات\r\n  const [notes, setNotes] = useState(false);\r\n\r\n  // امضاها\r\n  const [departmentHead, setDepartmentHead] = useState(\"\");\r\n  const [programHead, setProgramHead] = useState(\"\");\r\n  const [hospitalHead, setHospitalHead] = useState(\"\");\r\n\r\n  const inputClass = \"border rounded px-2 py-2 w-full text-center\";\r\n  //// ارسال به سمت بک اند//////\r\n  const handleSubmit = async () => {\r\n    const payload = {\r\n      year,\r\n      name,\r\n      fatherName,\r\n      department,\r\n      trainingYear,\r\n      conferenceTitle,\r\n      score,\r\n      date,\r\n      teacherName,\r\n      teacherSigned,\r\n      notes,\r\n      departmentHead,\r\n      programHead,\r\n      hospitalHead,\r\n    };\r\n\r\n    try {\r\n      const res = await fetch(\"http://localhost:5000/api/conference\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(payload),\r\n      });\r\n\r\n      if (res.ok) {\r\n        alert(\"فرم با موفقیت ذخیره شد ✅\");\r\n        // ریست فرم\r\n        setYear(\"\");\r\n        setName(\"\");\r\n        setFatherName(\"\");\r\n        setDepartment(\"\");\r\n        setTrainingYear(\"\");\r\n        setConferenceTitle(\"\");\r\n        setScore(\"\");\r\n        setDate(\"\");\r\n        setTeacherName(\"\");\r\n        setTeacherSigned(false);\r\n        setNotes(false);\r\n        setDepartmentHead(\"\");\r\n        setProgramHead(\"\");\r\n        setHospitalHead(\"\");\r\n      } else {\r\n        alert(\"❌ خطا در ذخیره فرم\");\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(\"❌ مشکل در ارتباط با سرور\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-5xl mx-auto bg-white shadow-lg rounded-2xl p-6 mt-6\">\r\n      <h2 className=\"text-xl font-bold text-center mb-4\">\r\n        فرم ارزشیابی کنفرانس\r\n      </h2>\r\n\r\n      {/* اطلاعات فردی */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">سال</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"سال\"\r\n            value={year}\r\n            onChange={(e) => setYear(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">اسم</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"اسم\"\r\n            value={name}\r\n            onChange={(e) => setName(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">ولد</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"ولد\"\r\n            value={fatherName}\r\n            onChange={(e) => setFatherName(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">دیپارتمنت</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"دیپارتمنت\"\r\n            value={department}\r\n            onChange={(e) => setDepartment(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">سال تریننگ</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"سال تریننگ\"\r\n            value={trainingYear}\r\n            onChange={(e) => setTrainingYear(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* اطلاعات کنفرانس */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">موضوع کنفرانس</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"موضوع کنفرانس\"\r\n            value={conferenceTitle}\r\n            onChange={(e) => setConferenceTitle(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">نمره داده شده</label>\r\n          <input\r\n            type=\"number\"\r\n            placeholder=\"نمره داده شده\"\r\n            value={score}\r\n            onChange={(e) => setScore(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">تاریخ ارائه</label>\r\n          <input\r\n            type=\"date\"\r\n            value={date}\r\n            onChange={(e) => setDate(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* استاد */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">نام استاد</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"نام استاد\"\r\n            value={teacherName}\r\n            onChange={(e) => setTeacherName(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"flex items-center mt-6\">\r\n          <label className=\"flex items-center space-x-2\">\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={teacherSigned}\r\n              onChange={(e) => setTeacherSigned(e.target.checked)}\r\n            />\r\n            امضای استاد\r\n          </label>\r\n        </div>\r\n\r\n        <div className=\"flex items-center mt-6\">\r\n          <label className=\"flex items-center space-x-2\">\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={notes}\r\n              onChange={(e) => setNotes(e.target.checked)}\r\n            />\r\n            ملاحظات\r\n          </label>\r\n        </div>\r\n      </div>\r\n\r\n      {/* امضاها */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">شف دیپارتمنت</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"شف دیپارتمنت\"\r\n            value={departmentHead}\r\n            onChange={(e) => setDepartmentHead(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">آمر پروگرام تریننگ</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"آمر پروگرام تریننگ\"\r\n            value={programHead}\r\n            onChange={(e) => setProgramHead(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">ریس شفاخانه</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"ریس شفاخانه\"\r\n            value={hospitalHead}\r\n            onChange={(e) => setHospitalHead(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"text-center mt-6\">\r\n        <button\r\n          onClick={handleSubmit}\r\n          className=\"px-6 py-2 bg-green-600 text-white rounded-xl hover:bg-green-700 transition\"\r\n        >\r\n          ذخیره فرم\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","size_bytes":8127},"client/src/components/forms/form-G.tsx":{"content":"import React, { useState } from \"react\";\r\n\r\nexport default function EvaluationFormG() {\r\n  const [year, setYear] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [fatherName, setFatherName] = useState(\"\");\r\n  const [trainingYear, setTrainingYear] = useState(\"\");\r\n  const [department, setDepartment] = useState(\"\");\r\n\r\n  const [exam1Written, setExam1Written] = useState(\"\");\r\n  const [exam1Practical, setExam1Practical] = useState(\"\");\r\n  const [exam2Written, setExam2Written] = useState(\"\");\r\n  const [exam2Practical, setExam2Practical] = useState(\"\");\r\n  const [finalWritten, setFinalWritten] = useState(\"\");\r\n  const [finalPractical, setFinalPractical] = useState(\"\");\r\n\r\n  const [average, setAverage] = useState(\"\");\r\n  const [teacherName, setTeacherName] = useState(\"\");\r\n  const [teacherSigned, setTeacherSigned] = useState(false);\r\n  const [departmentHead, setDepartmentHead] = useState(\"\");\r\n  const [programHead, setProgramHead] = useState(\"\");\r\n  const [hospitalHead, setHospitalHead] = useState(\"\");\r\n\r\n  const inputClass = \"border rounded px-2 py-2 w-full text-center\";\r\n\r\n  // محاسبه مجموع\r\n  const total =\r\n    (Number(exam1Written) || 0) +\r\n    (Number(exam1Practical) || 0) +\r\n    (Number(exam2Written) || 0) +\r\n    (Number(exam2Practical) || 0) +\r\n    (Number(finalWritten) || 0) +\r\n    (Number(finalPractical) || 0);\r\n\r\n  // تابع ثبت فرم\r\n  const handleSubmit = async () => {\r\n    try {\r\n      const res = await fetch(\"http://localhost:5000/api/evaluationFormG\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          year,\r\n          name,\r\n          fatherName,\r\n          trainingYear,\r\n          department,\r\n          exam1Written: Number(exam1Written),\r\n          exam1Practical: Number(exam1Practical),\r\n          exam2Written: Number(exam2Written),\r\n          exam2Practical: Number(exam2Practical),\r\n          finalWritten: Number(finalWritten),\r\n          finalPractical: Number(finalPractical),\r\n          total,\r\n          average,\r\n          teacherName,\r\n          teacherSigned,\r\n          departmentHead,\r\n          programHead,\r\n          hospitalHead,\r\n        }),\r\n      });\r\n\r\n      if (!res.ok) throw new Error(\"خطا در ذخیره فرم\");\r\n\r\n      const data = await res.json();\r\n      console.log(\"فرم ذخیره شد:\", data);\r\n      alert(\"فرم با موفقیت ذخیره شد!\");\r\n\r\n      // ریست کردن تمام فیلدها\r\n      setYear(\"\");\r\n      setName(\"\");\r\n      setFatherName(\"\");\r\n      setTrainingYear(\"\");\r\n      setDepartment(\"\");\r\n      setExam1Written(\"\");\r\n      setExam1Practical(\"\");\r\n      setExam2Written(\"\");\r\n      setExam2Practical(\"\");\r\n      setFinalWritten(\"\");\r\n      setFinalPractical(\"\");\r\n      setAverage(\"\");\r\n      setTeacherName(\"\");\r\n      setTeacherSigned(false);\r\n      setDepartmentHead(\"\");\r\n      setProgramHead(\"\");\r\n      setHospitalHead(\"\");\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(\"خطا در ذخیره فرم\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-5xl mx-auto bg-white shadow-lg rounded-2xl p-6 mt-6\">\r\n      <h2 className=\"text-xl font-bold text-center mb-4\">\r\n        فرم ارزشیابی دستیار\r\n      </h2>\r\n\r\n      {/* اطلاعات فردی */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">سال</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"سال\"\r\n            value={year}\r\n            onChange={(e) => setYear(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">اسم</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"اسم\"\r\n            value={name}\r\n            onChange={(e) => setName(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">ولد</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"ولد\"\r\n            value={fatherName}\r\n            onChange={(e) => setFatherName(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">سال تریننگ</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"سال تریننگ\"\r\n            value={trainingYear}\r\n            onChange={(e) => setTrainingYear(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">دیپارتمنت</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"دیپارتمنت\"\r\n            value={department}\r\n            onChange={(e) => setDepartment(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* نمرات */}\r\n      <h3 className=\"text-lg font-semibold mb-2\">نمرات</h3>\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">۴ ماه اول تحریری</label>\r\n          <input\r\n            type=\"number\"\r\n            value={exam1Written}\r\n            onChange={(e) => setExam1Written(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">۴ ماه اول عملی</label>\r\n          <input\r\n            type=\"number\"\r\n            value={exam1Practical}\r\n            onChange={(e) => setExam1Practical(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">۴ ماه دوم تحریری</label>\r\n          <input\r\n            type=\"number\"\r\n            value={exam2Written}\r\n            onChange={(e) => setExam2Written(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">۴ ماه دوم عملی</label>\r\n          <input\r\n            type=\"number\"\r\n            value={exam2Practical}\r\n            onChange={(e) => setExam2Practical(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">نهایی تحریری</label>\r\n          <input\r\n            type=\"number\"\r\n            value={finalWritten}\r\n            onChange={(e) => setFinalWritten(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">نهایی عملی</label>\r\n          <input\r\n            type=\"number\"\r\n            value={finalPractical}\r\n            onChange={(e) => setFinalPractical(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* مجموع */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">مجموع نمرات</label>\r\n          <input\r\n            type=\"number\"\r\n            readOnly\r\n            value={total}\r\n            className={inputClass + \" bg-gray-100\"}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">اوسط نمرات</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"اوسط نمرات\"\r\n            value={average}\r\n            onChange={(e) => setAverage(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* استاد */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">نام استاد</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"نام استاد\"\r\n            value={teacherName}\r\n            onChange={(e) => setTeacherName(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n        <div className=\"flex items-center mt-6\">\r\n          <label className=\"flex items-center space-x-2\">\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={teacherSigned}\r\n              onChange={(e) => setTeacherSigned(e.target.checked)}\r\n            />\r\n            امضای استاد\r\n          </label>\r\n        </div>\r\n      </div>\r\n\r\n      {/* امضاها */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">شف دیپارتمنت</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"شف دیپارتمنت\"\r\n            value={departmentHead}\r\n            onChange={(e) => setDepartmentHead(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">آمر پروگرام تریننگ</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"آمر پروگرام تریننگ\"\r\n            value={programHead}\r\n            onChange={(e) => setProgramHead(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">ریس شفاخانه</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"ریس شفاخانه\"\r\n            value={hospitalHead}\r\n            onChange={(e) => setHospitalHead(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n      </div>\r\n      {/* دکمه ثبت */}\r\n      <div className=\"text-center mt-6\">\r\n        <button\r\n          onClick={handleSubmit}\r\n          className=\"px-6 py-2 bg-green-600 text-white rounded-xl hover:bg-green-700 transition\"\r\n        >\r\n          ذخیره فرم\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","size_bytes":10380},"client/src/components/forms/form-H.tsx":{"content":"import React, { useState } from \"react\";\r\n\r\nexport default function EvaluationFormHStyled() {\r\n  const [yearInput, setYearInput] = useState(\"\");\r\n  const [residentName, setResidentName] = useState(\"\");\r\n  const [fatherName, setFatherName] = useState(\"\");\r\n  const [department, setDepartment] = useState(\"\");\r\n  const [trainingYear, setTrainingYear] = useState(\"سال اول\");\r\n\r\n  const [totalScore, setTotalScore] = useState<number | \"\">(\"\");\r\n  const [averageScore, setAverageScore] = useState<number | \"\">(\"\");\r\n\r\n  const [instructorName, setInstructorName] = useState(\"\");\r\n  const [instructorSigned, setInstructorSigned] = useState(false);\r\n  const [shiftDepartment, setShiftDepartment] = useState(\"\");\r\n  const [programDirector, setProgramDirector] = useState(\"\");\r\n  const [presidentSigned, setPresidentSigned] = useState(false);\r\n  const handleSubmit = async () => {\r\n    try {\r\n      const res = await fetch(\"http://localhost:5000/api/evaluationFormH\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          // studentId: \"64dfe...\", // 👈 یک آی‌دی تستی از Resident اگر داری\r\n           year: yearInput,\r\n          residentName,\r\n          fatherName,\r\n          department,\r\n          trainingYear,\r\n          totalScore: Number(totalScore),\r\n          averageScore: Number(averageScore),\r\n          instructorName,\r\n          instructorSigned,\r\n          shiftDepartment,\r\n          programDirector,\r\n          presidentSigned,\r\n        }),\r\n      });\r\n\r\n      if (!res.ok) throw new Error(\"خطا در ذخیره فرم\");\r\n\r\n      const data = await res.json();\r\n      console.log(\"فرم ذخیره شد:\", data);\r\n      alert(\"فرم با موفقیت ذخیره شد!\");\r\n\r\n      // 👇 ریست کردن همه فیلدها\r\n      setYearInput(\"\");\r\n      setResidentName(\"\");\r\n      setFatherName(\"\");\r\n      setDepartment(\"\");\r\n      setTrainingYear(\"سال اول\");\r\n      setTotalScore(\"\");\r\n      setAverageScore(\"\");\r\n      setInstructorName(\"\");\r\n      setInstructorSigned(false);\r\n      setShiftDepartment(\"\");\r\n      setProgramDirector(\"\");\r\n      setPresidentSigned(false);\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(\"خطا در ذخیره فرم\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-6xl mx-auto bg-white shadow-lg rounded-2xl p-6 mt-6\">\r\n      {/* بالای فرم */}\r\n      <div className=\"text-center mb-2\">\r\n        <div className=\"mt-1 font-semibold\">وزارت صحت عامه</div>\r\n        <div className=\"font-semibold\">معینیت اداری</div>\r\n        <div className=\"font-semibold\">ریاست اکمال تخصص</div>\r\n      </div>\r\n      <hr className=\"border-t-2 border-gray-300 my-3\" />\r\n      <div className=\"text-center font-semibold mb-4\">\r\n        فرم مخصوص درج نمرات سال‌های دوران ترینینگ - شفاخانه ملی و تخصص چشم نور\r\n      </div>\r\n\r\n      {/* اطلاعات اولیه و سال ترینی در سطر سه‌تایی */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">سال</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"سال\"\r\n            value={yearInput}\r\n            onChange={(e) => setYearInput(e.target.value)}\r\n            className=\"border rounded px-2 py-2 text-center w-full\"\r\n          />\r\n        </div>\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">نام دستیار</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"نام دستیار\"\r\n            value={residentName}\r\n            onChange={(e) => setResidentName(e.target.value)}\r\n            className=\"border rounded px-2 py-2 text-center w-full\"\r\n          />\r\n        </div>\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">نام پدر</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"نام پدر\"\r\n            value={fatherName}\r\n            onChange={(e) => setFatherName(e.target.value)}\r\n            className=\"border rounded px-2 py-2 text-center w-full\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* سطر بعدی سه‌تایی */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">دپارتمان</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"دپارتمان\"\r\n            value={department}\r\n            onChange={(e) => setDepartment(e.target.value)}\r\n            className=\"border rounded px-2 py-2 text-center w-full\"\r\n          />\r\n        </div>\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">سال ترینی</label>\r\n          <select\r\n            value={trainingYear}\r\n            onChange={(e) => setTrainingYear(e.target.value)}\r\n            className=\"border rounded px-2 py-2 text-center w-full\"\r\n          >\r\n            <option>سال اول</option>\r\n            <option>سال دوم</option>\r\n            <option>سال سوم</option>\r\n            <option>سال چهارم</option>\r\n          </select>\r\n        </div>\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">مجموع نمرات</label>\r\n          <input\r\n            type=\"number\"\r\n            placeholder=\"مجموع نمرات\"\r\n            value={totalScore}\r\n            onChange={(e) => setTotalScore(Number(e.target.value))}\r\n            className=\"border rounded px-2 py-2 text-center w-full\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* سطر بعدی سه‌تایی */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">اوسط نمرات</label>\r\n          <input\r\n            type=\"number\"\r\n            placeholder=\"اوسط نمرات\"\r\n            value={averageScore}\r\n            onChange={(e) => setAverageScore(Number(e.target.value))}\r\n            className=\"border rounded px-2 py-2 text-center w-full\"\r\n          />\r\n        </div>\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">نام استاد</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"نام استاد\"\r\n            value={instructorName}\r\n            onChange={(e) => setInstructorName(e.target.value)}\r\n            className=\"border rounded px-2 py-2 text-center w-full\"\r\n          />\r\n        </div>\r\n        <div className=\"flex items-center justify-center\">\r\n          <label className=\"flex items-center space-x-2\">\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={instructorSigned}\r\n              onChange={(e) => setInstructorSigned(e.target.checked)}\r\n            />\r\n            امضای استاد\r\n          </label>\r\n        </div>\r\n      </div>\r\n\r\n      {/* سطر بعدی سه‌تایی */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">شیفت دپارتمان</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"شیفت دپارتمان\"\r\n            value={shiftDepartment}\r\n            onChange={(e) => setShiftDepartment(e.target.value)}\r\n            className=\"border rounded px-2 py-2 text-center w-full\"\r\n          />\r\n        </div>\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">آمر برنامه آموزشی</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"آمر برنامه آموزشی\"\r\n            value={programDirector}\r\n            onChange={(e) => setProgramDirector(e.target.value)}\r\n            className=\"border rounded px-2 py-2 text-center w-full\"\r\n          />\r\n        </div>\r\n        <div className=\"flex items-center justify-center\">\r\n          <label className=\"flex items-center space-x-2\">\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={presidentSigned}\r\n              onChange={(e) => setPresidentSigned(e.target.checked)}\r\n            />\r\n            مهر و امضای ریاست\r\n          </label>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"text-center\">\r\n        <button\r\n          onClick={handleSubmit}\r\n          className=\"px-6 py-2 bg-green-600 text-white rounded-xl hover:bg-green-700 transition\"\r\n        >\r\n          ذخیره فرم\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","size_bytes":8540},"client/src/components/forms/form-c.tsx":{"content":"\r\nimport React, { useState } from \"react\";\r\n\r\ninterface MonographEvaluation {\r\n  section: string;\r\n  percentage: string;\r\n  score: string;\r\n  teacherName: string;\r\n  teacherSigned: boolean;\r\n  characteristics: string;\r\n  total: string;\r\n  finalResult: string; // نتیجه نهایی\r\n}\r\n\r\nexport default function MonographEvaluationFormC() {\r\n  const [name, setName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const [fatherName, setFatherName] = useState(\"\");\r\n  const [idNumber, setIdNumber] = useState(\"\");\r\n  const [field, setField] = useState(\"\");\r\n  const [trainingYear, setTrainingYear] = useState(\"\");\r\n  const [startYear, setStartYear] = useState(\"\");\r\n  const [date, setDate] = useState(\"\");\r\n\r\n  // فیلدهای جدید\r\n  const [chef, setChef] = useState(\"\");\r\n  const [departmentHead, setDepartmentHead] = useState(\"\");\r\n  const [hospitalHead, setHospitalHead] = useState(\"\");\r\n\r\n  const [evaluations, setEvaluations] = useState<MonographEvaluation[]>([\r\n    {\r\n      section: \"\",\r\n      percentage: \"\",\r\n      score: \"\",\r\n      teacherName: \"\",\r\n      teacherSigned: false,\r\n      characteristics: \"\",\r\n      total: \"\",\r\n      finalResult: \"\",\r\n    },\r\n  ]);\r\n\r\n  const handleEvalChange = (\r\n    index: number,\r\n    fieldName: keyof MonographEvaluation,\r\n    value: string | boolean\r\n  ) => {\r\n    const updated = [...evaluations];\r\n    (updated[index] as any)[fieldName] = value;\r\n    setEvaluations(updated);\r\n  };\r\n\r\n  const inputClass = \"border rounded px-2 py-2 w-full text-center\";\r\n\r\n  // تابع ارسال فرم به بک‌اند\r\n  const handleSubmit = async () => {\r\n    const payload = {\r\n      name,\r\n      lastName,\r\n      fatherName,\r\n      idNumber,\r\n      field,\r\n      trainingYear,\r\n      startYear,\r\n      date,\r\n      chef,\r\n      departmentHead,\r\n      hospitalHead,\r\n      evaluations,\r\n    };\r\n\r\n    try {\r\n      const res = await fetch(\"http://localhost:5000/api/monograph\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(payload),\r\n      });\r\n\r\n      if (res.ok) {\r\n        alert(\"فرم با موفقیت ارسال شد ✅\");\r\n         // 🔹 ریست کردن همه state ها\r\n      setName(\"\");\r\n      setLastName(\"\");\r\n      setFatherName(\"\");\r\n      setIdNumber(\"\");\r\n      setField(\"\");\r\n      setTrainingYear(\"\");\r\n      setStartYear(\"\");\r\n      setDate(\"\");\r\n      setChef(\"\");\r\n      setDepartmentHead(\"\");\r\n      setHospitalHead(\"\");\r\n      setEvaluations([\r\n        {\r\n          section: \"\",\r\n          percentage: \"\",\r\n          score: \"\",\r\n          teacherName: \"\",\r\n          teacherSigned: false,\r\n          characteristics: \"\",\r\n          total: \"\",\r\n          finalResult: \"\",\r\n        },\r\n      ]);\r\n      } else {\r\n        alert(\"❌ خطا در ارسال فرم\");\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(\"❌ مشکل در برقراری ارتباط با سرور\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-6xl mx-auto bg-white shadow-lg rounded-2xl p-6 mt-6\">\r\n      <h2 className=\"text-xl font-bold text-center mb-4\">\r\n        فرم ارزیابی مونوگراف\r\n      </h2>\r\n\r\n      {/* اطلاعات فردی */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">اسم</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"اسم\"\r\n            value={name}\r\n            onChange={(e) => setName(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">تخلص</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"تخلص\"\r\n            value={lastName}\r\n            onChange={(e) => setLastName(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">ولد</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"ولد\"\r\n            value={fatherName}\r\n            onChange={(e) => setFatherName(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">نمبر تذکره</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"نمبر تذکره\"\r\n            value={idNumber}\r\n            onChange={(e) => setIdNumber(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">رشته</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"رشته\"\r\n            value={field}\r\n            onChange={(e) => setField(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">سال تریننگ</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"سال تریننگ\"\r\n            value={trainingYear}\r\n            onChange={(e) => setTrainingYear(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">سال شمول</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"سال شمول\"\r\n            value={startYear}\r\n            onChange={(e) => setStartYear(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">تاریخ</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"تاریخ\"\r\n            value={date}\r\n            onChange={(e) => setDate(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* ارزیابی */}\r\n      <h3 className=\"text-lg font-semibold mb-2\">ارزیابی مونوگراف</h3>\r\n      {evaluations.map((evalItem, i) => (\r\n        <div\r\n          key={i}\r\n          className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4 border p-4 rounded-lg\"\r\n        >\r\n          <div>\r\n            <label className=\"block mb-1 font-medium\">بخش</label>\r\n            <select\r\n              value={evalItem.section}\r\n              onChange={(e) => handleEvalChange(i, \"section\", e.target.value)}\r\n              className={inputClass}\r\n            >\r\n              <option value=\"\">انتخاب کنید</option>\r\n              <option value=\"نمره کنفرانسهای طول سال\">\r\n                نمره کنفرانسهای طول سال\r\n              </option>\r\n              <option value=\"کرکترستیک\">کرکترستیک</option>\r\n              <option value=\"نمره امتحان نهایی عملی و تقرری\">\r\n                نمره امتحان نهایی عملی و تقرری\r\n              </option>\r\n              <option value=\"نمره تست های چهار ماهه\">\r\n                نمره تست های چهار ماهه\r\n              </option>\r\n              <option value=\"نمره case presentation\">\r\n                نمره case presentation\r\n              </option>\r\n              <option value=\"نمره سیکل ها\">نمره سیکل ها</option>\r\n            </select>\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block mb-1 font-medium\">فیصدی</label>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"فیصدی\"\r\n              value={evalItem.percentage}\r\n              onChange={(e) =>\r\n                handleEvalChange(i, \"percentage\", e.target.value)\r\n              }\r\n              className={inputClass}\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block mb-1 font-medium\">نمره داده شده</label>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"نمره داده شده\"\r\n              value={evalItem.score}\r\n              onChange={(e) => handleEvalChange(i, \"score\", e.target.value)}\r\n              className={inputClass}\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block mb-1 font-medium\">نام استاد</label>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"نام استاد\"\r\n              value={evalItem.teacherName}\r\n              onChange={(e) =>\r\n                handleEvalChange(i, \"teacherName\", e.target.value)\r\n              }\r\n              className={inputClass}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"flex items-center mt-4\">\r\n            <label className=\"flex items-center space-x-2\">\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={evalItem.teacherSigned}\r\n                onChange={(e) =>\r\n                  handleEvalChange(i, \"teacherSigned\", e.target.checked)\r\n                }\r\n              />\r\n              امضای استاد\r\n            </label>\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block mb-1 font-medium\">مجموع نمرات</label>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"مجموع نمرات\"\r\n              value={evalItem.total}\r\n              onChange={(e) => handleEvalChange(i, \"total\", e.target.value)}\r\n              className={inputClass}\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block mb-1 font-medium\">نتیجه نهایی</label>\r\n            <select\r\n              value={evalItem.finalResult}\r\n              onChange={(e) =>\r\n                handleEvalChange(i, \"finalResult\", e.target.value)\r\n              }\r\n              className={inputClass}\r\n            >\r\n              <option value=\"\">انتخاب کنید</option>\r\n              <option value=\"مشروط\">مشروط</option>\r\n              <option value=\"کامیاب\">کامیاب</option>\r\n              <option value=\"ناکام\">ناکام</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n      ))}\r\n\r\n      {/* فیلدهای جدید */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-6\">\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">شف</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"شف\"\r\n            value={chef}\r\n            onChange={(e) => setChef(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">آمر پروگرام تریننگ</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"آمر پروگرام تریننگ\"\r\n            value={departmentHead}\r\n            onChange={(e) => setDepartmentHead(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">ریس شفاخانه</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"ریس شفاخانه\"\r\n            value={hospitalHead}\r\n            onChange={(e) => setHospitalHead(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"text-center mt-6\">\r\n        <button\r\n          onClick={handleSubmit}\r\n          className=\"px-6 py-2 bg-green-600 text-white rounded-xl hover:bg-green-700 transition\"\r\n        >\r\n          ذخیره فرم\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","size_bytes":11755},"client/src/components/forms/form-k.tsx":{"content":"import React, { useState } from \"react\";\r\n\r\ninterface MonographEvaluation {\r\n  section: string;\r\n  writingStyle: string;\r\n  presentation: string;\r\n  answersToQuestions: string;\r\n  defense: string;\r\n  answersToAdditional: string;\r\n  percentage: string;\r\n  score: string;\r\n  teacherName: string;\r\n  teacherSigned: boolean;\r\n  characteristics: string;\r\n  total: string;\r\n  average: string;\r\n}\r\n\r\nexport default function MonographEvaluationForm() {\r\n  const [name, setName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const [fatherName, setFatherName] = useState(\"\");\r\n  const [idNumber, setIdNumber] = useState(\"\");\r\n  const [field, setField] = useState(\"\");\r\n  const [trainingYear, setTrainingYear] = useState(\"\");\r\n  const [startYear, setStartYear] = useState(\"\");\r\n  const [date, setDate] = useState(\"\");\r\n\r\n  const [evaluations, setEvaluations] = useState<MonographEvaluation[]>([\r\n    {\r\n      section: \"\",\r\n      writingStyle: \"\",\r\n      presentation: \"\",\r\n      answersToQuestions: \"\",\r\n      defense: \"\",\r\n      answersToAdditional: \"\",\r\n      percentage: \"\",\r\n      score: \"\",\r\n      teacherName: \"\",\r\n      teacherSigned: false,\r\n      characteristics: \"\",\r\n      total: \"\",\r\n      average: \"\",\r\n    },\r\n  ]);\r\n\r\n  const handleEvalChange = (\r\n    index: number,\r\n    fieldName: keyof MonographEvaluation,\r\n    value: string | boolean\r\n  ) => {\r\n    const updated = [...evaluations];\r\n    (updated[index] as any)[fieldName] = value;\r\n    setEvaluations(updated);\r\n  };\r\n\r\n  // const handleSubmit = async () => {\r\n  //   try {\r\n  //     const res = await fetch(\"http://localhost:5000//api/monographEvaluation\", {\r\n  //       method: \"POST\",\r\n  //       headers: { \"Content-Type\": \"application/json\" },\r\n  //       body: JSON.stringify({\r\n  //         studentId: \"665dfb4c1d53c33f74123456\", // 👈\r\n  //         name,\r\n  //         lastName,\r\n  //         fatherName,\r\n  //         idNumber,\r\n  //         field,\r\n  //         trainingYear,\r\n  //         startYear,\r\n  //         date,\r\n  //         evaluations,\r\n  //       }),\r\n        \r\n  //     });\r\n  //     if (!res.ok) throw new Error(\"خطا در ذخیره فرم\");\r\n  //     const data = await res.json();\r\n  //     console.log(\"فرم ذخیره شد:\", data);\r\n  //     alert(\"فرم با موفقیت ذخیره شد!\");\r\n\r\n  //     // ریست کردن همه فیلدها\r\n  //     setName(\"\");\r\n  //     setLastName(\"\");\r\n  //     setFatherName(\"\");\r\n  //     setIdNumber(\"\");\r\n  //     setField(\"\");\r\n  //     setTrainingYear(\"\");\r\n  //     setStartYear(\"\");\r\n  //     setDate(\"\");\r\n  //     setEvaluations([\r\n  //       {\r\n  //         section: \"\",\r\n  //         writingStyle: \"\",\r\n  //         presentation: \"\",\r\n  //         answersToQuestions: \"\",\r\n  //         defense: \"\",\r\n  //         answersToAdditional: \"\",\r\n  //         percentage: \"\",\r\n  //         score: \"\",\r\n  //         teacherName: \"\",\r\n  //         teacherSigned: false,\r\n  //         characteristics: \"\",\r\n  //         total: \"\",\r\n  //         average: \"\",\r\n  //       },\r\n  //     ]);\r\n  //   } catch (err) {\r\n  //     console.error(err);\r\n  //     alert(\"خطا در ذخیره فرم\");\r\n  //   }\r\n  // };\r\n  ///////////////////////////////\r\nconst handleSubmit = async () => {\r\n  try {\r\n    const res = await fetch(\"http://localhost:5000/api/monographEvaluation\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        studentId: \"64dfe0123456789abcdef012\", // آیدی واقعی یا حذفش اگر ندارید\r\n        name,\r\n        lastName,\r\n        fatherName,\r\n        idNumber,\r\n        field,\r\n        trainingYear,\r\n        startYear,\r\n        date,\r\n        evaluations,\r\n      }),\r\n    });\r\n\r\n    // فقط یک‌بار بدنه را بخوان\r\n    const text = await res.text();\r\n    console.log(\"RAW RESPONSE:\", text);\r\n\r\n    if (!res.ok) {\r\n      console.error(\"server returned error:\", text);\r\n      alert(\"خطا در ذخیره فرم — سرور پاسخ خطا داد. کنسول را بررسی کن.\");\r\n      return;\r\n    }\r\n\r\n    // اگر content-type JSON است، parse کن\r\n    const contentType = res.headers.get(\"content-type\") || \"\";\r\n    const data = contentType.includes(\"application/json\")\r\n      ? JSON.parse(text)\r\n      : text;\r\n\r\n    console.log(\"فرم ذخیره شد:\", data);\r\n    alert(\"فرم با موفقیت ذخیره شد!\");\r\n\r\n    // ریست کردن همه فیلدها\r\n    setName(\"\");\r\n    setLastName(\"\");\r\n    setFatherName(\"\");\r\n    setIdNumber(\"\");\r\n    setField(\"\");\r\n    setTrainingYear(\"\");\r\n    setStartYear(\"\");\r\n    setDate(\"\");\r\n    setEvaluations([\r\n      {\r\n        section: \"\",\r\n        writingStyle: \"\",\r\n        presentation: \"\",\r\n        answersToQuestions: \"\",\r\n        defense: \"\",\r\n        answersToAdditional: \"\",\r\n        percentage: \"\",\r\n        score: \"\",\r\n        teacherName: \"\",\r\n        teacherSigned: false,\r\n        characteristics: \"\",\r\n        total: \"\",\r\n        average: \"\",\r\n      },\r\n    ]);\r\n  } catch (err) {\r\n    console.error(\"fetch error:\", err);\r\n    alert(\"خطا در ذخیره فرم\");\r\n  }\r\n};\r\n\r\n  // استایل مشترک برای همه input ها\r\n  const inputClass = \"border rounded px-2 py-2 w-full text-center\";\r\n\r\n  return (\r\n    <div className=\"max-w-6xl mx-auto bg-white shadow-lg rounded-2xl p-6 mt-6\">\r\n      <h2 className=\"text-xl font-bold text-center mb-4\">\r\n        فرم ارزیابی مونوگراف\r\n      </h2>\r\n\r\n      {/* اطلاعات فردی */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">اسم</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"اسم\"\r\n            value={name}\r\n            onChange={(e) => setName(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">تخلص</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"تخلص\"\r\n            value={lastName}\r\n            onChange={(e) => setLastName(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">ولد</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"ولد\"\r\n            value={fatherName}\r\n            onChange={(e) => setFatherName(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">نمبر تذکره</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"نمبر تذکره\"\r\n            value={idNumber}\r\n            onChange={(e) => setIdNumber(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">رشته</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"رشته\"\r\n            value={field}\r\n            onChange={(e) => setField(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">سال تریننگ</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"سال تریننگ\"\r\n            value={trainingYear}\r\n            onChange={(e) => setTrainingYear(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">سال شمول</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"سال شمول\"\r\n            value={startYear}\r\n            onChange={(e) => setStartYear(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label className=\"block mb-1 font-medium\">تاریخ</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"تاریخ\"\r\n            value={date}\r\n            onChange={(e) => setDate(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* ارزیابی مونوگراف */}\r\n      <h3 className=\"text-lg font-semibold mb-2\">ارزیابی مونوگراف</h3>\r\n      {evaluations.map((evalItem, i) => (\r\n        <div\r\n          key={i}\r\n          className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4 border p-4 rounded-lg\"\r\n        >\r\n          <div>\r\n            <label className=\"block mb-1 font-medium\">بخش</label>\r\n            <select\r\n              value={evalItem.section}\r\n              onChange={(e) => handleEvalChange(i, \"section\", e.target.value)}\r\n              className={inputClass}\r\n            >\r\n              <option value=\"\">انتخاب کنید</option>\r\n              <option value=\"روش تحقیق\">روش تحقیق</option>\r\n              <option value=\"شیوه تحریر و ترتیب مونوگراف\">\r\n                شیوه تحریر و ترتیب مونوگراف\r\n              </option>\r\n              <option value=\"حاکمیت و شیوه ارائه موضوع\">\r\n                حاکمیت و شیوه ارائه موضوع\r\n              </option>\r\n              <option value=\"ارائه جواب به سوالات راجع به موضوع\">\r\n                ارائه جواب به سوالات راجع به موضوع\r\n              </option>\r\n              <option value=\"دفاع از موضوع تحقیق\">دفاع از موضوع تحقیق</option>\r\n              <option value=\"ارائه جوابات به سوالات افاقی\">\r\n                ارائه جوابات به سوالات افاقی\r\n              </option>\r\n            </select>\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block mb-1 font-medium\">فیصدی</label>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"فیصدی\"\r\n              value={evalItem.percentage}\r\n              onChange={(e) =>\r\n                handleEvalChange(i, \"percentage\", e.target.value)\r\n              }\r\n              className={inputClass}\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block mb-1 font-medium\">نمره داده شده</label>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"نمره داده شده\"\r\n              value={evalItem.score}\r\n              onChange={(e) => handleEvalChange(i, \"score\", e.target.value)}\r\n              className={inputClass}\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block mb-1 font-medium\">نام استاد</label>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"نام استاد\"\r\n              value={evalItem.teacherName}\r\n              onChange={(e) =>\r\n                handleEvalChange(i, \"teacherName\", e.target.value)\r\n              }\r\n              className={inputClass}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"flex items-center mt-4\">\r\n            <label className=\"flex items-center space-x-2\">\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={evalItem.teacherSigned}\r\n                onChange={(e) =>\r\n                  handleEvalChange(i, \"teacherSigned\", e.target.checked)\r\n                }\r\n              />\r\n              امضای استاد\r\n            </label>\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block mb-1 font-medium\">کرکترستیک</label>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"کرکترستیک\"\r\n              value={evalItem.characteristics}\r\n              onChange={(e) =>\r\n                handleEvalChange(i, \"characteristics\", e.target.value)\r\n              }\r\n              className={inputClass}\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block mb-1 font-medium\">مجموع نمرات</label>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"مجموع نمرات\"\r\n              value={evalItem.total}\r\n              onChange={(e) => handleEvalChange(i, \"total\", e.target.value)}\r\n              className={inputClass}\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"block mb-1 font-medium\">اوسط</label>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"اوسط\"\r\n              value={evalItem.average}\r\n              onChange={(e) => handleEvalChange(i, \"average\", e.target.value)}\r\n              className={inputClass}\r\n            />\r\n          </div>\r\n        </div>\r\n      ))}\r\n\r\n      <div className=\"text-center\">\r\n        <button\r\n          onClick={handleSubmit}\r\n          className=\"px-6 py-2 bg-green-600 text-white rounded-xl hover:bg-green-700 transition\"\r\n        >\r\n          ذخیره فرم\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","size_bytes":13161},"client/src/components/forms/form-modal.tsx":{"content":"// FormModal.tsx\r\nimport { useState } from \"react\";\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogHeader,\r\n  DialogTitle,\r\n} from \"@/components/ui/dialog\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { useAuth } from \"@/hooks/useAuth\";\r\nimport type { Form } from \"@shared/schema\";\r\n\r\n// Import your custom form components\r\nimport EvaluationFormHStyled from \"@/components/forms/form-H\";\r\nimport EvaluationFormE from \"@/components/forms/Form-E\";\r\nimport EvaluationFormD from \"@/components/forms/form-D\";\r\nimport MonographEvaluationForm from \"@/components/forms/form-k\";\r\nimport EvaluationFormG from \"@/components/forms/form-G\";\r\nimport MonographEvaluationFormC from \"@/components/forms/form-c\";\r\nimport TeacherActivityForm from \"@/components/forms/formJ\";\r\nimport ChecklistForm from \"@/components/forms/formF\";\r\nimport RotationForm from \"@/components/forms/formI\";\r\ninterface FormModalProps {\r\n  form: Form;\r\n  onClose: () => void;\r\n}\r\n\r\nconst FORM_TITLES: Record<string, string> = {\r\n  J: \"Initial Assessment & Orientation\",\r\n  F: \"Mid-Training Evaluation\",\r\n  D: \"Clinical Skills Assessment\",\r\n  I: \"Research & Academic Progress\",\r\n  G: \"Communication Skills Review\",\r\n  E: \"Ethics & Professionalism\",\r\n  C: \"Case Presentation Evaluation\",\r\n  H: \"Hands-on Procedure Assessment\",\r\n  K: \"Final Competency Evaluation\",\r\n};\r\n\r\nexport default function FormModal({ form, onClose }: FormModalProps) {\r\n  if (!form) return null; // ← اینجا اضافه کنید\r\n  const { user } = useAuth();\r\n  const [formData, setFormData] = useState((form.formData as any) || {});\r\n\r\n  const isReadOnly = user?.role !== \"admin\";\r\n  const formTitle = FORM_TITLES[form.formType] || \"Form Details\";\r\n\r\n  const handleSave = () => {\r\n    // TODO: Implement form save functionality\r\n    console.log(\"Saving form:\", formData);\r\n    onClose();\r\n  };\r\n\r\n  const renderFormContent = () => {\r\n    switch (form.formType) {\r\n      case \"J\":\r\n        return <TeacherActivityForm />;\r\n      case \"F\":\r\n        return <ChecklistForm />;\r\n      case \"I\":\r\n        return <RotationForm />;\r\n      case \"H\":\r\n        return <EvaluationFormHStyled />;\r\n      case \"E\":\r\n        return <EvaluationFormE />;\r\n      case \"D\":\r\n        return <EvaluationFormD />;\r\n      case \"K\":\r\n        return <MonographEvaluationForm />;\r\n      case \"G\":\r\n        return <EvaluationFormG />;\r\n      case \"C\":\r\n        return <MonographEvaluationFormC />;\r\n      default:\r\n        return (\r\n          <div className=\"space-y-4\">\r\n            <div className=\"grid grid-cols-2 gap-4\">\r\n              <div>\r\n                <Label htmlFor=\"assessmentDate\">Assessment Date</Label>\r\n                <Input\r\n                  id=\"assessmentDate\"\r\n                  type=\"date\"\r\n                  value={formData.assessmentDate || \"\"}\r\n                  onChange={(e) =>\r\n                    setFormData({ ...formData, assessmentDate: e.target.value })\r\n                  }\r\n                  readOnly={isReadOnly}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Label htmlFor=\"supervisor\">Supervisor</Label>\r\n                <Select\r\n                  value={formData.supervisorId || \"\"}\r\n                  onValueChange={(value) =>\r\n                    setFormData({ ...formData, supervisorId: value })\r\n                  }\r\n                  disabled={isReadOnly}\r\n                >\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder=\"Select supervisor\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"1\">Dr. Michael Chen</SelectItem>\r\n                    <SelectItem value=\"2\">Dr. Emily Rodriguez</SelectItem>\r\n                    <SelectItem value=\"3\">Dr. Sarah Wilson</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n            </div>\r\n\r\n            <div>\r\n              <Label htmlFor=\"rating\">Overall Rating</Label>\r\n              <Select\r\n                value={formData.rating || \"\"}\r\n                onValueChange={(value) =>\r\n                  setFormData({ ...formData, rating: value })\r\n                }\r\n                disabled={isReadOnly}\r\n              >\r\n                <SelectTrigger>\r\n                  <SelectValue placeholder=\"Select rating\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"excellent\">Excellent</SelectItem>\r\n                  <SelectItem value=\"good\">Good</SelectItem>\r\n                  <SelectItem value=\"satisfactory\">Satisfactory</SelectItem>\r\n                  <SelectItem value=\"needs-improvement\">\r\n                    Needs Improvement\r\n                  </SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n\r\n            <div>\r\n              <Label htmlFor=\"strengths\">Strengths</Label>\r\n              <Textarea\r\n                id=\"strengths\"\r\n                placeholder=\"Describe the resident's strengths...\"\r\n                value={formData.strengths || \"\"}\r\n                onChange={(e) =>\r\n                  setFormData({ ...formData, strengths: e.target.value })\r\n                }\r\n                readOnly={isReadOnly}\r\n                className=\"min-h-[80px]\"\r\n              />\r\n            </div>\r\n\r\n            <div>\r\n              <Label htmlFor=\"areasForImprovement\">Areas for Improvement</Label>\r\n              <Textarea\r\n                id=\"areasForImprovement\"\r\n                placeholder=\"Describe areas that need improvement...\"\r\n                value={formData.areasForImprovement || \"\"}\r\n                onChange={(e) =>\r\n                  setFormData({\r\n                    ...formData,\r\n                    areasForImprovement: e.target.value,\r\n                  })\r\n                }\r\n                readOnly={isReadOnly}\r\n                className=\"min-h-[80px]\"\r\n              />\r\n            </div>\r\n          </div>\r\n        );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Dialog open={true} onOpenChange={onClose}>\r\n      <DialogContent className=\"max-w-3xl max-h-[80vh] overflow-y-auto\">\r\n        <DialogHeader>\r\n          <DialogTitle>\r\n            Form {form.formType} - {formTitle}\r\n          </DialogTitle>\r\n        </DialogHeader>\r\n\r\n        <div className=\"mt-4\">{renderFormContent()}</div>\r\n\r\n        <div className=\"flex items-center justify-end pt-4 border-t border-slate-200 mt-6 space-x-3\">\r\n          <Button variant=\"outline\" onClick={onClose}>\r\n            {isReadOnly ? \"Close\" : \"Cancel\"}\r\n          </Button>\r\n          {!isReadOnly && (\r\n            <Button\r\n              onClick={handleSave}\r\n              className=\"bg-hospital-green-600 hover:bg-hospital-green-700\"\r\n            >\r\n              Save Changes\r\n            </Button>\r\n          )}\r\n        </div>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}\r\n","size_bytes":7116},"client/src/components/forms/formF.tsx":{"content":"import React, { useState } from \"react\";\r\n\r\ninterface Activity {\r\n  id: string;\r\n  title: string;\r\n  percent: number;\r\n}\r\n\r\ninterface Section {\r\n  name: string;\r\n  activities: Activity[];\r\n}\r\n\r\nconst sections: Section[] = [\r\n  {\r\n    name: \"آغاز فعالیت (10%)\",\r\n    activities: [\r\n      { id: \"uniform\", title: \"یونیفورم\", percent: 6 },\r\n      { id: \"coworkers\", title: \"برخورد با همکاران\", percent: 2 },\r\n      { id: \"patients\", title: \"برخورد با مریض\", percent: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"شیوه اخذ مشاهده (9%)\",\r\n    activities: [\r\n      { id: \"cc\", title: \"شهرت مریض\", percent: 2 },\r\n      { id: \"pi\", title: \"معاینه فزیکی\", percent: 2 },\r\n      {\r\n        id: \"postHistory\",\r\n        title: \"تجویز معاینات لابراتواری روتین\",\r\n        percent: 2,\r\n      },\r\n      { id: \"diagnosis\", title: \"تجویز معاینات وصفی و ضمیموی\", percent: 3 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"انجام مشوره طبی بموقع (6%)\",\r\n    activities: [{ id: \"consult\", title: \"انجام مشوره طبی بموقع\", percent: 6 }],\r\n  },\r\n  {\r\n    name: \"سعی در بلند بردن سطح دانش علمی و مسلکی (27%)\",\r\n    activities: [\r\n      { id: \"morning\", title: \"اشتراک فعال در راپو صبحانه\", percent: 6 },\r\n      { id: \"visits\", title: \"اشتراک فعال در ویزت‌ها\", percent: 6 },\r\n      { id: \"conferences\", title: \"اشتراک فعال در کنفرانس‌ها\", percent: 12 },\r\n      {\r\n        id: \"license\",\r\n        title: \"تقویه یکی از لیسانس‌های معتبر خارجی\",\r\n        percent: 1,\r\n      },\r\n      { id: \"computer\", title: \"قدرت استفاده از کمپیوتر و انترنت\", percent: 1 },\r\n      { id: \"press\", title: \"استفاده از نشرات مطبوع\", percent: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"دسپلین (24%)\",\r\n    activities: [\r\n      { id: \"attendance\", title: \"حاضر بودن\", percent: 6 },\r\n      { id: \"obedience\", title: \"اطاعت از اوامر معقول آمرمافوق\", percent: 6 },\r\n      { id: \"rules\", title: \"مراعات مقرره و لوایح تریننگ\", percent: 6 },\r\n      { id: \"duty\", title: \"اشتراک در نوکریوالی\", percent: 6 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"خصوصیات فردی (24%)\",\r\n    activities: [\r\n      { id: \"expression\", title: \"افاده بیان\", percent: 2 },\r\n      { id: \"initiative\", title: \"ابتکار سالم\", percent: 2 },\r\n      { id: \"leadership\", title: \"تصمیم و رهبری\", percent: 2 },\r\n      { id: \"honesty\", title: \"راستکاری و همکاری\", percent: 2 },\r\n      { id: \"resources\", title: \"استفاده معقول از منابع\", percent: 4 },\r\n      { id: \"responsibility\", title: \"مسٔولیت‌پذیری\", percent: 2 },\r\n      { id: \"evaluation\", title: \"تحلیل و ارزیابی\", percent: 2 },\r\n      { id: \"feedback\", title: \"انتقاد و پیشنهاد سازنده\", percent: 2 },\r\n      { id: \"individual\", title: \"رسیدگی به وضع فردی\", percent: 2 },\r\n      { id: \"social\", title: \"رابطه اجتماعی\", percent: 2 },\r\n      { id: \"position\", title: \"استفاده بجا از موقف کاری\", percent: 2 },\r\n    ],\r\n  },\r\n];\r\n\r\nconst months = Array.from({ length: 12 }, (_, i) => i + 1);\r\n\r\nconst ChecklistForm: React.FC = () => {\r\n  const [studentName, setStudentName] = useState(\"\");\r\n  const [fatherName, setFatherName] = useState(\"\");\r\n  const [year, setYear] = useState(\"\");\r\n  const [scores, setScores] = useState<Record<string, Record<number, number>>>(\r\n    {}\r\n  );\r\n\r\n  const handleScoreChange = (\r\n    activityId: string,\r\n    month: number,\r\n    value: number\r\n  ) => {\r\n    setScores((prev) => ({\r\n      ...prev,\r\n      [activityId]: {\r\n        ...prev[activityId],\r\n        [month]: value,\r\n      },\r\n    }));\r\n  };\r\n\r\n  const calculateTotal = (activity: Activity) => {\r\n    const monthlyScores = scores[activity.id] || {};\r\n    return Object.values(monthlyScores).reduce((sum, v) => sum + (v || 0), 0);\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n\r\n    const dataToSave = {\r\n      studentName,\r\n      fatherName,\r\n      year,\r\n      sections: sections.map((sec) => ({\r\n        name: sec.name,\r\n        activities: sec.activities.map((act) => {\r\n          const monthlyScores = months.map((m) => ({\r\n            month: m,\r\n            value: scores[act.id]?.[m] || 0,\r\n          }));\r\n          return {\r\n            id: act.id,\r\n            title: act.title,\r\n            percent: act.percent,\r\n            months: monthlyScores,\r\n            total: monthlyScores.reduce((sum, s) => sum + s.value, 0),\r\n          };\r\n        }),\r\n      })),\r\n    };\r\n\r\n    try {\r\n      const res = await fetch(\"http://localhost:5000/api/checklists\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(dataToSave),\r\n      });\r\n      if (!res.ok) throw new Error(\"Failed to save\");\r\n      alert(\"✅ ذخیره شد!\");\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(\"❌ خطا در ذخیره\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* عنوان ثابت بالا */}\r\n      <h1 className=\"text-2xl font-bold mb-4 text-center\">\r\n        چک لیست کاری و ارزیابی ماهوار ترینی‌ها\r\n      </h1>\r\n\r\n      <form\r\n        onSubmit={handleSubmit}\r\n        className=\"max-w-7xl mx-auto p-6 bg-gray-100 rounded-xl shadow-md min-h-[90vh] overflow-auto\"\r\n      >\r\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"نام ترینی\"\r\n            value={studentName}\r\n            onChange={(e) => setStudentName(e.target.value)}\r\n            className=\"border px-3 py-2 rounded-lg\"\r\n            required\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"ولد\"\r\n            value={fatherName}\r\n            onChange={(e) => setFatherName(e.target.value)}\r\n            className=\"border px-3 py-2 rounded-lg\"\r\n            required\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"سال آموزشی\"\r\n            value={year}\r\n            onChange={(e) => setYear(e.target.value)}\r\n            className=\"border px-3 py-2 rounded-lg\"\r\n            required\r\n          />\r\n        </div>\r\n\r\n        {/* جدول‌ها */}\r\n        <div className=\"overflow-auto max-h-[70vh]\">\r\n          {sections.map((section) => (\r\n            <div key={section.name} className=\"mb-10 min-w-[900px]\">\r\n              <h2 className=\"text-lg font-semibold mb-2\">{section.name}</h2>\r\n              <table className=\"w-full border text-center text-sm bg-white rounded-lg shadow-sm\">\r\n                <thead>\r\n                  <tr className=\"bg-gray-200\">\r\n                    <th className=\"p-2 border\">فعالیت</th>\r\n                    <th className=\"p-2 border\">فیصدی</th>\r\n                    {months.map((m) => (\r\n                      <th key={m} className=\"p-2 border\">\r\n                        {m}\r\n                      </th>\r\n                    ))}\r\n                    <th className=\"p-2 border\">مجموعه نمرات</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {section.activities.map((act) => (\r\n                    <tr key={act.id}>\r\n                      <td className=\"p-2 border\">{act.title}</td>\r\n                      <td className=\"p-2 border\">{act.percent}%</td>\r\n                      {months.map((m) => (\r\n                        <td key={m} className=\"p-2 border\">\r\n                          <input\r\n                            type=\"number\"\r\n                            min={0}\r\n                            max={act.percent}\r\n                            value={scores[act.id]?.[m] || \"\"}\r\n                            onChange={(e) =>\r\n                              handleScoreChange(\r\n                                act.id,\r\n                                m,\r\n                                Number(e.target.value)\r\n                              )\r\n                            }\r\n                            className=\"w-16 border rounded text-center\"\r\n                          />\r\n                        </td>\r\n                      ))}\r\n                      <td className=\"p-2 border font-bold\">\r\n                        {calculateTotal(act)}\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        <button\r\n          type=\"submit\"\r\n          className=\"mt-6 w-full bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 transition\"\r\n        >\r\n          ذخیره\r\n        </button>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChecklistForm;","size_bytes":8977},"client/src/components/forms/formI.tsx":{"content":"import React, { useState } from \"react\";\r\n\r\nconst RotationForm: React.FC = () => {\r\n  // اطلاعات کلی فرم (بالای صفحه)\r\n  const [header, setHeader] = useState({\r\n    studentName: \"\",\r\n    department: \"\",\r\n    rotationFrom: \"\",\r\n    rotationTo: \"\",\r\n    date: \"\",\r\n  });\r\n\r\n  // جدول فارسی\r\n  const persianTopics = [\r\n    \"اشتراک در کنفرانس\",\r\n    \"اشتراک در تدریس/سمینار\",\r\n    \"کارهای عملی و تیوری\",\r\n    \"اخلاق طبی\",\r\n    \"حفظ نظم/اشتراک\",\r\n  ];\r\n  const [persianRows, setPersianRows] = useState(\r\n    persianTopics.map(() => ({\r\n      mark: \"\",\r\n      teacherName: \"\",\r\n      teacherSign: \"\",\r\n      note: \"\",\r\n    }))\r\n  );\r\n\r\n  // جدول انگلیسی\r\n  const englishCompetencies = [\r\n    \"Describe basics of radiographic & MRI\",\r\n    \"Demonstrate indications for MRI\",\r\n    \"Describe anatomy of skull base\",\r\n    \"Demonstrate interpretation of chest imaging\",\r\n    \"Describe interpretation of brain & orbit CT\",\r\n    \"Demonstrate interpretation of MRI brain\",\r\n    \"Recognize common artifacts in MRI\",\r\n  ];\r\n  const [englishRows, setEnglishRows] = useState(\r\n    englishCompetencies.map(() => ({\r\n      week1: \"\",\r\n      week2: \"\",\r\n      week3: \"\",\r\n      week4: \"\",\r\n    }))\r\n  );\r\n\r\n  const handleHeaderChange = (field: string, value: string) => {\r\n    setHeader({ ...header, [field]: value });\r\n  };\r\n\r\n  const handlePersianChange = (row: number, field: string, value: string) => {\r\n    const updated = [...persianRows];\r\n    (updated as any)[row][field] = value;\r\n    setPersianRows(updated);\r\n  };\r\n\r\n  const handleEnglishChange = (row: number, field: string, value: string) => {\r\n    const updated = [...englishRows];\r\n    (updated as any)[row][field] = value;\r\n    setEnglishRows(updated);\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    const payload = { header, persianRows, englishRows };\r\n    try {\r\n      await fetch(\"/api/rotation-form\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(payload),\r\n      });\r\n      alert(\"✅ داده‌ها با موفقیت ذخیره شد\");\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(\"❌ خطا در ذخیره فرم\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form\r\n      onSubmit={handleSubmit}\r\n      className=\"max-w-7xl mx-auto p-6 space-y-8 text-sm\"\r\n    >\r\n      {/* اطلاعات کلی */}\r\n      <div className=\"grid grid-cols-2 gap-4 border p-4 rounded-lg shadow\">\r\n        <input\r\n          className=\"border p-2\"\r\n          placeholder=\"نام محصل / Student Name\"\r\n          value={header.studentName}\r\n          onChange={(e) => handleHeaderChange(\"studentName\", e.target.value)}\r\n        />\r\n        <input\r\n          className=\"border p-2\"\r\n          placeholder=\"دیپارتمنت / Department\"\r\n          value={header.department}\r\n          onChange={(e) => handleHeaderChange(\"department\", e.target.value)}\r\n        />\r\n        <input\r\n          className=\"border p-2\"\r\n          placeholder=\"Rotation From\"\r\n          value={header.rotationFrom}\r\n          onChange={(e) => handleHeaderChange(\"rotationFrom\", e.target.value)}\r\n        />\r\n        <input\r\n          className=\"border p-2\"\r\n          placeholder=\"Rotation To\"\r\n          value={header.rotationTo}\r\n          onChange={(e) => handleHeaderChange(\"rotationTo\", e.target.value)}\r\n        />\r\n        <input\r\n          className=\"border p-2 col-span-2\"\r\n          placeholder=\"Date / تاریخ\"\r\n          value={header.date}\r\n          onChange={(e) => handleHeaderChange(\"date\", e.target.value)}\r\n        />\r\n      </div>\r\n\r\n      {/* جدول فارسی */}\r\n      <div className=\"border p-4 rounded-lg shadow\">\r\n        <h2 className=\"font-bold mb-4 text-right\">فورم ارزیابی استیج</h2>\r\n        <table className=\"w-full border text-right\">\r\n          <thead>\r\n            <tr className=\"bg-gray-100\">\r\n              <th className=\"border p-2\">موضوع کنفرانس</th>\r\n              <th className=\"border p-2\">نمره داده شده</th>\r\n              <th className=\"border p-2\">نام استاد</th>\r\n              <th className=\"border p-2\">امضای استاد</th>\r\n              <th className=\"border p-2\">ملاحظات</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {persianRows.map((row, i) => (\r\n              <tr key={i}>\r\n                <td className=\"border p-2\">{persianTopics[i]}</td>\r\n                {[\"mark\", \"teacherName\", \"teacherSign\", \"note\"].map((f) => (\r\n                  <td key={f} className=\"border p-1\">\r\n                    <input\r\n                      className=\"w-full p-1 border\"\r\n                      value={(row as any)[f]}\r\n                      onChange={(e) =>\r\n                        handlePersianChange(i, f, e.target.value)\r\n                      }\r\n                    />\r\n                  </td>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      {/* جدول انگلیسی */}\r\n      <div className=\"border p-4 rounded-lg shadow\">\r\n        <h2 className=\"font-bold mb-4\">Rotation Competencies</h2>\r\n        <table className=\"w-full border text-center\">\r\n          <thead>\r\n            <tr className=\"bg-gray-100\">\r\n              <th className=\"border p-2\">Competence</th>\r\n              <th className=\"border p-2\">1st Week</th>\r\n              <th className=\"border p-2\">2nd Week</th>\r\n              <th className=\"border p-2\">3rd Week</th>\r\n              <th className=\"border p-2\">4th Week</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {englishRows.map((row, i) => (\r\n              <tr key={i}>\r\n                <td className=\"border p-2 text-left\">\r\n                  {englishCompetencies[i]}\r\n                </td>\r\n                {[\"week1\", \"week2\", \"week3\", \"week4\"].map((f) => (\r\n                  <td key={f} className=\"border p-1\">\r\n                    <input\r\n                      className=\"w-full p-1 border text-center\"\r\n                      value={(row as any)[f]}\r\n                      onChange={(e) =>\r\n                        handleEnglishChange(i, f, e.target.value)\r\n                      }\r\n                    />\r\n                  </td>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      <button\r\n        type=\"submit\"\r\n        className=\"bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700\"\r\n      >\r\n        ذخیره فرم\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default RotationForm;\r\n","size_bytes":6688},"client/src/components/forms/formJ.tsx":{"content":"import React, { useState } from \"react\";\r\n\r\nconst teacherActivities: Record<string, string[]> = {\r\n  \"آغاز فعالیت\": [\"Uniform\", \"Salam\", \"Introduction\", \"Patient add\"],\r\n  \"شیوه اخذ مشاهده (History Taking)\": [\r\n    \"CC\",\r\n    \"PI\",\r\n    \"Post History\",\r\n    \"Pers History\",\r\n    \"S.E State\",\r\n    \"Drug History\",\r\n  ],\r\n  \"Review of System\": [\"Head & Neck\", \"RS\", \"CVS\", \"GIS\", \"UGS\", \"CNS\", \"ENT\"],\r\n  \"Physical Examination\": [\r\n    \"Head & Neck\",\r\n    \"RS\",\r\n    \"CVS\",\r\n    \"GIS\",\r\n    \"UGS\",\r\n    \"Local Status\",\r\n    \"Extremities\",\r\n  ],\r\n  \"Impression / Action Plan\": [\"Impression\", \"Action Plan\", \"Drug Order\"],\r\n  Procedure: [\r\n    \"IP\",\r\n    \"Mask, Hat, Gloves\",\r\n    \"Surgical Instrument Handling\",\r\n    \"Kind of Procedure\",\r\n  ],\r\n};\r\n\r\nconst TeacherActivityForm: React.FC = () => {\r\n  const [teachers, setTeachers] = useState<string[]>(Array(5).fill(\"\"));\r\n  const [data, setData] = useState(() =>\r\n    Object.entries(teacherActivities).flatMap(([section, items]) =>\r\n      items.map((item) => ({\r\n        section,\r\n        activity: item,\r\n        evaluators: Array(5).fill(false),\r\n      }))\r\n    )\r\n  );\r\n\r\n  const handleTeacherName = (index: number, value: string) => {\r\n    setTeachers((prev) => prev.map((t, i) => (i === index ? value : t)));\r\n  };\r\n\r\n  const toggle = (rowIdx: number, teacherIdx: number) => {\r\n    setData((prev) =>\r\n      prev.map((row, i) =>\r\n        i === rowIdx\r\n          ? {\r\n              ...row,\r\n              evaluators: row.evaluators.map((v, j) =>\r\n                j === teacherIdx ? !v : v\r\n              ),\r\n            }\r\n          : row\r\n      )\r\n    );\r\n  };\r\n\r\n  // تابع جدید برای تیک / حذف همه برای هر استاد\r\n  const toggleAllForTeacher = (teacherIdx: number) => {\r\n    const allChecked = data.every((row) => row.evaluators[teacherIdx]);\r\n    setData((prev) =>\r\n      prev.map((row) => ({\r\n        ...row,\r\n        evaluators: row.evaluators.map((v, j) =>\r\n          j === teacherIdx ? !allChecked : v\r\n        ),\r\n      }))\r\n    );\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    const payload = { teachers, activities: data };\r\n\r\n    try {\r\n      const res = await fetch(\"http://localhost:5000/api/teacher-activities\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(payload),\r\n      });\r\n      if (!res.ok) throw new Error(\"Failed to save\");\r\n      const result = await res.json();\r\n      console.log(\"Saved:\", result);\r\n      alert(\"فرم با موفقیت ذخیره شد ✅\");\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(\"خطا در ذخیره داده ❌\");\r\n    }\r\n  };\r\n\r\n  const grouped = Object.entries(teacherActivities);\r\n\r\n  return (\r\n    <form\r\n      onSubmit={handleSubmit}\r\n      className=\"max-w-6xl mx-auto p-4 bg-gray-100 rounded-xl shadow-md max-h-[85vh] overflow-auto\"\r\n    >\r\n      <h1 className=\"text-2xl font-bold mb-4 text-center\">\r\n        چک لیست امتحان عملی و نظری ترینی‌های شفاخانه نور\r\n      </h1>\r\n\r\n      {/* نام استادها و دکمه تیک همه */}\r\n      <div className=\"grid grid-cols-1 sm:grid-cols-5 gap-2 mb-6 items-center\">\r\n        {teachers.map((t, i) => (\r\n          <div key={i} className=\"flex flex-col items-center\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder={`نام استاد ${i + 1}`}\r\n              value={t}\r\n              onChange={(e) => handleTeacherName(i, e.target.value)}\r\n              className=\"border rounded px-2 py-1 text-center mb-1\"\r\n            />\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => toggleAllForTeacher(i)}\r\n              className=\"text-sm bg-gray-300 hover:bg-gray-400 px-2 py-1 rounded\"\r\n            >\r\n              تیک همه / حذف همه\r\n            </button>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* جدول اصلی */}\r\n      <table className=\"table-auto border-collapse border border-gray-300 w-full text-center text-sm\">\r\n        <thead>\r\n          <tr className=\"bg-gray-200\">\r\n            <th className=\"border px-2 py-1\">بخش</th>\r\n            <th className=\"border px-2 py-1\">فعالیت</th>\r\n            {teachers.map((t, idx) => (\r\n              <th key={idx} className=\"border px-2 py-1\">\r\n                {t || `استاد ${idx + 1}`}\r\n              </th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {grouped.map(([section, items]) =>\r\n            items.map((item, rowIndex) => {\r\n              const dataIdx = data.findIndex(\r\n                (d) => d.section === section && d.activity === item\r\n              );\r\n              return (\r\n                <tr key={section + item} className=\"even:bg-gray-50\">\r\n                  {rowIndex === 0 && (\r\n                    <td\r\n                      rowSpan={items.length}\r\n                      className=\"border px-2 py-1 font-medium whitespace-nowrap\"\r\n                    >\r\n                      {section}\r\n                    </td>\r\n                  )}\r\n                  <td className=\"border px-2 py-1\">{item}</td>\r\n                  {teachers.map((_, tIdx) => (\r\n                    <td key={tIdx} className=\"border px-2 py-1\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        checked={data[dataIdx].evaluators[tIdx]}\r\n                        onChange={() => toggle(dataIdx, tIdx)}\r\n                      />\r\n                    </td>\r\n                  ))}\r\n                </tr>\r\n              );\r\n            })\r\n          )}\r\n        </tbody>\r\n      </table>\r\n\r\n      <button\r\n        type=\"submit\"\r\n        className=\"mt-6 w-full bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 transition\"\r\n      >\r\n        ذخیره\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default TeacherActivityForm;\r\n","size_bytes":5943},"client/src/components/forms/teacher-form-dialog.tsx":{"content":"import { useForm } from \"react-hook-form\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { useEffect } from \"react\";\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\r\nimport { InsertTeacher, insertTeacherSchema } from \"@shared/schema\";\r\n\r\ninterface TeacherFormDialogProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  onSubmit: (data: InsertTeacher) => void;\r\n  title: string;\r\n  defaultValues?: Partial<InsertTeacher>;\r\n  isSubmitting: boolean;\r\n}\r\n\r\nexport default function TeacherFormDialog({\r\n  isOpen,\r\n  onClose,\r\n  onSubmit,\r\n  title,\r\n  defaultValues,\r\n  isSubmitting\r\n}: TeacherFormDialogProps) {\r\n  const form = useForm<InsertTeacher>({\r\n    resolver: zodResolver(insertTeacherSchema),\r\n    defaultValues: {\r\n      name: \"\",\r\n      lostname: \"\",\r\n      fatherName: \"\",\r\n      grandfatherName: \"\",\r\n      academicRank: \"\",\r\n      rankAchievementDate: new Date(),\r\n      trainerAppointmentDate: new Date(),\r\n      gender: \"\",\r\n      province: \"\",\r\n      subject: \"\",\r\n      position: \"\",\r\n      hospital: \"\",\r\n      dateOfBirth: new Date(),\r\n      idNumber: \"\",\r\n      dutyStartDate: new Date(),\r\n      contactInfo: \"\",\r\n      whatsappNumber: \"\",\r\n      emailAddress: \"\",\r\n      postCode: \"\",\r\n      appointmentType: \"\",\r\n      department: \"\",\r\n      experience: 0,\r\n      status: \"active\",\r\n      profileImageUrl: \"\",\r\n    },\r\n  });\r\n\r\n  // Reset form when dialog opens or defaultValues change\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      if (defaultValues) {\r\n        // Editing mode - populate with existing values\r\n        form.reset({\r\n          name: defaultValues.name || \"\",\r\n          lostname: defaultValues.lostname || \"\",\r\n          fatherName: defaultValues.fatherName || \"\",\r\n          grandfatherName: defaultValues.grandfatherName || \"\",\r\n          academicRank: defaultValues.academicRank || \"\",\r\n          rankAchievementDate: defaultValues.rankAchievementDate || new Date(),\r\n          trainerAppointmentDate: defaultValues.trainerAppointmentDate || new Date(),\r\n          gender: defaultValues.gender || \"\",\r\n          province: defaultValues.province || \"\",\r\n          subject: defaultValues.subject || \"\",\r\n          position: defaultValues.position || \"\",\r\n          hospital: defaultValues.hospital || \"\",\r\n          dateOfBirth: defaultValues.dateOfBirth || new Date(),\r\n          idNumber: defaultValues.idNumber || \"\",\r\n          dutyStartDate: defaultValues.dutyStartDate || new Date(),\r\n          contactInfo: defaultValues.contactInfo || \"\",\r\n          whatsappNumber: defaultValues.whatsappNumber || \"\",\r\n          emailAddress: defaultValues.emailAddress || \"\",\r\n          postCode: defaultValues.postCode || \"\",\r\n          appointmentType: defaultValues.appointmentType || \"\",\r\n          department: defaultValues.department || \"\",\r\n          experience: defaultValues.experience || 0,\r\n          status: defaultValues.status || \"active\",\r\n          profileImageUrl: defaultValues.profileImageUrl || \"\",\r\n        });\r\n      } else {\r\n        // Add mode - reset to empty values\r\n        form.reset({\r\n          name: \"\",\r\n          lostname: \"\",\r\n          fatherName: \"\",\r\n          grandfatherName: \"\",\r\n          academicRank: \"\",\r\n          rankAchievementDate: new Date(),\r\n          trainerAppointmentDate: new Date(),\r\n          gender: \"\",\r\n          province: \"\",\r\n          subject: \"\",\r\n          position: \"\",\r\n          hospital: \"\",\r\n          dateOfBirth: new Date(),\r\n          idNumber: \"\",\r\n          dutyStartDate: new Date(),\r\n          contactInfo: \"\",\r\n          whatsappNumber: \"\",\r\n          emailAddress: \"\",\r\n          postCode: \"\",\r\n          appointmentType: \"\",\r\n          department: \"\",\r\n          experience: 0,\r\n          status: \"active\",\r\n          profileImageUrl: \"\",\r\n        });\r\n      }\r\n    }\r\n  }, [isOpen, defaultValues, form]);\r\n\r\n  const handleSubmit = (data: InsertTeacher) => {\r\n    console.log('Form submission data:', data);\r\n    console.log('Form errors:', form.formState.errors);\r\n    onSubmit(data);\r\n  };\r\n\r\n  return (\r\n    <Dialog open={isOpen} onOpenChange={onClose}>\r\n      <DialogContent data-testid=\"dialog-teacher-form \"\r\n        className=\"max-h-[90vh] overflow-y-auto max-w-4xl w-full\">\r\n        <DialogHeader>\r\n          <DialogTitle  data-testid=\"text-teacher-form-title\">{title}</DialogTitle>\r\n        </DialogHeader>\r\n\r\n        <form onSubmit={form.handleSubmit(handleSubmit)} className=\"mt-4\">\r\n          <div className=\"grid grid-cols-2 gap-4 space-y-0\">\r\n            {/* First Column */}\r\n            <div className=\"space-y-4\">\r\n              <div>\r\n                <Label htmlFor=\"name\">نام</Label>\r\n                <Input\r\n                className=\"w-full border rounded-md p-2 focus:outline-none focus:ring-2 focus:ring-blue-400\"\r\n\r\n                  id=\"name\"\r\n                  {...form.register(\"name\")}\r\n                  placeholder=\"نام را وارد کنید\"\r\n                  data-testid=\"input-teacher-name\"\r\n                />\r\n                {form.formState.errors.name && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.name.message}</p>\r\n                )}\r\n              </div>\r\n                <div>\r\n                <Label htmlFor=\"lostname\">تخلص</Label>\r\n                <Input\r\n                  id=\"lostname\"\r\n                  {...form.register(\"lostname\")}\r\n                  placeholder=\"تخلص را وارد کنید\"\r\n                  data-testid=\"input-teacher-lostname\"\r\n                />\r\n                {form.formState.errors.lostname && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.lostname.message}</p>\r\n                )}\r\n              </div>\r\n              \r\n              <div>\r\n                <Label htmlFor=\"fatherName\">نام پدر</Label>\r\n                <Input\r\n                  id=\"fatherName\"\r\n                  {...form.register(\"fatherName\")}\r\n                  placeholder=\"نام پدر را وارد کنید\"\r\n                />\r\n                {form.formState.errors.fatherName && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.fatherName.message}</p>\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"grandfatherName\">ولدیت</Label>\r\n                <Input\r\n                  id=\"grandfatherName\"\r\n                  {...form.register(\"grandfatherName\")}\r\n                  placeholder=\"نام پدر کلان را وارد کنید\"\r\n                />\r\n                {form.formState.errors.grandfatherName && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.grandfatherName.message}</p>\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"academicRank\">رتبه علمی</Label>\r\n                <Input\r\n                  id=\"academicRank\"\r\n                  {...form.register(\"academicRank\")}\r\n                  placeholder=\"رتبه علمی را وارد کنید\"\r\n                />\r\n                {form.formState.errors.academicRank && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.academicRank.message}</p>\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"rankAchievementDate\">تاریخ اخذ رتبه</Label>\r\n                <Input\r\n                  id=\"rankAchievementDate\"\r\n                  type=\"date\"\r\n                  {...form.register(\"rankAchievementDate\", { valueAsDate: true })}\r\n                />\r\n                {form.formState.errors.rankAchievementDate && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.rankAchievementDate.message}</p>\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"trainerAppointmentDate\">تاریخ تقرر به صفت ترینر</Label>\r\n                <Input\r\n                  id=\"trainerAppointmentDate\"\r\n                  type=\"date\"\r\n                  {...form.register(\"trainerAppointmentDate\", { valueAsDate: true })}\r\n                />\r\n                {form.formState.errors.trainerAppointmentDate && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.trainerAppointmentDate.message}</p>\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"gender\">جنسیت</Label>\r\n                <Select value={form.watch(\"gender\")} onValueChange={(value) => form.setValue(\"gender\", value)}>\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder=\"جنسیت را انتخاب کنید\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"مرد\">مرد</SelectItem>\r\n                    <SelectItem value=\"زن\">زن</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n                {form.formState.errors.gender && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.gender.message}</p>\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n  <Label htmlFor=\"province\">ولایت</Label>\r\n  <select\r\n    id=\"province\"\r\n    {...form.register(\"province\", { required: \"لطفا یک ولایت انتخاب کنید\" })}\r\n    className=\"w-full border rounded-lg p-2 mt-1 focus:outline-none focus:ring-2 focus:ring-blue-400 bg-gray-100\"\r\n  >\r\n    <option value=\"\">یک ولایت انتخاب کنید</option>\r\n    <option value=\"Badakhshan\">بدخشان</option>\r\n    <option value=\"Badghis\">بادغیس</option>\r\n    <option value=\"Baghlan\">بغلان</option>\r\n    <option value=\"Balkh\">بلخ</option>\r\n    <option value=\"Bamyan\">بامیان</option>\r\n    <option value=\"Daykundi\">دایکندی</option>\r\n    <option value=\"Farah\">فراه</option>\r\n    <option value=\"Faryab\">فاریاب</option>\r\n    <option value=\"Ghazni\">غزنی</option>\r\n    <option value=\"Ghor\">غور</option>\r\n    <option value=\"Helmand\">هلمند</option>\r\n    <option value=\"Herat\">هرات</option>\r\n    <option value=\"Jowzjan\">جوزجان</option>\r\n    <option value=\"Kabul\">کابل</option>\r\n    <option value=\"Kandahar\">کندهار</option>\r\n    <option value=\"Kapisa\">کاپیسا</option>\r\n    <option value=\"Khost\">خوست</option>\r\n    <option value=\"Kunar\">کنر</option>\r\n    <option value=\"Kunduz\">کندز</option>\r\n    <option value=\"Laghman\">لغمان</option>\r\n    <option value=\"Logar\">لوگر</option>\r\n    <option value=\"Nangarhar\">ننگرهار</option>\r\n    <option value=\"Nimroz\">نیمروز</option>\r\n    <option value=\"Nuristan\">نورستان</option>\r\n    <option value=\"Paktia\">پکتیا</option>\r\n    <option value=\"Paktika\">پکتیکا</option>\r\n    <option value=\"Panjshir\">پنجشیر</option>\r\n    <option value=\"Parwan\">پروان</option>\r\n    <option value=\"Samangan\">سمنگان</option>\r\n    <option value=\"Sar-e Pol\">سرپل</option>\r\n    <option value=\"Takhar\">تخار</option>\r\n    <option value=\"Urozgan\">ارزگان</option>\r\n    <option value=\"Wardak\">میدان وردک</option>\r\n    <option value=\"Zabul\">زابل</option>\r\n  </select>\r\n\r\n  {form.formState.errors.province && (\r\n    <p className=\"text-red-500 text-sm mt-1\">\r\n      {form.formState.errors.province.message}\r\n    </p>\r\n  )}\r\n</div>\r\n\r\n\r\n              <div>\r\n                <Label htmlFor=\"subject\">رشته</Label>\r\n                <Input\r\n                  id=\"subject\"\r\n                  {...form.register(\"subject\")}\r\n                  placeholder=\"رشته تخصصی را وارد کنید\"\r\n                  data-testid=\"input-teacher-subject\"\r\n                />\r\n                {form.formState.errors.subject && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.subject.message}</p>\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"position\">وظیفه</Label>\r\n                <Input\r\n                  id=\"position\"\r\n                  {...form.register(\"position\")}\r\n                   placeholder=\"وظیفه را وارد کنید\"\r\n                />\r\n                {form.formState.errors.position && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.position.message}</p>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Second Column */}\r\n            <div className=\"space-y-4\">\r\n              <div>\r\n                <Label htmlFor=\"hospital\">شفاخانه</Label>\r\n                <Input\r\n                  id=\"hospital\"\r\n                  {...form.register(\"hospital\")}\r\n                  placeholder=\"نام شفاخانه را وارد کنید\"\r\n                />\r\n                {form.formState.errors.hospital && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.hospital.message}</p>\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"dateOfBirth\">تاریخ تولد</Label>\r\n                <Input\r\n                  id=\"dateOfBirth\"\r\n                  type=\"date\"\r\n                  {...form.register(\"dateOfBirth\", { valueAsDate: true })}\r\n                />\r\n                {form.formState.errors.dateOfBirth && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.dateOfBirth.message}</p>\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"idNumber\">نمبر تذکره</Label>\r\n                <Input\r\n                  id=\"idNumber\"\r\n                  {...form.register(\"idNumber\")}\r\n                  placeholder=\"نمبر تذکره را وارد کنید\"\r\n                />\r\n                {form.formState.errors.idNumber && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.idNumber.message}</p>\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"dutyStartDate\">تاریخ اغاز وظیفه</Label>\r\n                <Input\r\n                  id=\"dutyStartDate\"\r\n                  type=\"date\"\r\n                  {...form.register(\"dutyStartDate\", { valueAsDate: true })}\r\n                />\r\n                {form.formState.errors.dutyStartDate && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.dutyStartDate.message}</p>\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"contactInfo\">شماره تماس</Label>\r\n                <Input\r\n                  id=\"contactInfo\"\r\n                  {...form.register(\"contactInfo\")}\r\n                  placeholder=\"شماره تماس را وارد کنید\"\r\n                  data-testid=\"input-teacher-contact\"\r\n                />\r\n                {form.formState.errors.contactInfo && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.contactInfo.message}</p>\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"whatsappNumber\">شماره واتس اپ</Label>\r\n                <Input\r\n                  id=\"whatsappNumber\"\r\n                  {...form.register(\"whatsappNumber\")}\r\n                  placeholder=\"شماره واتس اپ را وارد کنید\"\r\n                />\r\n                {form.formState.errors.whatsappNumber && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.whatsappNumber.message}</p>\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"emailAddress\">ایمیل ادرس</Label>\r\n                <Input\r\n                  id=\"emailAddress\"\r\n                  type=\"email\"\r\n                  {...form.register(\"emailAddress\")}\r\n                  placeholder=\"ایمیل ادرس را وارد کنید\"\r\n                />\r\n                {form.formState.errors.emailAddress && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.emailAddress.message}</p>\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"postCode\">شماره وکد بست</Label>\r\n                <Input\r\n                  id=\"postCode\"\r\n                  {...form.register(\"postCode\")}\r\n                  placeholder=\"شماره وکد بست را وارد کنید\"\r\n                />\r\n                {form.formState.errors.postCode && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.postCode.message}</p>\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n                \r\n  <Label htmlFor=\"appointmentType\">نوع تقرری</Label>\r\n  <select\r\n    id=\"appointmentType\"\r\n    {...form.register(\"appointmentType\", { required: \"لطفاً نوع تقرری را انتخاب کنید\" })}\r\n    className=\"w-full border rounded-md p-2 mt-1 bg-gray-100\"\r\n  >\r\n    <option value=\"\">نوع تقرری را انتخاب کنید</option>\r\n    <option value=\"رقابت آزاد\">رقابت آزاد</option>\r\n    <option value=\"سرپرست\">سرپرست</option>\r\n    <option value=\"حکمی\">حکمی</option>\r\n  </select>\r\n\r\n  {form.formState.errors.appointmentType && (\r\n    <p className=\"text-red-500 text-sm mt-1 \">\r\n      {form.formState.errors.appointmentType.message}\r\n    </p>\r\n  )}\r\n</div>\r\n\r\n\r\n              <div>\r\n                <Label htmlFor=\"department\">ریاست</Label>\r\n                <Input\r\n                  id=\"department\"\r\n                  {...form.register(\"department\")}\r\n                  placeholder=\"نام ریاست را وارد کنید\"\r\n                />\r\n                {form.formState.errors.department && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.department.message}</p>\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"experience\">سابقه کار (سال)</Label>\r\n                <Input\r\n                  id=\"experience\"\r\n                  type=\"number\"\r\n                  {...form.register(\"experience\", { valueAsNumber: true })}\r\n                  placeholder=\"سابقه کار را وارد کنید\"\r\n                />\r\n                {form.formState.errors.experience && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.experience.message}</p>\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n              <Label htmlFor=\"status\">وضعیت فعلی</Label>\r\n              <Select value={form.watch(\"status\")} onValueChange={(value) => form.setValue(\"status\", value)}>\r\n                <SelectTrigger>\r\n                  <SelectValue placeholder=\"وضعیت فعلی را انتخاب کنید\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"active\">برحال</SelectItem>\r\n                  <SelectItem value=\"inactive\">منفک</SelectItem>\r\n                  \r\n                </SelectContent>\r\n              </Select>\r\n              {form.formState.errors.status && (\r\n                <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.status.message}</p>\r\n              )}\r\n            </div>\r\n            </div>\r\n          </div>\r\n\r\n    \r\n          <div className=\"flex items-center justify-end pt-4 border-t border-slate-200 mt-6 space-x-3 rtl:space-x-reverse\">\r\n            <Button variant=\"outline\" type=\"button\" onClick={onClose} data-testid=\"button-cancel-teacher-form\">\r\n              لغو\r\n            </Button>\r\n            <Button\r\n              type=\"submit\"\r\n              disabled={isSubmitting}\r\n              className=\"bg-hospital-green-600 hover:bg-hospital-green-700\"\r\n              data-testid=\"button-submit-teacher-form\"\r\n              onClick={() => {\r\n                console.log('Submit button clicked');\r\n                console.log('Form valid:', form.formState.isValid);\r\n                console.log('Form errors:', form.formState.errors);\r\n              }}\r\n            >\r\n              {isSubmitting ? 'در حال ذخیره...' : 'ذخیره'}\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}","size_bytes":20571},"client/src/components/layout/header.tsx":{"content":"import React from \"react\";\n\nconst Header: React.FC = () => {\n  return (\n    <header className=\"fixed top-0 left-0 right-0 z-50 flex items-center justify-center bg-green-600 text-white px-6 py-3 shadow-md\">\n      <div className=\"flex items-center gap-3\">\n        <img\n          src=\"/logo.svg\"\n          alt=\"Logo\"\n          className=\"h-10 w-10\"\n        />\n        <h1 className=\"text-xl font-bold tracking-wide\">\n          سیستم مدیریتی ترینری شفاخانه چشم نور\n        </h1>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","size_bytes":565},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Users, Presentation, FileText, BarChart3, LogOut, Settings, Settings2, Settings2Icon, SettingsIcon, InfoIcon, FormInputIcon } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport setting from \"@/pages/setting\"; \nimport { info } from \"console\";\nimport { Form } from \"../ui/form\";\n\nconst navigation = [\n  { name: 'ترینری', href: '/residents', icon: Users },\n  { name: 'استادان', href: '/teachers', icon: Users },\n  { name: 'گزارشات', href: '/reports', icon: BarChart3 },\n  { name: 'فورم ها', href: '/forms', icon: FormInputIcon },\n  // { name: 'تنظیمات', href: '/setting', icon: SettingsIcon },\n  // { name: 'درباره ما', href: '/about', icon: InfoIcon },\n];\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n  const { user } = useAuth();\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  return (\n    <div className=\"fixed inset-y-0 right-0 z-50 w-64 bg-white shadow-lg\">\n      <div className=\"flex flex-col h-full\">\n        {/* Logo */}\n        <div className=\"flex items-center justify-center h-16 px-4 bg-hospital-green-600\">\n          <svg\n            className=\"h-8 w-8 text-white\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            viewBox=\"0 0 24 24\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4\"\n            />\n          </svg>\n        </div>\n        \n        {/* User Info */}\n        <div className=\"px-4 py-4 border-b border-slate-200\">\n          <div className=\"flex items-center\">\n            <Avatar className=\"h-10 w-10\">\n              <AvatarImage src={user?.profileImageUrl || ''} alt=\"User profile\" />\n              <AvatarFallback className=\"bg-hospital-green-100 text-hospital-green-600\">\n                {user?.firstName?.[0] || user?.email?.[0] || 'U'}\n              </AvatarFallback>\n            </Avatar>\n            <div className=\"mr-3\">\n              <p className=\"text-sm font-medium text-slate-900\" data-testid=\"text-user-name\">\n                {user?.firstName || user?.email || 'User'}\n              </p>\n              <p className=\"text-xs text-slate-500 capitalize\" data-testid=\"text-user-role\">\n                {user?.role || 'User'}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Navigation */}\n        <nav className=\"flex-1 px-4 py-4 space-y-2\">\n          {navigation.map((item) => {\n            const Icon = item.icon;\n            const isActive = location === item.href || location.startsWith(item.href + '/');\n            \n            return (\n              <Link key={item.name} href={item.href}>\n                <div className={cn(\n                  \"flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors\",\n                  isActive\n                    ? \"bg-hospital-green-50 text-hospital-green-700\"\n                    : \"text-slate-600 hover:bg-slate-50 hover:text-slate-900\"\n                )} data-testid={`link-${item.name.toLowerCase()}`}>\n                  <Icon className=\"ml-3 h-5 w-5\" />\n                  {item.name}\n                </div>\n              </Link>\n            );\n          })}\n        </nav>\n\n        {/* Footer */}\n        <div className=\"px-4 py-4 border-t border-slate-200\">\n          <Button\n            onClick={handleLogout}\n            variant=\"ghost\"\n            className=\"w-full flex items-center justify-start px-3 py-2 text-sm font-medium text-slate-600 hover:bg-slate-50 hover:text-slate-900\"\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"ml-3 h-5 w-5\" />\n            خروج\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import { useState } from \"react\";\n// import { Link, useLocation } from \"wouter\";\n// import { cn } from \"@/lib/utils\";\n// import { useAuth } from \"@/hooks/useAuth\";\n// import { Users, BarChart3, FormInputIcon, LogOut } from \"lucide-react\";\n// import { Button } from \"@/components/ui/button\";\n// import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n\n// const navigation = [\n//   { name: 'ترینری', href: '/residents', icon: Users },\n//   { name: 'استادان', href: '/teachers', icon: Users },\n//   { name: 'گزارشات', href: '/reports', icon: BarChart3 },\n//   { name: 'فورم ها', href: '/forms', icon: FormInputIcon },\n// ];\n\n// export default function Sidebar() {\n//   const [location] = useLocation();\n//   const { user } = useAuth();\n//   const [isOpen, setIsOpen] = useState(true); // 🔹 کنترل باز/بسته بودن سایدبار\n\n//   const handleLogout = () => {\n//     window.location.href = \"/api/logout\";\n//   };\n\n//   return (\n//     <div\n//       className={cn(\n//         \"fixed inset-y-0 right-0 z-50 bg-white shadow-lg transition-all duration-300\",\n//         isOpen ? \"w-64\" : \"w-16\"\n//       )}\n//     >\n//       <div className=\"flex flex-col h-full\">\n//         {/* Toggle Button */}\n//         <div className=\"flex justify-between items-center h-16 px-2 bg-hospital-green-600\">\n//           {isOpen && <span className=\"text-white font-semibold\">سیستم مدیریت شفاخانه</span>}\n//           <Button\n//             onClick={() => setIsOpen(!isOpen)}\n//             variant=\"ghost\"\n//             size=\"sm\"\n//             className=\"text-white\"\n//           >\n//             {isOpen ? '<' : '>'}\n//           </Button>\n//         </div>\n\n//         {/* User Info */}\n//         {isOpen && (\n//           <div className=\"px-4 py-4 border-b border-slate-200\">\n//             <div className=\"flex items-center\">\n//               <Avatar className=\"h-10 w-10\">\n//                 <AvatarImage src={user?.profileImageUrl || ''} alt=\"User profile\" />\n//                 <AvatarFallback className=\"bg-hospital-green-100 text-hospital-green-600\">\n//                   {user?.firstName?.[0] || user?.email?.[0] || 'U'}\n//                 </AvatarFallback>\n//               </Avatar>\n//               <div className=\"mr-3\">\n//                 <p className=\"text-sm font-medium text-slate-900\">{user?.firstName || user?.email || 'User'}</p>\n//                 <p className=\"text-xs text-slate-500 capitalize\">{user?.role || 'User'}</p>\n//               </div>\n//             </div>\n//           </div>\n//         )}\n\n//         {/* Navigation */}\n//         <nav className=\"flex-1 px-2 py-4 space-y-2\">\n//           {navigation.map((item) => {\n//             const Icon = item.icon;\n//             const isActive = location === item.href || location.startsWith(item.href + '/');\n\n//             return (\n//               <Link key={item.name} href={item.href}>\n//                 <a\n//                   className={cn(\n//                     \"flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors\",\n//                     isActive\n//                       ? \"bg-hospital-green-50 text-hospital-green-700\"\n//                       : \"text-slate-600 hover:bg-slate-50 hover:text-slate-900\"\n//                   )}\n//                 >\n//                   <Icon className=\"ml-3 h-5 w-5\" />\n//                   {isOpen && <span>{item.name}</span>}\n//                 </a>\n//               </Link>\n//             );\n//           })}\n//         </nav>\n\n//         {/* Footer */}\n//         <div className=\"px-2 py-4 border-t border-slate-200\">\n//           <Button\n//             onClick={handleLogout}\n//             variant=\"ghost\"\n//             className=\"w-full flex items-center justify-center px-3 py-2 text-sm font-medium text-slate-600 hover:bg-slate-50 hover:text-slate-900\"\n//           >\n//             <LogOut className=\"ml-2 h-5 w-5\" />\n//             {isOpen && <span>خروج</span>}\n//           </Button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n","size_bytes":8268},"client/src/components/reports/report-cards.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Users, FileText, AlertTriangle, Award, Presentation, User } from \"lucide-react\";\n\nconst reports = [\n  {\n    title: \"گزارشات ترینری\",\n    // description: \"Comprehensive resident profiles with forms completion status\",\n    icon: Users,\n    color: \"bg-hospital-green-100 text-hospital-green-600\",\n    buttonColor: \"bg-hospital-green-600 hover:bg-hospital-green-700\",\n  },\n  {\n    title: \"گزارشات فورم ها\", \n    // description: \"Training form completion tracking and analysis\",\n    icon: FileText,\n    color: \"bg-blue-100 text-blue-600\",\n    buttonColor: \"bg-blue-600 hover:bg-blue-700\",\n  },\n  // {\n  //   title: \"گزارشات مجازات\",\n  //   // description: \"Actions and incidents tracking across all residents\",\n  //   icon: AlertTriangle,\n  //   color: \"bg-red-100 text-red-600\",\n  //   buttonColor: \"bg-red-600 hover:bg-red-700\",\n  // },\n  // {\n  //   title: \"گزارشات مکافات\",\n  //   // description: \"Achievement and recognition tracking system\",\n  //   icon: Award,\n  //   color: \"bg-yellow-100 text-yellow-600\",\n  //   buttonColor: \"bg-yellow-600 hover:bg-yellow-700\",\n  // },\n  {\n    title: \"گزارشات استادان\",\n    // description: \"Faculty member profiles and supervision tracking\",\n    icon: Users,\n    color: \"bg-purple-100 text-purple-600\",\n    buttonColor: \"bg-purple-600 hover:bg-purple-700\",\n  },\n];\n\nexport default function ReportCards() {\n  const handleGenerateReport = (reportType: string) => {\n    // TODO: Implement report generation\n    console.log(`Generating ${reportType} report`);\n  };\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n      {reports.map((report) => {\n        const Icon = report.icon;\n        return (\n          <Card key={report.title} className=\"hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-6\">\n              \n              <div className=\"flex items-center mb-4\">\n                <div className={`p-2 rounded-lg ${report.color}`}>\n                  <Icon className=\"h-6 w-6\" />\n                </div>\n                <div className=\"ml-4\">\n                  <h3 className=\"text-lg font-semibold text-slate-900\">{report.title}</h3>\n                  {/* <p className=\"text-sm text-slate-600\">{report.description}</p> */}\n                </div>\n              </div>\n              <Button\n                onClick={() => handleGenerateReport(report.title)}\n                className={`w-full text-white ${report.buttonColor}`}\n                data-testid={`button-generate-${report.title.toLowerCase().replace(/\\s+/g, '-')}`}\n              >\n                Generate Report\n              </Button>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":2861},"client/src/components/residents/ResidentDetailsModal.tsx":{"content":"// TrainerDetailsModal.tsx\r\nimport * as React from \"react\";\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogHeader,\r\n  DialogTitle,\r\n  DialogFooter,\r\n} from \"@/components/ui/dialog\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport TrainerDetails from \"./resident-details\"; // اگر کامپوننت مخصوص ترینر دارید اینجا مسیرش را اصلاح کنید\r\n\r\ninterface TrainerDetailsModalProps {\r\n  trainerId: string; // آیدی ترینر\r\n  isOpen: boolean; // باز یا بسته بودن\r\n  onClose: () => void; // تابع بستن\r\n}\r\n\r\nexport default function TrainerDetailsModal({\r\n  trainerId,\r\n  isOpen,\r\n  onClose,\r\n}: TrainerDetailsModalProps) {\r\n  return (\r\n    <Dialog open={isOpen} onOpenChange={(open) => !open && onClose()}>\r\n      <DialogContent\r\n        className=\"\r\n           w-[80%] h-screen max-w-none max-h-none \r\n    mt-2 mx-auto    /* mt-2 فاصله کم از بالا / mx-auto وسط چین */\r\n    rounded-xl bg-white \r\n    overflow-y-auto\r\n  \"\r\n      >\r\n        <DialogHeader>\r\n          <DialogTitle>جزئیات ترینر</DialogTitle>\r\n        </DialogHeader>\r\n\r\n        {/* اینجا همان جزئیات ترینر را لود می‌کنید */}\r\n        <TrainerDetails trainerId={trainerId} onClose={onClose} />\r\n\r\n        <DialogFooter>\r\n          <Button variant=\"outline\" onClick={onClose}>\r\n            بستن\r\n          </Button>\r\n        </DialogFooter>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}\r\n","size_bytes":1489},"client/src/components/residents/resident-card.tsx":{"content":"import React, { useState } from \"react\";\r\nimport type { Resident, Form } from \"@shared/schema\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Eye, MoreHorizontal, Plus, X } from \"lucide-react\";\r\nimport ResidentDetailsModal from \"./ResidentDetailsModal\";\r\nimport FormModal from \"@/components/forms/form-modal\";\r\n\r\nconst FORM_TYPES = [\r\n  { type: \"J\", name: \"Initial Assessment\" },\r\n  { type: \"F\", name: \"Mid-Training Evaluation\" },\r\n  { type: \"D\", name: \"Clinical Skills\" },\r\n  { type: \"I\", name: \"Research Progress\" },\r\n  { type: \"G\", name: \"Communication Skills\" },\r\n  { type: \"E\", name: \"Ethics & Professionalism\" },\r\n  { type: \"C\", name: \"Case Presentation\" },\r\n  { type: \"H\", name: \"Hands-on Procedure\" },\r\n  { type: \"K\", name: \"Final Competency\" },\r\n];\r\n\r\ninterface ResidentCardProps {\r\n  resident: Resident;\r\n}\r\n\r\nexport default function ResidentCardList({ resident }: ResidentCardProps) {\r\n  const [showDropdown, setShowDropdown] = useState(false);\r\n  const [selectedForm, setSelectedForm] = useState<Form | null>(null);\r\n  const [showDetails, setShowDetails] = useState(false);\r\n\r\n  const handleSelectForm = (ft: { type: string; name: string }) => {\r\n    setSelectedForm({\r\n      _id: `new-${ft.type}`,\r\n      formType: ft.type,\r\n      status: \"pending\",\r\n      createdAt: new Date().toISOString(),\r\n      completedAt: null,\r\n      residentId: resident._id,\r\n    });\r\n    setShowDropdown(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"grid grid-cols-7 items-center bg-white border border-slate-200 rounded-lg shadow-sm hover:shadow-md transition p-3 gap-2\">\r\n        <div className=\"flex justify-center\">\r\n          <div className=\"w-12 h-12 rounded-full overflow-hidden border border-slate-200\">\r\n            <img\r\n              src={resident.profileImageUrl ?? \"/assets/img/default-avatar.png\"}\r\n              alt={resident.fullName}\r\n              className=\"w-full h-full object-cover\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"text-slate-900 font-semibold\">{resident.fullName}</div>\r\n        <div className=\"text-slate-900\">{resident.fullName ?? \"\"}</div>\r\n        <div className=\"text-slate-700 text-sm\">{resident._id}</div>\r\n        <div className=\"text-slate-500 text-sm\">{resident.department}</div>\r\n\r\n        <div className=\"relative\">\r\n          <Button\r\n            size=\"sm\"\r\n            variant=\"outline\"\r\n            className=\"text-xs flex items-center gap-1 border-slate-300 hover:bg-hospital-green-600 hover:text-white transition-colors\"\r\n            onClick={() => setShowDropdown((p) => !p)}\r\n          >\r\n            <Plus className=\"h-3 w-3\" />\r\n            اضافه فرم\r\n          </Button>\r\n\r\n          {showDropdown && (\r\n            <div className=\"absolute right-0 top-full mt-2 bg-white border border-slate-200 rounded-xl shadow-lg p-3 z-50 w-40\">\r\n              <div className=\"flex justify-between items-center mb-2\">\r\n                <span className=\"text-sm font-semibold text-slate-700\">انتخاب فرم</span>\r\n                <button onClick={() => setShowDropdown(false)} className=\"text-slate-500 hover:text-red-500\">\r\n                  <X className=\"w-4 h-4\" />\r\n                </button>\r\n              </div>\r\n              <div className=\"flex flex-col gap-2 max-h-80 overflow-y-auto\">\r\n                {FORM_TYPES.map((ft) => (\r\n                  <button\r\n                    key={ft.type}\r\n                    onClick={() => handleSelectForm(ft)}\r\n                    className=\"flex items-center justify-center w-10 h-10 rounded-full bg-slate-100 hover:bg-hospital-green-600 hover:text-white font-bold transition\"\r\n                    title={ft.name}\r\n                  >\r\n                    {ft.type}\r\n                  </button>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"flex justify-center\">\r\n          <Button\r\n            size=\"icon\"\r\n            variant=\"outline\"\r\n            onClick={() => setShowDetails(true)}\r\n            title=\"جزئیات\"\r\n          >\r\n            <Eye className=\"h-4 w-4\" />\r\n          </Button>\r\n        </div>\r\n\r\n        <div className=\"flex justify-center\">\r\n          <Button\r\n            size=\"icon\"\r\n            variant=\"outline\"\r\n            title=\"اکشن\"\r\n          >\r\n            <MoreHorizontal className=\"h-4 w-4\" />\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {selectedForm && (\r\n        <FormModal form={selectedForm} onClose={() => setSelectedForm(null)} />\r\n      )}\r\n\r\n      {showDetails && (\r\n        <ResidentDetailsModal\r\n          residentId={resident._id}\r\n          isOpen={showDetails}\r\n          onClose={() => setShowDetails(false)}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","size_bytes":4751},"client/src/components/residents/resident-details.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { X } from \"lucide-react\";\r\nimport { useState } from \"react\";\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogHeader,\r\n  DialogTitle,\r\n} from \"@/components/ui/dialog\";\r\n// فرم‌های شما همان قبلی می‌مانند:\r\nimport FormCDetails from \"@/components/residents/form-details/formC-detail\";\r\nimport FormDDetails from \"@/components/residents/form-details/formD-detail\";\r\nimport FormEDetails from \"@/components/residents/form-details/formE-detail\";\r\nimport FormGDetails from \"@/components/residents/form-details/formG-detail\";\r\nimport FormHDetails from \"@/components/residents/form-details/formH-detail\";\r\nimport FormF from \"@/components/residents/form-details/form-f\";\r\n\r\nimport TeacherActivityForm from \"@/components/residents/form-details/TeacherActivityFormDetails\";\r\n\r\n// تعریف انواع فرم‌ها\r\nconst FORM_TYPES = [\r\n  { type: \"J\", name: \"Initial Assessment\" },\r\n  { type: \"F\", name: \"Mid-Training Evaluation\" },\r\n  { type: \"D\", name: \"Clinical Skills\" },\r\n  { type: \"I\", name: \"Research Progress\" },\r\n  { type: \"G\", name: \"Communication Skills\" },\r\n  { type: \"E\", name: \"Ethics & Professionalism\" },\r\n  { type: \"C\", name: \"Case Presentation\" },\r\n  { type: \"H\", name: \"Hands-on Procedure\" },\r\n  { type: \"K\", name: \"Final Competency\" },\r\n];\r\n\r\ninterface TrainerDetailsProps {\r\n  trainerId: string;\r\n  onClose: () => void;\r\n}\r\n\r\n// این همان ResidentDetails ولی برای Trainer\r\nexport default function TrainerDetails({\r\n  trainerId,\r\n  onClose,\r\n}: TrainerDetailsProps) {\r\n  const [selectedForm, setSelectedForm] = useState<string | null>(null);\r\n\r\n  // اینجا از API ترینر استفاده می‌کنیم\r\n  const { data: trainer, isLoading } = useQuery({\r\n    queryKey: [\"/api/trainers\", trainerId],\r\n    queryFn: () => fetch(`/api/trainers/${trainerId}`).then((r) => r.json()),\r\n  });\r\n\r\n  if (isLoading) return <div>در حال بارگذاری...</div>;\r\n  if (!trainer) return <div>ترینر پیدا نشد.</div>;\r\n\r\n  return (\r\n    <div className=\"relative bg-white rounded-lg shadow-lg border border-slate-200 p-6\">\r\n      {/* دکمه بستن */}\r\n      <Button\r\n        variant=\"ghost\"\r\n        size=\"sm\"\r\n        className=\"absolute top-4 right-4\"\r\n        onClick={onClose}\r\n      >\r\n        <X className=\"h-4 w-4\" />\r\n      </Button>\r\n\r\n      {/* ردیف بالا: عکس + دکمه فرم‌ها + اکشن */}\r\n      <div className=\"flex items-center justify-between mb-4 w-full\">\r\n        <div className=\"flex-shrink-0 w-24 h-24 rounded-full border border-slate-300 overflow-hidden\">\r\n          {trainer.profileImageUrl ? (\r\n            <img\r\n              src={trainer.profileImageUrl}\r\n              alt={`${trainer.name} ${trainer.lastName}`}\r\n              className=\"w-full h-full object-cover\"\r\n            />\r\n          ) : (\r\n            <div className=\"w-full h-full flex items-center justify-center bg-slate-200 text-slate-500\">\r\n              عکس\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"flex-1 flex justify-center space-x-4 overflow-x-auto mx-4\">\r\n          {FORM_TYPES.map((ft) => (\r\n            <Button\r\n              key={ft.type}\r\n              onClick={() => setSelectedForm(ft.type)}\r\n              className={`w-16 h-16 rounded-full flex items-center justify-center text-sm font-semibold\r\n                ${\r\n                  selectedForm === ft.type\r\n                    ? \"bg-blue-500 text-white\"\r\n                    : \"bg-slate-100 text-slate-700\"\r\n                }\r\n                hover:bg-slate-200 transition`}\r\n              title={ft.name}\r\n            >\r\n              {ft.type}\r\n            </Button>\r\n          ))}\r\n        </div>\r\n\r\n        <div className=\"flex-shrink-0\">\r\n          <Button size=\"sm\" className=\"bg-red-500 text-white hover:bg-red-600\">\r\n            Disciplinary Actions\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* اطلاعات ترینر */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 border-t border-slate-200 pt-4 mt-4\">\r\n        <div>\r\n          <h4 className=\"font-medium text-slate-900 mb-2\">اطلاعات شخصی</h4>\r\n          <ul className=\"text-sm text-slate-700 space-y-1\">\r\n            <li>\r\n              <strong>نام کامل:</strong> {trainer.name} {trainer.lastName}\r\n            </li>\r\n            <li>\r\n              <strong>جنسیت:</strong> {trainer.gender}\r\n            </li>\r\n            <li>\r\n              <strong>شماره تماس:</strong> {trainer.phoneNumber}\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div>\r\n          <h4 className=\"font-medium text-slate-900 mb-2\">اطلاعات آموزشی</h4>\r\n          <ul className=\"text-sm text-slate-700 space-y-1\">\r\n            <li>\r\n              <strong>دیپارتمنت:</strong> {trainer.department}\r\n            </li>\r\n            <li>\r\n              <strong>تاریخ شروع:</strong> {trainer.joiningDate}\r\n            </li>\r\n            <li>\r\n              <strong>سال آموزشی:</strong> {trainer.trainingYear}\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n\r\n      {/* دیالوگ برای فرم */}\r\n      <Dialog open={!!selectedForm} onOpenChange={() => setSelectedForm(null)}>\r\n        <DialogContent className=\"sm:max-w-2xl\">\r\n          <DialogHeader>\r\n            <DialogTitle>جزئیات فرم {selectedForm}</DialogTitle>\r\n          </DialogHeader>\r\n\r\n          {selectedForm === \"C\" && (\r\n            <FormCDetails\r\n              residentId={trainerId}\r\n              onClose={() => setSelectedForm(null)}\r\n            />\r\n          )}\r\n          {selectedForm === \"D\" && (\r\n            <FormDDetails\r\n              residentId={trainerId}\r\n              onClose={() => setSelectedForm(null)}\r\n            />\r\n          )}\r\n          {selectedForm === \"E\" && (\r\n            <FormEDetails\r\n              residentId={trainerId}\r\n              onClose={() => setSelectedForm(null)}\r\n            />\r\n          )}\r\n          {selectedForm === \"J\" && (\r\n            <TeacherActivityForm\r\n              residentId={trainerId} // یا trainerId برای consistency\r\n              onClose={() => setSelectedForm(null)}\r\n            />\r\n          )}\r\n           <Dialog open={selectedForm === \"F\"} onOpenChange={() => setSelectedForm(null)}>\r\n  <DialogContent\r\n    className=\"sm:max-w-4xl max-h-[80vh] bg-white rounded-lg shadow-lg p-6 overflow-auto\"\r\n  >\r\n    <DialogHeader>\r\n      <DialogTitle>جزئیات فرم {selectedForm}</DialogTitle>\r\n    </DialogHeader>\r\n\r\n    <div className=\"overflow-auto max-h-[70vh]\">\r\n      <FormF studentName={`${trainer.name} ${trainer.lastName}`} />\r\n    </div>\r\n  </DialogContent>\r\n</Dialog>\r\n\r\n\r\n\r\n          {selectedForm === \"G\" && (\r\n            <FormGDetails\r\n              residentId={trainerId}\r\n              onClose={() => setSelectedForm(null)}\r\n            />\r\n          )}\r\n          {selectedForm === \"H\" && (\r\n            <FormHDetails\r\n              residentId={trainerId}\r\n              onClose={() => setSelectedForm(null)}\r\n            />\r\n          )}\r\n          {/* بقیه فرم‌ها را هم مشابه اضافه کنید */}\r\n        </DialogContent>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","size_bytes":7319},"client/src/components/teachers/EditTeacherModal.tsx":{"content":"import { useState, useEffect } from \"react\";\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\r\nimport { Teacher } from \"@shared/schema\";\r\n\r\ninterface EditTeacherModalProps {\r\n  teacher: Teacher | null;\r\n  open: boolean;\r\n  onClose: () => void;\r\n  onSave: (updatedTeacher: Teacher) => void;\r\n}\r\n\r\nexport default function EditTeacherModal({ teacher, open, onClose, onSave }: EditTeacherModalProps) {\r\n  const [formValues, setFormValues] = useState<Teacher | null>(teacher);\r\n\r\n  // وقتی استاد جدید انتخاب شد، فرم ریست شود\r\n  useEffect(() => {\r\n    setFormValues(teacher);\r\n  }, [teacher]);\r\n\r\n  if (!formValues) return null;\r\n\r\n  const handleChange = (field: keyof Teacher, value: any) => {\r\n    setFormValues(prev => prev ? { ...prev, [field]: value } : prev);\r\n  };\r\n\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (formValues) {\r\n      onSave(formValues); // ارسال به والد\r\n      onClose();          // بستن مودال\r\n    }\r\n  };\r\n\r\n  const formatDate = (date: string | Date | undefined) => {\r\n    if (!date) return \"\";\r\n    const d = new Date(date);\r\n    return d.toISOString().slice(0, 10); // YYYY-MM-DD برای input type=\"date\"\r\n  };\r\n\r\n  return (\r\n    <Dialog open={open} onOpenChange={onClose}>\r\n      <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\">\r\n        <DialogHeader>\r\n          <DialogTitle className=\"flex items-center space-x-4 rtl:space-x-reverse\">\r\n            <Avatar className=\"h-14 w-14\">\r\n              <AvatarImage src={formValues.profileImageUrl || \"\"} alt={formValues.name} />\r\n              <AvatarFallback>{formValues.name.charAt(0)}</AvatarFallback>\r\n            </Avatar>\r\n            <span className=\"text-xl font-semibold\">ویرایش استاد</span>\r\n          </DialogTitle>\r\n        </DialogHeader>\r\n\r\n        <form onSubmit={handleSubmit} className=\"grid grid-cols-2 gap-4 text-sm mt-4\">\r\n          <InputItem label=\"نام\" value={formValues.name} onChange={val => handleChange(\"name\", val)} />\r\n          {/* <InputItem label=\"تخلص\" value={formValues.lostname} onChange={val => handleChange(\"lostname\", val)} /> */}\r\n          <InputItem label=\"نام پدر\" value={formValues.fatherName} onChange={val => handleChange(\"fatherName\", val)} />\r\n          <InputItem label=\"نام پدر کلان\" value={formValues.grandfatherName} onChange={val => handleChange(\"grandfatherName\", val)} />\r\n          <InputItem label=\"رتبه علمی\" value={formValues.academicRank} onChange={val => handleChange(\"academicRank\", val)} />\r\n          <InputItem\r\n            label=\"تاریخ اخذ رتبه\"\r\n            type=\"date\"\r\n            value={formatDate(formValues.rankAchievementDate)}\r\n            onChange={val => handleChange(\"rankAchievementDate\", val)}\r\n          />\r\n          <InputItem\r\n            label=\"تاریخ تقرری مربی\"\r\n            type=\"date\"\r\n            value={formatDate(formValues.trainerAppointmentDate)}\r\n            onChange={val => handleChange(\"trainerAppointmentDate\", val)}\r\n          />\r\n          <InputItem label=\"جنسیت\" value={formValues.gender} onChange={val => handleChange(\"gender\", val)} />\r\n          <InputItem label=\"ولایت\" value={formValues.province} onChange={val => handleChange(\"province\", val)} />\r\n          <InputItem label=\"مضمون\" value={formValues.subject} onChange={val => handleChange(\"subject\", val)} />\r\n          <InputItem label=\"وظیفه / موقف\" value={formValues.position} onChange={val => handleChange(\"position\", val)} />\r\n          <InputItem label=\"شفاخانه\" value={formValues.hospital} onChange={val => handleChange(\"hospital\", val)} />\r\n          <InputItem\r\n            label=\"تاریخ تولد\"\r\n            type=\"date\"\r\n            value={formatDate(formValues.dateOfBirth)}\r\n            onChange={val => handleChange(\"dateOfBirth\", val)}\r\n          />\r\n          <InputItem label=\"نمبر تذکره\" value={formValues.idNumber} onChange={val => handleChange(\"idNumber\", val)} />\r\n          <InputItem\r\n            label=\"تاریخ شروع وظیفه\"\r\n            type=\"date\"\r\n            value={formatDate(formValues.dutyStartDate)}\r\n            onChange={val => handleChange(\"dutyStartDate\", val)}\r\n          />\r\n          <InputItem label=\"شماره تماس\" value={formValues.contactInfo} onChange={val => handleChange(\"contactInfo\", val)} />\r\n          <InputItem label=\"نمبر واتساپ\" value={formValues.whatsappNumber} onChange={val => handleChange(\"whatsappNumber\", val)} />\r\n          <InputItem label=\"ایمیل\" value={formValues.emailAddress} onChange={val => handleChange(\"emailAddress\", val)} />\r\n          <InputItem label=\"کود پوست\" value={formValues.postCode} onChange={val => handleChange(\"postCode\", val)} />\r\n          <InputItem label=\"نوع تقرری\" value={formValues.appointmentType} onChange={val => handleChange(\"appointmentType\", val)} />\r\n          <InputItem label=\"دیپارتمنت\" value={formValues.department} onChange={val => handleChange(\"department\", val)} />\r\n          <InputItem label=\"تجربه کاری\" type=\"number\" value={formValues.experience} onChange={val => handleChange(\"experience\", val)} />\r\n          <div className=\"col-span-2 flex justify-end space-x-2 rtl:space-x-reverse mt-4\">\r\n            <Button type=\"button\" variant=\"outline\" onClick={onClose}>بستن</Button>\r\n            <Button type=\"submit\" variant=\"default\">ذخیره</Button>\r\n          </div>\r\n        </form>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nfunction InputItem({\r\n  label,\r\n  value,\r\n  onChange,\r\n  type = \"text\",\r\n}: {\r\n  label: string;\r\n  value: any;\r\n  onChange: (val: any) => void;\r\n  type?: string;\r\n}) {\r\n  return (\r\n    <div className=\"flex flex-col\">\r\n      <label className=\"text-gray-500 text-xs\">{label}</label>\r\n      <input\r\n        type={type}\r\n        className=\"border rounded px-2 py-1 text-sm\"\r\n        value={value || \"\"}\r\n        onChange={e => onChange(e.target.value)}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","size_bytes":6215},"client/src/components/teachers/ViewTeacherModal.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\r\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Teacher } from \"@shared/schema\";\r\nimport { Button } from \"@/components/ui/button\";\r\n\r\ninterface ViewTeacherModalProps {\r\n  teacher: Teacher | null;\r\n  open: boolean;\r\n  onClose: () => void;\r\n}\r\n\r\nexport default function ViewTeacherModal({ teacher, open, onClose }: ViewTeacherModalProps) {\r\n  if (!teacher) return null;\r\n\r\n  const formatDate = (date: string | Date | undefined) => {\r\n    if (!date) return \"نامشخص\";\r\n    try {\r\n      return new Date(date).toLocaleDateString(\"fa-AF\");\r\n    } catch {\r\n      return \"نامشخص\";\r\n    }\r\n  };\r\n\r\n  const handlePrint = () => {\r\n    window.print();\r\n  };\r\n\r\n  return (\r\n    <Dialog open={open} onOpenChange={onClose}>\r\n      <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto rounded-2xl border border-slate-300\">\r\n        <DialogHeader>\r\n          <DialogTitle className=\"flex items-center space-x-4 rtl:space-x-reverse\">\r\n            <Avatar className=\"h-14 w-14\">\r\n              <AvatarImage src={teacher.profileImageUrl || \"\"} alt={teacher.name} />\r\n              <AvatarFallback>{teacher.name.charAt(0)}</AvatarFallback>\r\n            </Avatar>\r\n            <span className=\"text-xl font-semibold\">{teacher.name}</span>\r\n          </DialogTitle>\r\n        </DialogHeader>\r\n\r\n        <div className=\"grid grid-cols-2 gap-4 text-sm mt-4\">\r\n          <InfoItem label=\"نام\" value={teacher.name} />\r\n\r\n          <InfoItem label=\"نام پدر\" value={teacher.fatherName} />\r\n          <InfoItem label=\"نام پدر کلان\" value={teacher.grandfatherName} />\r\n          <InfoItem label=\"رتبه علمی\" value={teacher.academicRank} />\r\n          <InfoItem label=\"تاریخ اخذ رتبه\" value={formatDate(teacher.rankAchievementDate)} />\r\n          <InfoItem label=\"تاریخ تقرری مربی\" value={formatDate(teacher.trainerAppointmentDate)} />\r\n          <InfoItem label=\"جنسیت\" value={teacher.gender} />\r\n          <InfoItem label=\"ولایت\" value={teacher.province} />\r\n          <InfoItem label=\"مضمون\" value={teacher.subject} />\r\n          <InfoItem label=\"وظیفه / موقف\" value={teacher.position} />\r\n          <InfoItem label=\"شفاخانه\" value={teacher.hospital} />\r\n          <InfoItem label=\"تاریخ تولد\" value={formatDate(teacher.dateOfBirth)} />\r\n          <InfoItem label=\"نمبر تذکره\" value={teacher.idNumber} />\r\n          <InfoItem label=\"تاریخ شروع وظیفه\" value={formatDate(teacher.dutyStartDate)} />\r\n          <InfoItem label=\"شماره تماس\" value={teacher.contactInfo} />\r\n          <InfoItem label=\"نمبر واتساپ\" value={teacher.whatsappNumber} />\r\n          <InfoItem label=\"ایمیل آدرس\" value={teacher.emailAddress} />\r\n          <InfoItem label=\"کود پوست\" value={teacher.postCode} />\r\n          <InfoItem label=\"نوع تقرری\" value={teacher.appointmentType} />\r\n          <InfoItem label=\"دیپارتمنت\" value={teacher.department} />\r\n          <InfoItem label=\"تجربه کاری\" value={`${teacher.experience} سال`} />\r\n          <InfoItem\r\n            label=\"وضعیت\"\r\n            value={\r\n              <Badge\r\n                className={\r\n                  teacher.status === \"active\"\r\n                    ? \"bg-green-100 text-green-800\"\r\n                    : \"bg-red-100 text-red-800\"\r\n                }\r\n              >\r\n                {teacher.status === \"active\" ? \"برحال\" : \"منفک\"}\r\n              </Badge>\r\n            }\r\n          />\r\n        </div>\r\n\r\n        <div className=\"mt-6 flex justify-end\">\r\n          <Button onClick={handlePrint} className=\"bg-blue-600 hover:bg-blue-700 text-white\">\r\n            پرینت / PDF\r\n          </Button >\r\n            <Button onClick={onClose} variant=\"outline\" className=\"bg-red-600 hover:bg-blue-700 text-white\">\r\n    بستن\r\n  </Button>\r\n        </div>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nfunction InfoItem({ label, value }: { label: string; value: React.ReactNode }) {\r\n  return (\r\n    <div>\r\n      <p className=\"text-gray-500 text-xs\">{label}</p>\r\n      <p className=\"font-medium text-slate-800 dark:text-slate-200\">{value || \"نامشخص\"}</p>\r\n    </div>\r\n  );\r\n}\r\n","size_bytes":4391},"client/src/components/teachers/teacher-table.tsx":{"content":"import { useState } from \"react\";\r\nimport { Teacher } from \"@shared/schema\";\r\nimport { Card, CardContent } from \"@/components/ui/card\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\r\nimport { Eye, Edit, Trash2 } from \"lucide-react\";\r\nimport ViewTeacherModal from \"./ViewTeacherModal\";\r\nimport EditTeacherModal from \"./EditTeacherModal\";\r\n\r\ninterface TeacherTableProps {\r\n  teachers: Teacher[];\r\n  onViewDetails: (teacher: Teacher) => void;\r\n  onEdit: (teacher: Teacher) => void;\r\n  onDelete: (teacherId: string) => void;\r\n}\r\n\r\nexport default function TeacherTable({ teachers, onViewDetails, onEdit, onDelete }: TeacherTableProps) {\r\n  // ✅ استیت برای نگهداری استاد انتخاب‌شده\r\n  const [selectedTeacher, setSelectedTeacher] = useState<Teacher | null>(null);\r\nconst [editingTeacher, setEditingTeacher] = useState<Teacher | null>(null);\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case \"active\":\r\n        return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\";\r\n      case \"inactive\":\r\n        return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300\";\r\n      default:\r\n        return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300\";\r\n    }\r\n  };\r\n\r\n  const getStatusText = (status: string) => {\r\n    switch (status) {\r\n      case \"active\":\r\n        return \"برحال\";\r\n      case \"inactive\":\r\n        return \"منفک\";\r\n      default:\r\n        return status;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"grid gap-4\">\r\n      {teachers.map((teacher) => (\r\n        <Card key={teacher._id} className=\"p-6\">\r\n          <CardContent className=\"p-0\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div className=\"flex items-center space-x-4 rtl:space-x-reverse\">\r\n                <Avatar className=\"h-12 w-12\">\r\n                  <AvatarImage src={teacher.profileImageUrl || \"\"} alt={teacher.name} />\r\n                  <AvatarFallback className=\"bg-hospital-green-100 text-hospital-green-600\">\r\n                    {teacher.name.charAt(0)}\r\n                  </AvatarFallback>\r\n                </Avatar>\r\n                <div className=\"space-y-1\">\r\n                  <h3\r\n                    className=\"text-lg font-semibold text-slate-900 dark:text-slate-100\"\r\n                    data-testid={`text-teacher-name-${teacher._id}`}\r\n                  >\r\n                    {teacher.name}\r\n                  </h3>\r\n                </div>\r\n              </div>\r\n              <div className=\"flex items-center space-x-2 rtl:space-x-reverse\">\r\n                <Button\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                  // ✅ باز کردن مودال\r\n                  onClick={() => setSelectedTeacher(teacher)}\r\n                  data-testid={`button-view-teacher-${teacher._id}`}\r\n                >\r\n                  <Eye/>\r\n                </Button>\r\n                <Button\r\n  variant=\"outline\"\r\n  size=\"sm\"\r\n  onClick={() => setEditingTeacher(teacher)} // ✅ باز کردن مودال ویرایش\r\n  data-testid={`button-edit-teacher-${teacher._id}`}\r\n>\r\n  <Edit/>\r\n</Button>\r\n\r\n                <Button\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                  onClick={() => onDelete(teacher._id)}\r\n                  className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\r\n                  data-testid={`button-delete-teacher-${teacher._id}`}\r\n                >\r\n                  <Trash2/>\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      ))}\r\n\r\n      {/* ✅ مودال نمایش جزئیات استاد */}\r\n     {selectedTeacher && (\r\n  <ViewTeacherModal\r\n    teacher={selectedTeacher}\r\n    open={!!selectedTeacher}   // ✅ اینو اضافه کن\r\n    onClose={() => setSelectedTeacher(null)}\r\n  />\r\n)}\r\n{editingTeacher && (\r\n  <EditTeacherModal\r\n    teacher={editingTeacher}\r\n    open={!!editingTeacher}\r\n    onClose={() => setEditingTeacher(null)}\r\n    onSave={(updatedTeacher) => {\r\n      onEdit(updatedTeacher); // این تابع را از والد بفرستید که دیتابیس آپدیت شود\r\n      setEditingTeacher(null); // بستن مودال\r\n    }}\r\n  />\r\n)}\r\n\r\n    </div>\r\n  );\r\n}\r\n","size_bytes":4391},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight text-white px-4 py-2 rounded-lg\",\n    \"bg-hospital-green-600 text-center\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3921},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md bg-gray-100 px-3 py-2 text-base placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":661},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-gray-100 px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5740},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/residents/form-details/TeacherActivityFormDetails.tsx":{"content":"import React, { useState, useEffect } from \"react\";\r\nimport * as XLSX from \"xlsx\";\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\n\r\ninterface Activity {\r\n  _id: string | null;\r\n  section: string;\r\n  activity: string;\r\n  evaluators: boolean[];\r\n}\r\n\r\nconst TeacherActivityViewer: React.FC<{ residentId: string }> = ({\r\n  residentId,\r\n}) => {\r\n  const [data, setData] = useState<Activity[]>([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    fetch(`/api/teacher-activities?residentId=${residentId}`)\r\n      .then((res) => res.json())\r\n      .then((savedData) => {\r\n        if (savedData?.activities) {\r\n          setData(savedData.activities);\r\n        }\r\n      })\r\n      .catch(console.error)\r\n      .finally(() => setIsLoading(false));\r\n  }, [residentId]);\r\n\r\n  const exportExcel = () => {\r\n    const worksheetData = [\r\n      [\"بخش\", \"فعالیت\"],\r\n      ...data.map((d) => [d.section, d.activity]),\r\n    ];\r\n    const ws = XLSX.utils.aoa_to_sheet(worksheetData);\r\n    const wb = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(wb, ws, \"Activities\");\r\n    XLSX.writeFile(wb, \"Activities.xlsx\");\r\n  };\r\n\r\n  const exportPDF = () => {\r\n    const doc = new jsPDF();\r\n    const tableColumn = [\"بخش\", \"فعالیت\"];\r\n    const tableRows = data.map((d) => [d.section, d.activity]);\r\n    // @ts-ignore\r\n    doc.autoTable({\r\n      head: [tableColumn],\r\n      body: tableRows,\r\n      styles: { halign: \"center\" },\r\n      headStyles: { fillColor: [200, 200, 200] },\r\n    });\r\n    doc.save(\"Activities.pdf\");\r\n  };\r\n\r\n  if (isLoading) return <div>در حال بارگذاری داده‌ها...</div>;\r\n\r\n  return (\r\n    <div className=\"max-w-6xl mx-auto p-4 bg-gray-100 rounded-xl shadow-md overflow-auto\">\r\n      <h1 className=\"text-2xl font-bold mb-4 text-center\">\r\n        نمایش چک لیست امتحان عملی و نظری ترینی‌ها\r\n      </h1>\r\n\r\n      <div className=\"flex gap-2 mb-4 justify-center\">\r\n        <button\r\n          onClick={exportExcel}\r\n          className=\"bg-green-600 text-white py-2 px-4 rounded hover:bg-green-700 transition\"\r\n        >\r\n          خروجی Excel\r\n        </button>\r\n        <button\r\n          onClick={exportPDF}\r\n          className=\"bg-red-600 text-white py-2 px-4 rounded hover:bg-red-700 transition\"\r\n        >\r\n          خروجی PDF\r\n        </button>\r\n      </div>\r\n\r\n      <table className=\"table-auto border-collapse border border-gray-300 w-full text-center text-sm\">\r\n        <thead>\r\n          <tr className=\"bg-gray-200\">\r\n            <th className=\"border px-2 py-1\">بخش</th>\r\n            <th className=\"border px-2 py-1\">فعالیت</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {data.map((row, idx) => (\r\n            <tr key={idx} className=\"even:bg-gray-50\">\r\n              <td className=\"border px-2 py-1\">{row.section}</td>\r\n              <td className=\"border px-2 py-1\">{row.activity}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TeacherActivityViewer;\r\n","size_bytes":3085},"client/src/components/residents/form-details/form-f.tsx":{"content":"// FormFViewDynamicFinal.tsx\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst months = Array.from({ length: 12 }, (_, i) => i + 1);\r\n\r\ninterface MonthScore {\r\n  month: number;\r\n  value: number | null;\r\n}\r\n\r\ninterface Activity {\r\n  id: string;\r\n  title: string;\r\n  percent: number;\r\n  months?: MonthScore[];\r\n}\r\n\r\ninterface Section {\r\n  name: string;\r\n  activities: Activity[];\r\n}\r\n\r\ninterface FormFDataFromAPI {\r\n  studentName: string;\r\n  fatherName: string;\r\n  year: string;\r\n  scores: Record<string, Record<number, number>>; // actId -> month -> value\r\n}\r\n\r\ninterface FormFViewDynamicProps {\r\n  studentName: string;\r\n}\r\n\r\n// Template ثابت بخش‌ها و فعالیت‌ها\r\nconst sectionsTemplate: Section[] = [\r\n  {\r\n    name: \"آغاز فعالیت (10%)\",\r\n    activities: [\r\n      { id: \"uniform\", title: \"یونیفورم\", percent: 6 },\r\n      { id: \"coworkers\", title: \"برخورد با همکاران\", percent: 2 },\r\n      { id: \"patients\", title: \"برخورد با مریض\", percent: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"شیوه اخذ مشاهده (9%)\",\r\n    activities: [\r\n      { id: \"cc\", title: \"شهرت مریض\", percent: 2 },\r\n      { id: \"pi\", title: \"معاینه فزیکی\", percent: 2 },\r\n      { id: \"postHistory\", title: \"تجویز معاینات لابراتواری روتین\", percent: 2 },\r\n      { id: \"diagnosis\", title: \"تجویز معاینات وصفی و ضمیموی\", percent: 3 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"انجام مشوره طبی بموقع (6%)\",\r\n    activities: [{ id: \"consult\", title: \"انجام مشوره طبی بموقع\", percent: 6 }],\r\n  },\r\n  {\r\n    name: \"سعی در بلند بردن سطح دانش علمی و مسلکی (27%)\",\r\n    activities: [\r\n      { id: \"morning\", title: \"اشتراک فعال در راپو صبحانه\", percent: 6 },\r\n      { id: \"visits\", title: \"اشتراک فعال در ویزت‌ها\", percent: 6 },\r\n      { id: \"conferences\", title: \"اشتراک فعال در کنفرانس‌ها\", percent: 12 },\r\n      { id: \"license\", title: \"تقویه یکی از لیسانس‌های معتبر خارجی\", percent: 1 },\r\n      { id: \"computer\", title: \"قدرت استفاده از کمپیوتر و انترنت\", percent: 1 },\r\n      { id: \"press\", title: \"استفاده از نشرات مطبوع\", percent: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"دسپلین (24%)\",\r\n    activities: [\r\n      { id: \"attendance\", title: \"حاضر بودن\", percent: 6 },\r\n      { id: \"obedience\", title: \"اطاعت از اوامر معقول آمرمافوق\", percent: 6 },\r\n      { id: \"rules\", title: \"مراعات مقرره و لوایح تریننگ\", percent: 6 },\r\n      { id: \"duty\", title: \"اشتراک در نوکریوالی\", percent: 6 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"خصوصیات فردی (24%)\",\r\n    activities: [\r\n      { id: \"expression\", title: \"افاده بیان\", percent: 2 },\r\n      { id: \"initiative\", title: \"ابتکار سالم\", percent: 2 },\r\n      { id: \"leadership\", title: \"تصمیم و رهبری\", percent: 2 },\r\n      { id: \"honesty\", title: \"راستکاری و همکاری\", percent: 2 },\r\n      { id: \"resources\", title: \"استفاده معقول از منابع\", percent: 4 },\r\n      { id: \"responsibility\", title: \"مسٔولیت‌پذیری\", percent: 2 },\r\n      { id: \"evaluation\", title: \"تحلیل و ارزیابی\", percent: 2 },\r\n      { id: \"feedback\", title: \"انتقاد و پیشنهاد سازنده\", percent: 2 },\r\n      { id: \"individual\", title: \"رسیدگی به وضع فردی\", percent: 2 },\r\n      { id: \"social\", title: \"رابطه اجتماعی\", percent: 2 },\r\n      { id: \"position\", title: \"استفاده بجا از موقف کاری\", percent: 2 },\r\n    ],\r\n  },\r\n];\r\n\r\nexport default function FormFViewDynamicFinal({ studentName }: FormFViewDynamicProps) {\r\n  const [sections, setSections] = useState<Section[]>(sectionsTemplate);\r\n  const [studentInfo, setStudentInfo] = useState({\r\n    studentName: \"\",\r\n    fatherName: \"\",\r\n    year: \"\",\r\n  });\r\n\r\n useEffect(() => {\r\n  const fetchData = async () => {\r\n    try {\r\n      if (!studentName) return; // اطمینان از اینکه نام ترینی مشخص است\r\n\r\n      const res = await axios.get<FormFDataFromAPI>(\r\n        `/api/checklists/student/${encodeURIComponent(studentName)}`\r\n      );\r\n\r\n      const data = res.data;\r\n      console.log(JSON.stringify(data, null, 2));\r\n\r\n      console.log(\"دیتای دریافتی:\", data); // بررسی دیتای واقعی\r\n\r\n      setStudentInfo({\r\n        studentName: data.studentName,\r\n        fatherName: data.fatherName,\r\n        year: data.year,\r\n      });\r\n\r\n      const updatedSections = sectionsTemplate.map((section) => ({\r\n        ...section,\r\n        activities: section.activities.map((act) => ({\r\n          ...act,\r\n          months: months.map((m) => ({\r\n            month: m,\r\n            value: data.scores?.[act.id]?.[m] ?? null,\r\n          })),\r\n        })),\r\n      }));\r\n\r\n      setSections(updatedSections);\r\n    } catch (err) {\r\n      console.error(\"خطا در دریافت داده‌ها:\", err);\r\n    }\r\n  };\r\n\r\n  fetchData();\r\n}, [studentName]); // وابسته به نام ترینی\r\n\r\n\r\n  const calculateTotal = (activity: Activity) =>\r\n    (activity.months || []).reduce((sum, m) => sum + (m.value ?? 0), 0);\r\n\r\n  const calculateSectionTotal = (section: Section) =>\r\n    section.activities.reduce((sum, act) => sum + calculateTotal(act), 0);\r\n\r\n  return (\r\n    <div className=\"max-w-full mx-auto p-6 bg-gray-100 rounded-xl shadow-md\">\r\n      <h1 className=\"text-2xl font-bold mb-6 text-center\">\r\n        نمایش چک لیست کاری و ارزیابی ماهوار ترینی‌ها (Form F)\r\n      </h1>\r\n\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\r\n        <div className=\"p-3 border rounded-lg bg-white\">\r\n          <strong>نام ترینی:</strong> {studentInfo.studentName}\r\n        </div>\r\n        <div className=\"p-3 border rounded-lg bg-white\">\r\n          <strong>ولد:</strong> {studentInfo.fatherName}\r\n        </div>\r\n        <div className=\"p-3 border rounded-lg bg-white\">\r\n          <strong>سال آموزشی:</strong> {studentInfo.year}\r\n        </div>\r\n      </div>\r\n\r\n      {sections.map((section) => (\r\n        <div key={section.name} className=\"mb-10 w-full\">\r\n          <h2 className=\"text-lg font-semibold mb-2\">{section.name}</h2>\r\n          <table className=\"w-full border text-center text-sm bg-white rounded-lg shadow-sm table-fixed\">\r\n            <thead>\r\n              <tr className=\"bg-gray-200\">\r\n                <th className=\"p-2 border\">فعالیت</th>\r\n                <th className=\"p-2 border\">فیصدی</th>\r\n                {months.map((m) => (\r\n                  <th key={m} className=\"p-2 border\">{m}</th>\r\n                ))}\r\n                <th className=\"p-2 border\">مجموعه نمرات</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {section.activities.map((act) => (\r\n                <tr key={act.id} className=\"hover:bg-gray-50\">\r\n                  <td className=\"p-2 border\">{act.title}</td>\r\n                  <td className=\"p-2 border\">{act.percent}%</td>\r\n                  {months.map((_, idx) => (\r\n                    <td\r\n                      key={idx}\r\n                      className={`p-2 border ${\r\n                        act.months?.[idx]?.value == null ? \"bg-gray-50\" : \"\"\r\n                      }`}\r\n                    >\r\n                      {act.months?.[idx]?.value ?? \"\"}\r\n                    </td>\r\n                  ))}\r\n                  <td className=\"p-2 border font-bold\">{calculateTotal(act)}</td>\r\n                </tr>\r\n              ))}\r\n              {/* جمع کل بخش */}\r\n              <tr className=\"bg-gray-100 font-bold\">\r\n                <td className=\"p-2 border\" colSpan={2}>\r\n                  جمع کل بخش\r\n                </td>\r\n                {months.map((_, idx) => (\r\n                  <td key={idx} className=\"p-2 border\">\r\n                    {section.activities.reduce(\r\n                      (sum, act) => sum + (act.months?.[idx]?.value ?? 0),\r\n                      0\r\n                    )}\r\n                  </td>\r\n                ))}\r\n                <td className=\"p-2 border\">{calculateSectionTotal(section)}</td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","size_bytes":8496},"client/src/components/residents/form-details/formC-detail.tsx":{"content":"// components/forms/FormCDetails.tsx\r\nimport { useQuery } from \"@tanstack/react-query\";\r\nimport { useRef } from \"react\";\r\nimport { jsPDF } from \"jspdf\";\r\nimport autoTable from \"jspdf-autotable\";\r\nimport * as XLSX from \"xlsx\";\r\n\r\ninterface FormCDetailsProps {\r\n  residentId: string;\r\n  onClose: () => void;\r\n}\r\n\r\nexport default function FormCDetails({\r\n  residentId,\r\n  onClose,\r\n}: FormCDetailsProps) {\r\n  const { data, isLoading } = useQuery<any>({\r\n    queryKey: [\"/api/monograph\", residentId, \"C\"],\r\n    queryFn: () =>\r\n      fetch(`/api/monograph?residentId=${residentId}&type=C`).then((r) =>\r\n        r.json()\r\n      ),\r\n  });\r\n\r\n  const tableRef = useRef<HTMLTableElement>(null);\r\n\r\n  if (isLoading) return <div>در حال بارگذاری...</div>;\r\n  if (!data || !data.data?.length) return <div>فرم پیدا نشد.</div>;\r\n\r\n  const form = data.data[0];\r\n\r\n  const exportPDF = () => {\r\n    const doc = new jsPDF();\r\n    doc.setFontSize(14);\r\n    doc.text(`فرم C – ${form.name} ${form.lastName}`, 14, 20);\r\n\r\n    // اطلاعات شخصی\r\n    autoTable(doc as any, {\r\n      startY: 30,\r\n      head: [[\"فیلد\", \"مقدار\"]],\r\n      body: [\r\n        [\"پدر\", form.fatherName],\r\n        [\"کد\", form.idNumber],\r\n        [\"سال آموزش\", form.trainingYear],\r\n        [\"شروع\", form.startYear],\r\n        [\"تاریخ\", form.date],\r\n        [\"شف\", form.chef],\r\n        [\"رئیس دیپارتمنت\", form.departmentHead],\r\n        [\"رئیس شفاخانه\", form.hospitalHead],\r\n      ],\r\n    });\r\n\r\n    // ارزیابی‌ها\r\n    if (form.evaluations?.length) {\r\n      autoTable(doc as any, {\r\n        startY: (doc as any).lastAutoTable?.finalY + 10 || 80,\r\n        head: [[\"بخش\", \"نمره\", \"معلم\"]],\r\n        body: form.evaluations.map((ev: any) => [\r\n          ev.section,\r\n          ev.score,\r\n          ev.teacherName,\r\n        ]),\r\n      });\r\n    }\r\n\r\n    doc.save(`FormC_${form.name}_${form.lastName}.pdf`);\r\n  };\r\n\r\n  const exportExcel = () => {\r\n    const wb = XLSX.utils.book_new();\r\n\r\n    // مشخصات\r\n    const detailsWS = XLSX.utils.json_to_sheet([\r\n      { فیلد: \"نام\", مقدار: form.name },\r\n      { فیلد: \"نام خانوادگی\", مقدار: form.lastName },\r\n      { فیلد: \"پدر\", مقدار: form.fatherName },\r\n      { فیلد: \"کد\", مقدار: form.idNumber },\r\n      { فیلد: \"سال آموزش\", مقدار: form.trainingYear },\r\n      { فیلد: \"شروع\", مقدار: form.startYear },\r\n      { فیلد: \"تاریخ\", مقدار: form.date },\r\n      { فیلد: \"شف\", مقدار: form.chef },\r\n      { فیلد: \"رئیس دیپارتمنت\", مقدار: form.departmentHead },\r\n      { فیلد: \"رئیس شفاخانه\", مقدار: form.hospitalHead },\r\n    ]);\r\n    XLSX.utils.book_append_sheet(wb, detailsWS, \"مشخصات\");\r\n\r\n    // ارزیابی‌ها\r\n    if (form.evaluations?.length) {\r\n      const evalWS = XLSX.utils.json_to_sheet(\r\n        form.evaluations.map((ev: any) => ({\r\n          بخش: ev.section,\r\n          نمره: ev.score,\r\n          معلم: ev.teacherName,\r\n        }))\r\n      );\r\n      XLSX.utils.book_append_sheet(wb, evalWS, \"ارزیابی‌ها\");\r\n    }\r\n\r\n    XLSX.writeFile(wb, `FormC_${form.name}_${form.lastName}.xlsx`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-4\">\r\n      <h3 className=\"text-lg font-bold mb-4\">\r\n        فرم C – {form.name} {form.lastName}\r\n      </h3>\r\n\r\n      {/* دکمه‌های PDF و Excel */}\r\n      <div className=\"mb-4 space-x-2\">\r\n        <button\r\n          onClick={exportPDF}\r\n          className=\"bg-blue-500 text-white px-3 py-1 rounded\"\r\n        >\r\n          خروجی PDF\r\n        </button>\r\n        <button\r\n          onClick={exportExcel}\r\n          className=\"bg-green-500 text-white px-3 py-1 rounded\"\r\n        >\r\n          خروجی Excel\r\n        </button>\r\n        <button\r\n          onClick={onClose}\r\n          className=\"bg-gray-500 text-white px-3 py-1 rounded\"\r\n        >\r\n          بستن\r\n        </button>\r\n      </div>\r\n\r\n      {/* جدول مشخصات */}\r\n      <table ref={tableRef} className=\"min-w-full border border-slate-300 mb-4\">\r\n        <tbody>\r\n          <tr className=\"border-b\">\r\n            <td className=\"font-semibold px-2 py-1\">پدر</td>\r\n            <td className=\"px-2 py-1\">{form.fatherName}</td>\r\n          </tr>\r\n          <tr className=\"border-b\">\r\n            <td className=\"font-semibold px-2 py-1\">کد</td>\r\n            <td className=\"px-2 py-1\">{form.idNumber}</td>\r\n          </tr>\r\n          <tr className=\"border-b\">\r\n            <td className=\"font-semibold px-2 py-1\">سال آموزش</td>\r\n            <td className=\"px-2 py-1\">{form.trainingYear}</td>\r\n          </tr>\r\n          <tr className=\"border-b\">\r\n            <td className=\"font-semibold px-2 py-1\">شروع</td>\r\n            <td className=\"px-2 py-1\">{form.startYear}</td>\r\n          </tr>\r\n          <tr className=\"border-b\">\r\n            <td className=\"font-semibold px-2 py-1\">تاریخ</td>\r\n            <td className=\"px-2 py-1\">{form.date}</td>\r\n          </tr>\r\n          <tr className=\"border-b\">\r\n            <td className=\"font-semibold px-2 py-1\">شف</td>\r\n            <td className=\"px-2 py-1\">{form.chef}</td>\r\n          </tr>\r\n          <tr className=\"border-b\">\r\n            <td className=\"font-semibold px-2 py-1\">رئیس دیپارتمنت</td>\r\n            <td className=\"px-2 py-1\">{form.departmentHead}</td>\r\n          </tr>\r\n          <tr className=\"border-b\">\r\n            <td className=\"font-semibold px-2 py-1\">رئیس شفاخانه</td>\r\n            <td className=\"px-2 py-1\">{form.hospitalHead}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n\r\n      {/* جدول ارزیابی‌ها */}\r\n      {form.evaluations?.length > 0 && (\r\n        <table className=\"min-w-full border border-slate-300\">\r\n          <thead>\r\n            <tr className=\"bg-slate-100\">\r\n              <th className=\"px-2 py-1 border\">بخش</th>\r\n              <th className=\"px-2 py-1 border\">نمره</th>\r\n              <th className=\"px-2 py-1 border\">معلم</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {form.evaluations.map((ev: any, idx: number) => (\r\n              <tr key={idx} className=\"border-b\">\r\n                <td className=\"px-2 py-1\">{ev.section}</td>\r\n                <td className=\"px-2 py-1\">{ev.score}</td>\r\n                <td className=\"px-2 py-1\">{ev.teacherName}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","size_bytes":6566},"client/src/components/residents/form-details/formD-detail.tsx":{"content":"// components/forms/FormEDetails.tsx\r\nimport { useQuery } from \"@tanstack/react-query\";\r\nimport { jsPDF } from \"jspdf\";\r\nimport autoTable from \"jspdf-autotable\";\r\nimport * as XLSX from \"xlsx\";\r\n\r\ninterface FormEDetailsProps {\r\n  residentId: string;\r\n  onClose: () => void;\r\n  formType?: string; // برای دینامیک شدن نوع فرم، پیش‌فرض \"E\"\r\n}\r\n\r\nexport default function FormDDetails({\r\n  residentId,\r\n  onClose,\r\n  formType = \"D\",\r\n}: FormEDetailsProps) {\r\n  // گرفتن اطلاعات فرم از API با استفاده از formType\r\nconst { data, isLoading } = useQuery<any>({\r\n  queryKey: [\"/api/conference\"],\r\n  queryFn: () => fetch(`/api/conference`).then((r) => r.json()),\r\n});\r\n\r\n\r\n  if (isLoading) return <div>در حال بارگذاری...</div>;\r\n  if (!data || !data.length) return <div>فرم پیدا نشد.</div>;\r\n\r\n  const form = data[0];\r\n\r\n  // Export PDF\r\n  const exportPDF = () => {\r\n    const doc = new jsPDF();\r\n    doc.setFontSize(14);\r\n    doc.text(`فرم ${formType} – ${form.name} ${form.fatherName}`, 14, 20);\r\n\r\n    // مشخصات\r\n    autoTable(doc as any, {\r\n      startY: 30,\r\n      head: [[\"فیلد\", \"مقدار\"]],\r\n      body: [\r\n        [\"نام\", form.name],\r\n        [\"پدر\", form.fatherName],\r\n        [\"دیپارتمنت\", form.department],\r\n        [\"سال آموزش\", form.trainingYear],\r\n        [\"عنوان کنفرانس\", form.conferenceTitle],\r\n        [\"امتیاز\", form.score],\r\n        [\"تاریخ\", form.date],\r\n        [\"معلم\", form.teacherName],\r\n        [\"امضا معلم\", form.teacherSigned ? \"بله\" : \"خیر\"],\r\n        [\"یادداشت\", form.notes ? \"بله\" : \"خیر\"],\r\n        [\"رئیس دیپارتمنت\", form.departmentHead],\r\n        [\"رئیس برنامه\", form.programHead],\r\n        [\"رئیس شفاخانه\", form.hospitalHead],\r\n      ],\r\n    });\r\n\r\n    doc.save(`Form${formType}_${form.name}_${form.fatherName}.pdf`);\r\n  };\r\n\r\n  // Export Excel\r\n  const exportExcel = () => {\r\n    const wsData = [\r\n      [\"فیلد\", \"مقدار\"],\r\n      [\"نام\", form.name],\r\n      [\"پدر\", form.fatherName],\r\n      [\"دیپارتمنت\", form.department],\r\n      [\"سال آموزش\", form.trainingYear],\r\n      [\"عنوان کنفرانس\", form.conferenceTitle],\r\n      [\"امتیاز\", form.score],\r\n      [\"تاریخ\", form.date],\r\n      [\"معلم\", form.teacherName],\r\n      [\"امضا معلم\", form.teacherSigned ? \"بله\" : \"خیر\"],\r\n      [\"یادداشت\", form.notes ? \"بله\" : \"خیر\"],\r\n      [\"رئیس دیپارتمنت\", form.departmentHead],\r\n      [\"رئیس برنامه\", form.programHead],\r\n      [\"رئیس شفاخانه\", form.hospitalHead],\r\n    ];\r\n\r\n    const wb = XLSX.utils.book_new();\r\n    const ws = XLSX.utils.aoa_to_sheet(wsData);\r\n    XLSX.utils.book_append_sheet(wb, ws, `Form${formType}`);\r\n    XLSX.writeFile(wb, `Form${formType}_${form.name}_${form.fatherName}.xlsx`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-4\">\r\n      <h3 className=\"text-lg font-bold mb-2\">\r\n        فرم {formType} – {form.name} {form.fatherName}\r\n      </h3>\r\n\r\n      <table className=\"table-auto border-collapse border border-slate-300 text-sm w-full\">\r\n        <tbody>\r\n          <tr>\r\n            <td className=\"border px-2 py-1 font-semibold\">نام</td>\r\n            <td className=\"border px-2 py-1\">{form.name}</td>\r\n          </tr>\r\n          <tr>\r\n            <td className=\"border px-2 py-1 font-semibold\">پدر</td>\r\n            <td className=\"border px-2 py-1\">{form.fatherName}</td>\r\n          </tr>\r\n          <tr>\r\n            <td className=\"border px-2 py-1 font-semibold\">دیپارتمنت</td>\r\n            <td className=\"border px-2 py-1\">{form.department}</td>\r\n          </tr>\r\n          <tr>\r\n            <td className=\"border px-2 py-1 font-semibold\">سال آموزش</td>\r\n            <td className=\"border px-2 py-1\">{form.trainingYear}</td>\r\n          </tr>\r\n          <tr>\r\n            <td className=\"border px-2 py-1 font-semibold\">عنوان کنفرانس</td>\r\n            <td className=\"border px-2 py-1\">{form.conferenceTitle}</td>\r\n          </tr>\r\n          <tr>\r\n            <td className=\"border px-2 py-1 font-semibold\">امتیاز</td>\r\n            <td className=\"border px-2 py-1\">{form.score}</td>\r\n          </tr>\r\n          <tr>\r\n            <td className=\"border px-2 py-1 font-semibold\">تاریخ</td>\r\n            <td className=\"border px-2 py-1\">{form.date}</td>\r\n          </tr>\r\n          <tr>\r\n            <td className=\"border px-2 py-1 font-semibold\">معلم</td>\r\n            <td className=\"border px-2 py-1\">{form.teacherName}</td>\r\n          </tr>\r\n          <tr>\r\n            <td className=\"border px-2 py-1 font-semibold\">امضا معلم</td>\r\n            <td className=\"border px-2 py-1\">\r\n              {form.teacherSigned ? \"بله\" : \"خیر\"}\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td className=\"border px-2 py-1 font-semibold\">یادداشت</td>\r\n            <td className=\"border px-2 py-1\">{form.notes ? \"بله\" : \"خیر\"}</td>\r\n          </tr>\r\n          <tr>\r\n            <td className=\"border px-2 py-1 font-semibold\">رئیس دیپارتمنت</td>\r\n            <td className=\"border px-2 py-1\">{form.departmentHead}</td>\r\n          </tr>\r\n          <tr>\r\n            <td className=\"border px-2 py-1 font-semibold\">رئیس برنامه</td>\r\n            <td className=\"border px-2 py-1\">{form.programHead}</td>\r\n          </tr>\r\n          <tr>\r\n            <td className=\"border px-2 py-1 font-semibold\">رئیس شفاخانه</td>\r\n            <td className=\"border px-2 py-1\">{form.hospitalHead}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n\r\n      <div className=\"mt-4 space-x-2\">\r\n        <button\r\n          className=\"bg-blue-500 text-white px-3 py-1 rounded\"\r\n          onClick={exportPDF}\r\n        >\r\n          چاپ PDF\r\n        </button>\r\n        <button\r\n          className=\"bg-green-500 text-white px-3 py-1 rounded\"\r\n          onClick={exportExcel}\r\n        >\r\n          چاپ Excel\r\n        </button>\r\n        <button\r\n          className=\"bg-gray-500 text-white px-3 py-1 rounded\"\r\n          onClick={onClose}\r\n        >\r\n          بستن\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","size_bytes":6284},"client/src/components/residents/form-details/formE-detail.tsx":{"content":"// components/residents/form-details/formE-detail.tsx\r\nimport { useQuery } from \"@tanstack/react-query\";\r\nimport { jsPDF } from \"jspdf\";\r\nimport autoTable from \"jspdf-autotable\";\r\nimport * as XLSX from \"xlsx\";\r\n\r\ninterface FormEDetailsProps {\r\n  residentId: string;\r\n  onClose: () => void;\r\n}\r\n\r\nexport default function FormEDetails({\r\n  residentId,\r\n  onClose,\r\n}: FormEDetailsProps) {\r\n  // گرفتن اطلاعات فرم E از API\r\n  const { data, isLoading } = useQuery<any>({\r\n    queryKey: [\"/api/evaluationFormE\"],\r\n    queryFn: () => fetch(`/api/evaluationFormE`).then((r) => r.json()),\r\n  });\r\n\r\n  if (isLoading) return <div>در حال بارگذاری...</div>;\r\n  if (!data || !data.length) return <div>فرم پیدا نشد.</div>;\r\n\r\n  const form = data[0]; // اولین فرم را بگیر\r\n\r\n  // Export PDF\r\n  const exportPDF = () => {\r\n    const doc = new jsPDF();\r\n    doc.setFontSize(14);\r\n    doc.text(`فرم E – ${form.name} ${form.fatherName}`, 14, 20);\r\n\r\n    autoTable(doc as any, {\r\n      startY: 30,\r\n      head: [[\"فیلد\", \"مقدار\"]],\r\n      body: [\r\n        [\"نام\", form.name],\r\n        [\"پدر\", form.fatherName],\r\n        [\"سال\", form.year],\r\n        [\"سال آموزش\", form.trainingYear],\r\n        [\"عنوان حادثه\", form.incidentTitle],\r\n        [\"تاریخ\", form.date],\r\n        [\"امتیاز\", form.score],\r\n        [\"میانگین امتیاز\", form.averageScore],\r\n        [\"معلم\", form.teacherName],\r\n        [\"امضا معلم\", form.teacherSigned ? \"بله\" : \"خیر\"],\r\n        [\"یادداشت\", form.notes ? \"بله\" : \"خیر\"],\r\n        [\"رئیس دیپارتمنت\", form.departmentHead],\r\n        [\"رئیس برنامه\", form.programHead],\r\n        [\"رئیس شفاخانه\", form.hospitalHead],\r\n      ],\r\n    });\r\n\r\n    doc.save(`FormE_${form.name}_${form.fatherName}.pdf`);\r\n  };\r\n\r\n  // Export Excel\r\n  const exportExcel = () => {\r\n    const wsData = [\r\n      [\"فیلد\", \"مقدار\"],\r\n      [\"نام\", form.name],\r\n      [\"پدر\", form.fatherName],\r\n      [\"سال\", form.year],\r\n      [\"سال آموزش\", form.trainingYear],\r\n      [\"عنوان حادثه\", form.incidentTitle],\r\n      [\"تاریخ\", form.date],\r\n      [\"امتیاز\", form.score],\r\n      [\"میانگین امتیاز\", form.averageScore],\r\n      [\"معلم\", form.teacherName],\r\n      [\"امضا معلم\", form.teacherSigned ? \"بله\" : \"خیر\"],\r\n      [\"یادداشت\", form.notes ? \"بله\" : \"خیر\"],\r\n      [\"رئیس دیپارتمنت\", form.departmentHead],\r\n      [\"رئیس برنامه\", form.programHead],\r\n      [\"رئیس شفاخانه\", form.hospitalHead],\r\n    ];\r\n\r\n    const wb = XLSX.utils.book_new();\r\n    const ws = XLSX.utils.aoa_to_sheet(wsData);\r\n    XLSX.utils.book_append_sheet(wb, ws, \"FormE\");\r\n    XLSX.writeFile(wb, `FormE_${form.name}_${form.fatherName}.xlsx`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-4\">\r\n      <h3 className=\"text-lg font-bold mb-2\">\r\n        فرم E – {form.name} {form.fatherName}\r\n      </h3>\r\n\r\n      <table className=\"table-auto border-collapse border border-slate-300 text-sm w-full\">\r\n        <tbody>\r\n          <tr>\r\n            <td className=\"border px-2 py-1 font-semibold\">نام</td>\r\n            <td className=\"border px-2 py-1\">{form.name}</td>\r\n          </tr>\r\n          <tr>\r\n            <td className=\"border px-2 py-1 font-semibold\">پدر</td>\r\n            <td className=\"border px-2 py-1\">{form.fatherName}</td>\r\n          </tr>\r\n          <tr>\r\n            <td className=\"border px-2 py-1 font-semibold\">سال</td>\r\n            <td className=\"border px-2 py-1\">{form.year}</td>\r\n          </tr>\r\n          <tr>\r\n            <td className=\"border px-2 py-1 font-semibold\">سال آموزش</td>\r\n            <td className=\"border px-2 py-1\">{form.trainingYear}</td>\r\n          </tr>\r\n          <tr>\r\n            <td className=\"border px-2 py-1 font-semibold\">عنوان حادثه</td>\r\n            <td className=\"border px-2 py-1\">{form.incidentTitle}</td>\r\n          </tr>\r\n          <tr>\r\n            <td className=\"border px-2 py-1 font-semibold\">تاریخ</td>\r\n            <td className=\"border px-2 py-1\">{form.date}</td>\r\n          </tr>\r\n          <tr>\r\n            <td className=\"border px-2 py-1 font-semibold\">امتیاز</td>\r\n            <td className=\"border px-2 py-1\">{form.score}</td>\r\n          </tr>\r\n          <tr>\r\n            <td className=\"border px-2 py-1 font-semibold\">میانگین امتیاز</td>\r\n            <td className=\"border px-2 py-1\">{form.averageScore}</td>\r\n          </tr>\r\n          <tr>\r\n            <td className=\"border px-2 py-1 font-semibold\">معلم</td>\r\n            <td className=\"border px-2 py-1\">{form.teacherName}</td>\r\n          </tr>\r\n          <tr>\r\n            <td className=\"border px-2 py-1 font-semibold\">امضا معلم</td>\r\n            <td className=\"border px-2 py-1\">\r\n              {form.teacherSigned ? \"بله\" : \"خیر\"}\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td className=\"border px-2 py-1 font-semibold\">یادداشت</td>\r\n            <td className=\"border px-2 py-1\">{form.notes ? \"بله\" : \"خیر\"}</td>\r\n          </tr>\r\n          <tr>\r\n            <td className=\"border px-2 py-1 font-semibold\">رئیس دیپارتمنت</td>\r\n            <td className=\"border px-2 py-1\">{form.departmentHead}</td>\r\n          </tr>\r\n          <tr>\r\n            <td className=\"border px-2 py-1 font-semibold\">رئیس برنامه</td>\r\n            <td className=\"border px-2 py-1\">{form.programHead}</td>\r\n          </tr>\r\n          <tr>\r\n            <td className=\"border px-2 py-1 font-semibold\">رئیس شفاخانه</td>\r\n            <td className=\"border px-2 py-1\">{form.hospitalHead}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n\r\n      <div className=\"mt-4 space-x-2\">\r\n        <button\r\n          className=\"bg-blue-500 text-white px-3 py-1 rounded\"\r\n          onClick={exportPDF}\r\n        >\r\n          چاپ PDF\r\n        </button>\r\n        <button\r\n          className=\"bg-green-500 text-white px-3 py-1 rounded\"\r\n          onClick={exportExcel}\r\n        >\r\n          چاپ Excel\r\n        </button>\r\n        <button\r\n          className=\"bg-gray-500 text-white px-3 py-1 rounded\"\r\n          onClick={onClose}\r\n        >\r\n          بستن\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","size_bytes":6384},"client/src/components/residents/form-details/formG-detail.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\r\nimport { jsPDF } from \"jspdf\";\r\nimport autoTable from \"jspdf-autotable\";\r\nimport * as XLSX from \"xlsx\";\r\n\r\ninterface FormGDetailsProps {\r\n  residentId: string;\r\n  onClose: () => void;\r\n}\r\n\r\nexport default function FormGDetails({ residentId, onClose }: FormGDetailsProps) {\r\n  // گرفتن اطلاعات فرم G از API\r\n  const { data, isLoading } = useQuery<any>({\r\n    queryKey: [\"/api/evaluationFormG\"],\r\n    queryFn: () =>\r\n      fetch(`/api/evaluationFormG`).then((r) => r.json()),\r\n  });\r\n\r\n  if (isLoading) return <div>در حال بارگذاری...</div>;\r\n  if (!data || !data.length) return <div>فرم پیدا نشد.</div>;\r\n\r\n  const form = data[0]; // اولین فرم را برای نمایش بگیرید\r\n\r\n  // Export PDF\r\n  const exportPDF = () => {\r\n    const doc = new jsPDF();\r\n    doc.setFontSize(14);\r\n    doc.text(`فرم G – ${form.name} ${form.fatherName}`, 14, 20);\r\n\r\n    autoTable(doc as any, {\r\n      startY: 30,\r\n      head: [[\"فیلد\", \"مقدار\"]],\r\n      body: [\r\n        [\"نام\", form.name],\r\n        [\"پدر\", form.fatherName],\r\n        [\"سال\", form.year],\r\n        [\"سال آموزش\", form.trainingYear],\r\n        [\"دیپارتمنت\", form.department],\r\n        [\"امتحان ۱ کتبی\", form.exam1Written],\r\n        [\"امتحان ۱ عملی\", form.exam1Practical],\r\n        [\"امتحان ۲ کتبی\", form.exam2Written],\r\n        [\"امتحان ۲ عملی\", form.exam2Practical],\r\n        [\"نهایی کتبی\", form.finalWritten],\r\n        [\"نهایی عملی\", form.finalPractical],\r\n        [\"مجموع\", form.total],\r\n        [\"میانگین\", form.average],\r\n        [\"معلم\", form.teacherName],\r\n        [\"امضا معلم\", form.teacherSigned ? \"بله\" : \"خیر\"],\r\n        [\"رئیس دیپارتمنت\", form.departmentHead],\r\n        [\"رئیس برنامه\", form.programHead],\r\n        [\"رئیس شفاخانه\", form.hospitalHead],\r\n      ],\r\n    });\r\n\r\n    doc.save(`FormG_${form.name}_${form.fatherName}.pdf`);\r\n  };\r\n\r\n  // Export Excel\r\n  const exportExcel = () => {\r\n    const wsData = [\r\n      [\"فیلد\", \"مقدار\"],\r\n      [\"نام\", form.name],\r\n      [\"پدر\", form.fatherName],\r\n      [\"سال\", form.year],\r\n      [\"سال آموزش\", form.trainingYear],\r\n      [\"دیپارتمنت\", form.department],\r\n      [\"امتحان ۱ کتبی\", form.exam1Written],\r\n      [\"امتحان ۱ عملی\", form.exam1Practical],\r\n      [\"امتحان ۲ کتبی\", form.exam2Written],\r\n      [\"امتحان ۲ عملی\", form.exam2Practical],\r\n      [\"نهایی کتبی\", form.finalWritten],\r\n      [\"نهایی عملی\", form.finalPractical],\r\n      [\"مجموع\", form.total],\r\n      [\"میانگین\", form.average],\r\n      [\"معلم\", form.teacherName],\r\n      [\"امضا معلم\", form.teacherSigned ? \"بله\" : \"خیر\"],\r\n      [\"رئیس دیپارتمنت\", form.departmentHead],\r\n      [\"رئیس برنامه\", form.programHead],\r\n      [\"رئیس شفاخانه\", form.hospitalHead],\r\n    ];\r\n\r\n    const wb = XLSX.utils.book_new();\r\n    const ws = XLSX.utils.aoa_to_sheet(wsData);\r\n    XLSX.utils.book_append_sheet(wb, ws, \"FormG\");\r\n    XLSX.writeFile(wb, `FormG_${form.name}_${form.fatherName}.xlsx`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-4\">\r\n      <h3 className=\"text-lg font-bold mb-2\">\r\n        فرم G – {form.name} {form.fatherName}\r\n      </h3>\r\n\r\n      <table className=\"table-auto border-collapse border border-slate-300 text-sm w-full\">\r\n        <tbody>\r\n          <tr><td className=\"border px-2 py-1 font-semibold\">نام</td><td className=\"border px-2 py-1\">{form.name}</td></tr>\r\n          <tr><td className=\"border px-2 py-1 font-semibold\">پدر</td><td className=\"border px-2 py-1\">{form.fatherName}</td></tr>\r\n          <tr><td className=\"border px-2 py-1 font-semibold\">سال</td><td className=\"border px-2 py-1\">{form.year}</td></tr>\r\n          <tr><td className=\"border px-2 py-1 font-semibold\">سال آموزش</td><td className=\"border px-2 py-1\">{form.trainingYear}</td></tr>\r\n          <tr><td className=\"border px-2 py-1 font-semibold\">دیپارتمنت</td><td className=\"border px-2 py-1\">{form.department}</td></tr>\r\n          <tr><td className=\"border px-2 py-1 font-semibold\">امتحان ۱ کتبی</td><td className=\"border px-2 py-1\">{form.exam1Written}</td></tr>\r\n          <tr><td className=\"border px-2 py-1 font-semibold\">امتحان ۱ عملی</td><td className=\"border px-2 py-1\">{form.exam1Practical}</td></tr>\r\n          <tr><td className=\"border px-2 py-1 font-semibold\">امتحان ۲ کتبی</td><td className=\"border px-2 py-1\">{form.exam2Written}</td></tr>\r\n          <tr><td className=\"border px-2 py-1 font-semibold\">امتحان ۲ عملی</td><td className=\"border px-2 py-1\">{form.exam2Practical}</td></tr>\r\n          <tr><td className=\"border px-2 py-1 font-semibold\">نهایی کتبی</td><td className=\"border px-2 py-1\">{form.finalWritten}</td></tr>\r\n          <tr><td className=\"border px-2 py-1 font-semibold\">نهایی عملی</td><td className=\"border px-2 py-1\">{form.finalPractical}</td></tr>\r\n          <tr><td className=\"border px-2 py-1 font-semibold\">مجموع</td><td className=\"border px-2 py-1\">{form.total}</td></tr>\r\n          <tr><td className=\"border px-2 py-1 font-semibold\">میانگین</td><td className=\"border px-2 py-1\">{form.average}</td></tr>\r\n          <tr><td className=\"border px-2 py-1 font-semibold\">معلم</td><td className=\"border px-2 py-1\">{form.teacherName}</td></tr>\r\n          <tr><td className=\"border px-2 py-1 font-semibold\">امضا معلم</td><td className=\"border px-2 py-1\">{form.teacherSigned ? \"بله\" : \"خیر\"}</td></tr>\r\n          <tr><td className=\"border px-2 py-1 font-semibold\">رئیس دیپارتمنت</td><td className=\"border px-2 py-1\">{form.departmentHead}</td></tr>\r\n          <tr><td className=\"border px-2 py-1 font-semibold\">رئیس برنامه</td><td className=\"border px-2 py-1\">{form.programHead}</td></tr>\r\n          <tr><td className=\"border px-2 py-1 font-semibold\">رئیس شفاخانه</td><td className=\"border px-2 py-1\">{form.hospitalHead}</td></tr>\r\n        </tbody>\r\n      </table>\r\n\r\n      <div className=\"mt-4 space-x-2\">\r\n        <button className=\"bg-blue-500 text-white px-3 py-1 rounded\" onClick={exportPDF}>چاپ PDF</button>\r\n        <button className=\"bg-green-500 text-white px-3 py-1 rounded\" onClick={exportExcel}>چاپ Excel</button>\r\n        <button className=\"bg-gray-500 text-white px-3 py-1 rounded\" onClick={onClose}>بستن</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","size_bytes":6633},"client/src/components/residents/form-details/formH-detail.tsx":{"content":"// components/residents/form-details/formH-detail.tsx\r\nimport { useQuery } from \"@tanstack/react-query\";\r\nimport { jsPDF } from \"jspdf\";\r\nimport autoTable from \"jspdf-autotable\";\r\nimport * as XLSX from \"xlsx\";\r\n\r\ninterface FormHDetailsProps {\r\n  residentId: string;\r\n  onClose: () => void;\r\n}\r\n\r\nexport default function FormHDetails({ residentId, onClose }: FormHDetailsProps) {\r\n  // گرفتن اطلاعات فرم H از API\r\n  const { data, isLoading } = useQuery<any>({\r\n    queryKey: [\"/api/evaluationFormH\"],\r\n    queryFn: () =>\r\n      fetch(`/api/evaluationFormH`).then((r) => r.json()),\r\n  });\r\n\r\n  if (isLoading) return <div>در حال بارگذاری...</div>;\r\n  if (!data || !data.length) return <div>فرم پیدا نشد.</div>;\r\n\r\n  const form = data[0]; // اولین فرم برای نمایش\r\n\r\n  // Export PDF\r\n  const exportPDF = () => {\r\n    const doc = new jsPDF();\r\n    doc.setFontSize(14);\r\n    doc.text(`فرم H – ${form.residentName} ${form.fatherName}`, 14, 20);\r\n\r\n    autoTable(doc as any, {\r\n      startY: 30,\r\n      head: [[\"فیلد\", \"مقدار\"]],\r\n      body: [\r\n        [\"نام\", form.residentName],\r\n        [\"پدر\", form.fatherName],\r\n        [\"سال\", form.year],\r\n        [\"سال آموزش\", form.trainingYear],\r\n        [\"دیپارتمنت\", form.department],\r\n        [\"امتیاز کل\", form.totalScore],\r\n        [\"میانگین\", form.averageScore],\r\n        [\"نام مربی\", form.instructorName],\r\n        [\"امضا مربی\", form.instructorSigned ? \"بله\" : \"خیر\"],\r\n        [\"دیپارتمنت شیفت\", form.shiftDepartment],\r\n        [\"رئیس برنامه\", form.programDirector],\r\n        [\"امضا رئیس\", form.presidentSigned ? \"بله\" : \"خیر\"],\r\n      ],\r\n    });\r\n\r\n    doc.save(`FormH_${form.residentName}_${form.fatherName}.pdf`);\r\n  };\r\n\r\n  // Export Excel\r\n  const exportExcel = () => {\r\n    const wsData = [\r\n      [\"فیلد\", \"مقدار\"],\r\n      [\"نام\", form.residentName],\r\n      [\"پدر\", form.fatherName],\r\n      [\"سال\", form.year],\r\n      [\"سال آموزش\", form.trainingYear],\r\n      [\"دیپارتمنت\", form.department],\r\n      [\"امتیاز کل\", form.totalScore],\r\n      [\"میانگین\", form.averageScore],\r\n      [\"نام مربی\", form.instructorName],\r\n      [\"امضا مربی\", form.instructorSigned ? \"بله\" : \"خیر\"],\r\n      [\"دیپارتمنت شیفت\", form.shiftDepartment],\r\n      [\"رئیس برنامه\", form.programDirector],\r\n      [\"امضا رئیس\", form.presidentSigned ? \"بله\" : \"خیر\"],\r\n    ];\r\n\r\n    const wb = XLSX.utils.book_new();\r\n    const ws = XLSX.utils.aoa_to_sheet(wsData);\r\n    XLSX.utils.book_append_sheet(wb, ws, \"FormH\");\r\n    XLSX.writeFile(wb, `FormH_${form.residentName}_${form.fatherName}.xlsx`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-4\">\r\n      <h3 className=\"text-lg font-bold mb-2\">\r\n        فرم H – {form.residentName} {form.fatherName}\r\n      </h3>\r\n\r\n      <table className=\"table-auto border-collapse border border-slate-300 text-sm w-full\">\r\n        <tbody>\r\n          <tr><td className=\"border px-2 py-1 font-semibold\">نام</td><td className=\"border px-2 py-1\">{form.residentName}</td></tr>\r\n          <tr><td className=\"border px-2 py-1 font-semibold\">پدر</td><td className=\"border px-2 py-1\">{form.fatherName}</td></tr>\r\n          <tr><td className=\"border px-2 py-1 font-semibold\">سال</td><td className=\"border px-2 py-1\">{form.year}</td></tr>\r\n          <tr><td className=\"border px-2 py-1 font-semibold\">سال آموزش</td><td className=\"border px-2 py-1\">{form.trainingYear}</td></tr>\r\n          <tr><td className=\"border px-2 py-1 font-semibold\">دیپارتمنت</td><td className=\"border px-2 py-1\">{form.department}</td></tr>\r\n          <tr><td className=\"border px-2 py-1 font-semibold\">امتیاز کل</td><td className=\"border px-2 py-1\">{form.totalScore}</td></tr>\r\n          <tr><td className=\"border px-2 py-1 font-semibold\">میانگین</td><td className=\"border px-2 py-1\">{form.averageScore}</td></tr>\r\n          <tr><td className=\"border px-2 py-1 font-semibold\">نام مربی</td><td className=\"border px-2 py-1\">{form.instructorName}</td></tr>\r\n          <tr><td className=\"border px-2 py-1 font-semibold\">امضا مربی</td><td className=\"border px-2 py-1\">{form.instructorSigned ? \"بله\" : \"خیر\"}</td></tr>\r\n          <tr><td className=\"border px-2 py-1 font-semibold\">دیپارتمنت شیفت</td><td className=\"border px-2 py-1\">{form.shiftDepartment}</td></tr>\r\n          <tr><td className=\"border px-2 py-1 font-semibold\">رئیس برنامه</td><td className=\"border px-2 py-1\">{form.programDirector}</td></tr>\r\n          <tr><td className=\"border px-2 py-1 font-semibold\">امضا رئیس</td><td className=\"border px-2 py-1\">{form.presidentSigned ? \"بله\" : \"خیر\"}</td></tr>\r\n        </tbody>\r\n      </table>\r\n\r\n      <div className=\"mt-4 space-x-2\">\r\n        <button className=\"bg-blue-500 text-white px-3 py-1 rounded\" onClick={exportPDF}>چاپ PDF</button>\r\n        <button className=\"bg-green-500 text-white px-3 py-1 rounded\" onClick={exportExcel}>چاپ Excel</button>\r\n        <button className=\"bg-gray-500 text-white px-3 py-1 rounded\" onClick={onClose}>بستن</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","size_bytes":5292},"client/src/components/residents/form-details/formK-detail.tsx":{"content":"","size_bytes":0}},"version":1}