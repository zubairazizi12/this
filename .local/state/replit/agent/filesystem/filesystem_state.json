{"file_contents":{"server/routes/trainerRoutes.ts":{"content":"import express, { Request, Response } from \"express\";\r\nimport Trainer from \"../models/trainerModel\";\r\nimport multer from \"multer\";\r\nimport path from \"path\";\r\nimport fs from \"fs\";\r\nimport { fileURLToPath } from \"url\";\r\n\r\n// 🔹 ایجاد __filename و __dirname در ES Module\r\nconst __filename = fileURLToPath(import.meta.url);\r\nconst __dirname = path.dirname(__filename);\r\n\r\nconst router = express.Router();\r\n\r\n// 🔹 تنظیمات multer برای ذخیره عکس\r\nconst storage = multer.diskStorage({\r\n  destination: (_req, _file, cb) => {\r\n    const uploadDir = path.join(__dirname, \"../uploads/trainers\");\r\n    if (!fs.existsSync(uploadDir)) fs.mkdirSync(uploadDir, { recursive: true });\r\n    cb(null, uploadDir);\r\n  },\r\n  filename: (_req, file, cb) => {\r\n    const ext = path.extname(file.originalname);\r\n    const filename = `${Date.now()}-${file.fieldname}${ext}`;\r\n    cb(null, filename);\r\n  },\r\n});\r\n\r\nconst fileFilter = (_req: Request, file: Express.Multer.File, cb: multer.FileFilterCallback) => {\r\n  if (file.mimetype.startsWith(\"image/\")) cb(null, true);\r\n  else cb(new Error(\"فقط فایل‌های تصویری مجاز هستند\"));\r\n};\r\n\r\nconst upload = multer({ storage, fileFilter, limits: { fileSize: 5 * 1024 * 1024 } }); // حداکثر 5MB\r\n\r\n// ➕ Create Trainer with optional photo\r\nrouter.post(\"/\", upload.single(\"photo\"), async (req: Request, res: Response) => {\r\n  try {\r\n    const data = req.body;\r\n    if (req.file) data.photo = `/uploads/trainers/${req.file.filename}`;\r\n\r\n    const newTrainer = new Trainer(data);\r\n    const savedTrainer = await newTrainer.save();\r\n    res.status(201).json(savedTrainer);\r\n  } catch (error) {\r\n    console.error(\"Error creating trainer:\", error);\r\n    res.status(500).json({ message: \"خطا در ثبت ترینر\" });\r\n  }\r\n});\r\n\r\n// 📋 Get all Trainers\r\nrouter.get(\"/\", async (_req: Request, res: Response) => {\r\n  try {\r\n    const trainers = await Trainer.find().lean();\r\n    res.status(200).json(trainers);\r\n  } catch (error) {\r\n    console.error(\"Error fetching trainers:\", error);\r\n    res.status(500).json({ message: \"خطا در دریافت ترینرها\" });\r\n  }\r\n});\r\n\r\n// 🔍 Get Trainer by ID\r\nrouter.get(\"/:id\", async (req: Request, res: Response) => {\r\n  try {\r\n    const trainer = await Trainer.findById(req.params.id).lean();\r\n    if (!trainer) return res.status(404).json({ message: \"ترینر یافت نشد\" });\r\n    res.status(200).json(trainer);\r\n  } catch (error) {\r\n    console.error(\"Error fetching trainer:\", error);\r\n    res.status(500).json({ message: \"خطا در دریافت ترینر\" });\r\n  }\r\n});\r\n\r\n// ✏️ Update Trainer with optional photo\r\nrouter.put(\"/:id\", upload.single(\"photo\"), async (req: Request, res: Response) => {\r\n  try {\r\n    const data = req.body;\r\n    if (req.file) data.photo = `/uploads/trainers/${req.file.filename}`;\r\n\r\n    const updatedTrainer = await Trainer.findByIdAndUpdate(req.params.id, data, { new: true });\r\n    if (!updatedTrainer) return res.status(404).json({ message: \"ترینر یافت نشد\" });\r\n\r\n    res.status(200).json(updatedTrainer);\r\n  } catch (error) {\r\n    console.error(\"Error updating trainer:\", error);\r\n    res.status(500).json({ message: \"خطا در بروزرسانی ترینر\" });\r\n  }\r\n});\r\n\r\n// 🗑️ Delete Trainer by ID\r\nrouter.delete(\"/:id\", async (req: Request, res: Response) => {\r\n  try {\r\n    const deletedTrainer = await Trainer.findByIdAndDelete(req.params.id);\r\n    if (!deletedTrainer) return res.status(404).json({ message: \"ترینر یافت نشد\" });\r\n\r\n    // حذف عکس از سرور در صورت وجود\r\n    if (deletedTrainer.photo) {\r\n      const photoPath = path.join(__dirname, \"..\", deletedTrainer.photo);\r\n      if (fs.existsSync(photoPath)) fs.unlinkSync(photoPath);\r\n    }\r\n\r\n    res.status(200).json({ message: \"ترینر حذف شد\" });\r\n  } catch (error) {\r\n    console.error(\"Error deleting trainer:\", error);\r\n    res.status(500).json({ message: \"خطا در حذف ترینر\" });\r\n  }\r\n});\r\n\r\nexport { router as trainerRoutes };\r\n","size_bytes":4059},"server/controllers/form-F.ts":{"content":"\nimport { Request, Response } from \"express\";\nimport Checklist from \"../models/form-F\";\n\n// 🔹 Create new Form-F (Checklist)\nexport const createChecklist = async (req: Request, res: Response) => {\n  try {\n    const { trainerId, name, parentType, trainingYear, sections } = req.body;\n\n    if (!trainerId) \n      return res.status(400).json({ message: \"TrainerId الزامی است\" });\n    if (!name || !parentType || !trainingYear || !sections) {\n      return res.status(400).json({ message: \"اطلاعات ناقص است\" });\n    }\n\n    const checklist = new Checklist({\n      trainerId,\n      name,\n      parentType,\n      trainingYear,\n      sections,\n    });\n\n    const savedChecklist = await checklist.save();\n    res.status(201).json(savedChecklist);\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ message: \"خطا در ایجاد فرم\" });\n  }\n};\n\n// 🔹 Get all Form-Fs for a specific trainer\nexport const getChecklists = async (req: Request, res: Response) => {\n  try {\n    const { trainerId } = req.params;\n\n    if (!trainerId) return res.status(400).json({ message: \"TrainerId الزامی است\" });\n\n    const checklists = await Checklist.find({ trainerId }).sort({ createdAt: -1 });\n    res.json(checklists);\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ message: \"خطا در دریافت فرم‌ها\" });\n  }\n};\n\n// 🔹 Get a single Form-F by ID\nexport const getChecklistById = async (req: Request, res: Response) => {\n  try {\n    const { id } = req.params;\n    const checklist = await Checklist.findById(id);\n    if (!checklist) return res.status(404).json({ message: \"فرم یافت نشد\" });\n    res.json(checklist);\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ message: \"خطا در دریافت فرم\" });\n  }\n};\n\n// 🔹 Update Form-F by ID\nexport const updateChecklist = async (req: Request, res: Response) => {\n  try {\n    const { id } = req.params;\n    const updatedChecklist = await Checklist.findByIdAndUpdate(id, req.body, { new: true });\n    if (!updatedChecklist) return res.status(404).json({ message: \"فرم یافت نشد\" });\n    res.json(updatedChecklist);\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ message: \"خطا در بروزرسانی فرم\" });\n  }\n};\n\n// 🔹 Delete Form-F by ID\nexport const deleteChecklist = async (req: Request, res: Response) => {\n  try {\n    const { id } = req.params;\n    const deletedChecklist = await Checklist.findByIdAndDelete(id);\n    if (!deletedChecklist) return res.status(404).json({ message: \"فرم یافت نشد\" });\n    res.json({ message: \"فرم با موفقیت حذف شد\" });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ message: \"خطا در حذف فرم\" });\n  }\n};\n\n","size_bytes":2796},"server/routes/residentRoutes.ts":{"content":"import express from 'express';\nimport { ResidentModel } from '../models';\nimport { z } from 'zod';\n\nconst router = express.Router();\n\n// Resident validation schema\nconst createResidentSchema = z.object({\n  fullName: z.string().min(1, \"Full name is required\"),\n  age: z.number().min(18, \"Age must be at least 18\").max(100, \"Age must be less than 100\"),\n  gender: z.enum([\"Male\", \"Female\"]),\n  department: z.string().min(1, \"Department is required\"),\n  startDate: z.string().transform((str) => new Date(str)),\n  endDate: z.string().optional().transform((str) => str ? new Date(str) : undefined),\n  status: z.string().optional().default(\"active\"),\n  profileImageUrl: z.string().optional(),\n});\n\nconst updateResidentSchema = createResidentSchema.partial();\n\n// Get all residents\nrouter.get('/', async (req, res) => {\n  try {\n    const residents = await ResidentModel.find().sort({ createdAt: -1 });\n    res.json(residents);\n  } catch (error) {\n    console.error('Error fetching residents:', error);\n    res.status(500).json({ message: 'Failed to fetch residents' });\n  }\n});\n\n// Get resident by ID\nrouter.get('/:id', async (req, res) => {\n  try {\n    const resident = await ResidentModel.findById(req.params.id);\n    if (!resident) {\n      return res.status(404).json({ message: 'Resident not found' });\n    }\n    res.json(resident);\n  } catch (error) {\n    console.error('Error fetching resident:', error);\n    res.status(500).json({ message: 'Failed to fetch resident' });\n  }\n});\n\n// Create new resident\nrouter.post('/', async (req, res) => {\n  try {\n    const validatedData = createResidentSchema.parse(req.body);\n    const resident = new ResidentModel(validatedData);\n    const savedResident = await resident.save();\n    res.status(201).json(savedResident);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ \n        message: 'Validation error', \n        errors: error.errors \n      });\n    }\n    console.error('Error creating resident:', error);\n    res.status(500).json({ message: 'Failed to create resident' });\n  }\n});\n\n// Update resident\nrouter.put('/:id', async (req, res) => {\n  try {\n    const validatedData = updateResidentSchema.parse(req.body);\n    const resident = await ResidentModel.findByIdAndUpdate(\n      req.params.id,\n      { ...validatedData, updatedAt: new Date() },\n      { new: true, runValidators: true }\n    );\n    \n    if (!resident) {\n      return res.status(404).json({ message: 'Resident not found' });\n    }\n    \n    res.json(resident);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ \n        message: 'Validation error', \n        errors: error.errors \n      });\n    }\n    console.error('Error updating resident:', error);\n    res.status(500).json({ message: 'Failed to update resident' });\n  }\n});\n\n// Delete resident\nrouter.delete('/:id', async (req, res) => {\n  try {\n    const resident = await ResidentModel.findByIdAndDelete(req.params.id);\n    if (!resident) {\n      return res.status(404).json({ message: 'Resident not found' });\n    }\n    res.json({ message: 'Resident deleted successfully' });\n  } catch (error) {\n    console.error('Error deleting resident:', error);\n    res.status(500).json({ message: 'Failed to delete resident' });\n  }\n});\n\nexport { router as residentRoutes };","size_bytes":3314},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        \"hospital-green\": {\n          50: \"var(--hospital-green-50)\",\n          100: \"var(--hospital-green-100)\",\n          200: \"var(--hospital-green-200)\",\n          300: \"var(--hospital-green-300)\",\n          400: \"var(--hospital-green-400)\",\n          500: \"var(--hospital-green-500)\",\n          600: \"var(--hospital-green-600)\",\n          700: \"var(--hospital-green-700)\",\n          800: \"var(--hospital-green-800)\",\n          900: \"var(--hospital-green-900)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        inter: [\"Inter\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3283},"server/controllers/trainerController.ts":{"content":"import { Request, Response } from \"express\";\r\nimport TrainerModel from \"../models/trainerModel\";\r\nimport multer from \"multer\";\r\nimport path from \"path\";\r\nimport fs from \"fs\";\r\n\r\n// 🟢 تنظیم مسیر و نام فایل‌ها\r\nconst storage = multer.diskStorage({\r\n  destination: (req, file, cb) => {\r\n    const uploadDir = path.join(__dirname, \"../uploads/trainers\");\r\n    if (!fs.existsSync(uploadDir)) {\r\n      fs.mkdirSync(uploadDir, { recursive: true });\r\n    }\r\n    cb(null, uploadDir);\r\n  },\r\n  filename: (req, file, cb) => {\r\n    const ext = path.extname(file.originalname);\r\n    const filename = `${Date.now()}-${file.fieldname}${ext}`;\r\n    cb(null, filename);\r\n  },\r\n});\r\n\r\n// 🟢 محدود کردن نوع فایل به تصاویر\r\nconst fileFilter = (_req: Request, file: Express.Multer.File, cb: multer.FileFilterCallback) => {\r\n  if (file.mimetype.startsWith(\"image/\")) {\r\n    cb(null, true);\r\n  } else {\r\n    cb(new Error(\"فقط فایل‌های تصویری مجاز هستند\"));\r\n  }\r\n};\r\n\r\nexport const upload = multer({ storage, fileFilter, limits: { fileSize: 5 * 1024 * 1024 } }); // حداکثر 5MB\r\n\r\n// 🟢 کنترلر\r\nexport const TrainerController = {\r\n  // ➕ ایجاد ترینر جدید با عکس\r\n  createTrainer: async (req: Request, res: Response) => {\r\n    try {\r\n      const { file } = req; // فایل عکس\r\n      const data = req.body;\r\n\r\n      // افزودن مسیر عکس به داده‌ها\r\n      if (file) {\r\n        data.photo = `/uploads/trainers/${file.filename}`;\r\n      }\r\n\r\n      // اعتبارسنجی اولیه\r\n      const { name, lastName, province, department, specialty } = data;\r\n      if (!name || !lastName || !province || !department || !specialty) {\r\n        return res.status(400).json({\r\n          message: \"لطفاً تمام فیلدهای ضروری (نام، تخلص، ولایت، دیپارتمنت، رشته) را تکمیل کنید\",\r\n        });\r\n      }\r\n\r\n      // بررسی ایمیل تکراری\r\n      if (data.email) {\r\n        const existing = await TrainerModel.findOne({ email: data.email });\r\n        if (existing) {\r\n          return res.status(409).json({ message: \"این ایمیل قبلاً ثبت شده است\" });\r\n        }\r\n      }\r\n\r\n      const newTrainer = await TrainerModel.create(data);\r\n      res.status(201).json({\r\n        message: \"ترینر با موفقیت ایجاد شد\",\r\n        data: newTrainer,\r\n      });\r\n    } catch (error) {\r\n      console.error(\"❌ Error creating trainer:\", error);\r\n      res.status(500).json({ message: \"خطا در ثبت ترینر\" });\r\n    }\r\n  },\r\n\r\n  // 📋 دریافت لیست تمام ترینرها\r\n  getAllTrainers: async (_req: Request, res: Response) => {\r\n    try {\r\n      const trainers = await TrainerModel.find().sort({ createdAt: -1 });\r\n      res.status(200).json(trainers);\r\n    } catch (error) {\r\n      console.error(\"❌ Error fetching trainers:\", error);\r\n      res.status(500).json({ message: \"خطا در دریافت ترینرها\" });\r\n    }\r\n  },\r\n\r\n  // 🔍 دریافت یک ترینر بر اساس ID\r\n  getTrainerById: async (req: Request, res: Response) => {\r\n    try {\r\n      const trainer = await TrainerModel.findById(req.params.id);\r\n      if (!trainer) {\r\n        return res.status(404).json({ message: \"ترینر یافت نشد\" });\r\n      }\r\n      res.status(200).json(trainer);\r\n    } catch (error) {\r\n      console.error(\"❌ Error fetching trainer by ID:\", error);\r\n      res.status(500).json({ message: \"خطا در دریافت ترینر\" });\r\n    }\r\n  },\r\n\r\n  // ✏️ بروزرسانی ترینر با امکان تغییر عکس\r\n  updateTrainer: async (req: Request, res: Response) => {\r\n    try {\r\n      const { file } = req;\r\n      const data = req.body;\r\n\r\n      // اگر عکس جدید ارسال شده باشد، مسیر جدید را جایگزین کن\r\n      if (file) {\r\n        data.photo = `/uploads/trainers/${file.filename}`;\r\n      }\r\n\r\n      const updatedTrainer = await TrainerModel.findByIdAndUpdate(\r\n        req.params.id,\r\n        data,\r\n        { new: true, runValidators: true }\r\n      );\r\n\r\n      if (!updatedTrainer) {\r\n        return res.status(404).json({ message: \"ترینر یافت نشد\" });\r\n      }\r\n\r\n      res.status(200).json({\r\n        message: \"ترینر با موفقیت بروزرسانی شد\",\r\n        data: updatedTrainer,\r\n      });\r\n    } catch (error) {\r\n      console.error(\"❌ Error updating trainer:\", error);\r\n      res.status(500).json({ message: \"خطا در بروزرسانی ترینر\" });\r\n    }\r\n  },\r\n\r\n  // 🗑️ حذف ترینر\r\n  deleteTrainer: async (req: Request, res: Response) => {\r\n    try {\r\n      const deletedTrainer = await TrainerModel.findByIdAndDelete(req.params.id);\r\n      if (!deletedTrainer) {\r\n        return res.status(404).json({ message: \"ترینر یافت نشد\" });\r\n      }\r\n\r\n      // حذف فایل عکس از سرور (در صورت وجود)\r\n      if (deletedTrainer.photo) {\r\n        const photoPath = path.join(__dirname, \"..\", deletedTrainer.photo);\r\n        if (fs.existsSync(photoPath)) fs.unlinkSync(photoPath);\r\n      }\r\n\r\n      res.status(200).json({ message: \"ترینر با موفقیت حذف شد\" });\r\n    } catch (error) {\r\n      console.error(\"❌ Error deleting trainer:\", error);\r\n      res.status(500).json({ message: \"خطا در حذف ترینر\" });\r\n    }\r\n  },\r\n};\r\n","size_bytes":5434},"server/routes/form-H.ts":{"content":"// routes/evaluationFormHRoutes.ts\r\nimport express from \"express\";\r\nimport { EvaluationFormHController } from \"../controllers/form-H\";\r\n\r\nconst router = express.Router();\r\n\r\n// 🔹 ایجاد فرم جدید\r\nrouter.post(\"/\", EvaluationFormHController.create);\r\n\r\n// 🔹 دریافت همه فرم‌ها یا فیلتر بر اساس trainerId\r\nrouter.get(\"/\", EvaluationFormHController.getAll);\r\n\r\n// 🔹 دریافت فرم بر اساس ID\r\nrouter.get(\"/:id\", EvaluationFormHController.getById);\r\n\r\n// 🔹 بروزرسانی فرم بر اساس ID\r\nrouter.put(\"/:id\", EvaluationFormHController.update);\r\n\r\n// 🔹 حذف فرم بر اساس ID\r\nrouter.delete(\"/:id\", EvaluationFormHController.delete);\r\n\r\nexport default router;\r\n","size_bytes":739},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"server/routes/form-G.ts":{"content":"// routes/evaluationFormGRoutes.ts\r\nimport express from \"express\";\r\nimport { EvaluationFormGController } from \"../controllers/form-G\";\r\n\r\nconst router = express.Router();\r\n\r\n// 🔹 ایجاد فرم جدید\r\nrouter.post(\"/\", EvaluationFormGController.create);\r\n\r\n// 🔹 دریافت همه فرم‌ها یا فیلتر بر اساس trainerId\r\nrouter.get(\"/\", EvaluationFormGController.getAll);\r\n\r\n// 🔹 دریافت فرم بر اساس ID\r\nrouter.get(\"/:id\", EvaluationFormGController.getById);\r\n\r\n// 🔹 بروزرسانی فرم بر اساس ID\r\nrouter.put(\"/:id\", EvaluationFormGController.update);\r\n\r\n// 🔹 حذف فرم بر اساس ID\r\nrouter.delete(\"/:id\", EvaluationFormGController.delete);\r\n\r\nexport default router;\r\n","size_bytes":739},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"server/storage.ts":{"content":"\nimport { UserModel, TeacherModel, ResidentModel } from \"./models\";\nimport {\n  type User,\n  type UpsertUser,\n  type Resident,\n  type InsertResident,\n  type Teacher,\n  type InsertTeacher,\n  type Form,\n  type InsertForm,\n  type DisciplinaryAction,\n  type InsertDisciplinaryAction,\n  type Reward,\n  type InsertReward,\n  DEMO_CREDENTIALS,\n} from \"@shared/schema\";\nimport { connectDB } from \"./db\";\n// import { seedDatabase } from \"./seeds\"; // Removed\n\nexport interface IStorage {\n  // User operations (mandatory for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  getAllUsers(): Promise<User[]>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: { email: string; firstName: string; lastName?: string; role: string; password: string }): Promise<User>;\n  updateUser(id: string, user: Partial<{ email: string; firstName: string; lastName?: string; role: string; password?: string }>): Promise<User>;\n  deleteUser(id: string): Promise<void>;\n\n  // Resident operations\n  getAllResidents(): Promise<Resident[]>;\n  getResident(id: string): Promise<Resident | undefined>;\n  createResident(resident: InsertResident): Promise<Resident>;\n  updateResident(id: string, resident: Partial<InsertResident>): Promise<Resident>;\n  deleteResident(id: string): Promise<void>;\n\n  // Teacher operations (replacing faculty)\n\n  getAllTeachers(): Promise<Teacher[]>;\n  getTeacher(id: string): Promise<Teacher | undefined>;\n  createTeacher(teacher: InsertTeacher): Promise<Teacher>;\n  updateTeacher(id: string, teacher: Partial<InsertTeacher>): Promise<Teacher>;\n  deleteTeacher(id: string): Promise<void>;\n\n  // Form operations\n  getResidentForms(residentId: string): Promise<Form[]>;\n  getForm(id: string): Promise<Form | undefined>;\n  createForm(form: InsertForm): Promise<Form>;\n  updateForm(id: string, form: Partial<InsertForm>): Promise<Form>;\n  deleteForm(id: string): Promise<void>;\n\n  // Disciplinary action operations\n  getResidentDisciplinaryActions(residentId: string): Promise<DisciplinaryAction[]>;\n  createDisciplinaryAction(action: InsertDisciplinaryAction): Promise<DisciplinaryAction>;\n  updateDisciplinaryAction(id: string, action: Partial<InsertDisciplinaryAction>): Promise<DisciplinaryAction>;\n  deleteDisciplinaryAction(id: string): Promise<void>;\n\n  // Reward operations\n  getResidentRewards(residentId: string): Promise<Reward[]>;\n  createReward(reward: InsertReward): Promise<Reward>;\n  updateReward(id: string, reward: Partial<InsertReward>): Promise<Reward>;\n  deleteReward(id: string): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  private demoUsers: Map<string, User> = new Map();\n  private demoResidents: Map<string, Resident> = new Map();\n  private demoTeachers: Map<string, Teacher> = new Map();\n  private demoForms: Map<string, Form> = new Map();\n  private demoDisciplinaryActions: Map<string, DisciplinaryAction> = new Map();\n  private demoRewards: Map<string, Reward> = new Map();\n  private isMongoConnected: boolean = false;\n\n  constructor() {\n    // Initialize database connection and demo data\n    this.initializeDatabase();\n  }\n\n  private async initializeDatabase() {\n    try {\n      await connectDB();\n      this.isMongoConnected = true;\n      \n      // MongoDB connected successfully\n      \n    } catch (error) {\n      console.warn('MongoDB initialization failed, using in-memory storage:', (error as Error).message);\n      this.isMongoConnected = false;\n      this.createDemoUsers();\n    }\n  }\n\n  private createDemoUsers() {\n    // Create demo admin user\n    this.demoUsers.set(DEMO_CREDENTIALS.admin.id, {\n      _id: DEMO_CREDENTIALS.admin.id,\n      email: DEMO_CREDENTIALS.admin.username,\n      firstName: DEMO_CREDENTIALS.admin.firstName,\n      lastName: DEMO_CREDENTIALS.admin.lastName,\n      role: DEMO_CREDENTIALS.admin.role,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    } as User);\n\n    // Create demo viewer user\n    this.demoUsers.set(DEMO_CREDENTIALS.viewer.id, {\n      _id: DEMO_CREDENTIALS.viewer.id,\n      email: DEMO_CREDENTIALS.viewer.username,\n      firstName: DEMO_CREDENTIALS.viewer.firstName,\n      lastName: DEMO_CREDENTIALS.viewer.lastName,\n      role: DEMO_CREDENTIALS.viewer.role,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    } as User);\n\n    console.log('Demo users initialized successfully');\n  }\n\n  // User operations (mandatory for Replit Auth)\n  async getUser(id: string): Promise<User | undefined> {\n    if (this.isMongoConnected) {\n      try {\n        const user = await UserModel.findById(id);\n        return user || undefined;\n      } catch (error) {\n        console.error('Error fetching user from MongoDB:', (error as Error).message);\n      }\n    }\n    return this.demoUsers.get(id);\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    if (this.isMongoConnected) {\n      try {\n        const user = await UserModel.findByIdAndUpdate(\n          userData._id,\n          {\n            ...userData,\n            role: userData.role || \"viewer\",\n            updatedAt: new Date(),\n          },\n          { upsert: true, new: true }\n        );\n        return user!;\n      } catch (error) {\n        console.error('Error upserting user to MongoDB:', (error as Error).message);\n        console.log('Falling back to in-memory storage');\n        this.isMongoConnected = false;\n      }\n    }\n    \n    const user: User = {\n      _id: userData._id,\n      email: userData.email,\n      firstName: userData.firstName,\n      lastName: userData.lastName,\n      role: userData.role || \"viewer\",\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    } as User;\n    \n    this.demoUsers.set(userData._id, user);\n    return user;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    if (this.isMongoConnected) {\n      try {\n        const users = await UserModel.find().sort({ createdAt: -1 });\n        return users;\n      } catch (error) {\n        console.error('Error fetching users from MongoDB:', (error as Error).message);\n        console.log('Falling back to in-memory users');\n        this.isMongoConnected = false;\n      }\n    }\n    return Array.from(this.demoUsers.values()).sort((a, b) => \n      new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n    );\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    if (this.isMongoConnected) {\n      try {\n        const user = await UserModel.findOne({ email });\n        return user || undefined;\n      } catch (error) {\n        console.error('Error fetching user by email from MongoDB:', (error as Error).message);\n      }\n    }\n    return Array.from(this.demoUsers.values()).find(u => u.email === email);\n  }\n\n  async createUser(userData: { email: string; firstName: string; lastName?: string; role: string; password: string }): Promise<User> {\n    if (this.isMongoConnected) {\n      try {\n        const id = `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n        const newUser = await UserModel.create({\n          _id: id,\n          email: userData.email,\n          firstName: userData.firstName,\n          lastName: userData.lastName,\n          password: userData.password,\n          role: userData.role,\n        });\n        return newUser;\n      } catch (error) {\n        console.error('Error creating user in MongoDB:', (error as Error).message);\n        console.log('Falling back to in-memory storage');\n        this.isMongoConnected = false;\n      }\n    }\n    \n    const id = `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const newUser: User = {\n      _id: id,\n      email: userData.email,\n      firstName: userData.firstName,\n      lastName: userData.lastName,\n      password: userData.password,\n      role: userData.role,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    \n    this.demoUsers.set(id, newUser);\n    return newUser;\n  }\n\n  async updateUser(id: string, userData: Partial<{ email: string; firstName: string; lastName?: string; role: string; password?: string }>): Promise<User> {\n    if (this.isMongoConnected) {\n      try {\n        const user = await UserModel.findByIdAndUpdate(\n          id,\n          {\n            ...userData,\n            updatedAt: new Date(),\n          },\n          { new: true }\n        );\n        if (!user) throw new Error('User not found');\n        return user;\n      } catch (error) {\n        console.error('Error updating user in MongoDB:', (error as Error).message);\n        throw error;\n      }\n    }\n    \n    const existingUser = this.demoUsers.get(id);\n    if (!existingUser) throw new Error('User not found');\n    \n    const updatedUser: User = {\n      ...existingUser,\n      ...userData,\n      updatedAt: new Date(),\n    };\n    \n    this.demoUsers.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  async deleteUser(id: string): Promise<void> {\n    if (this.isMongoConnected) {\n      try {\n        await UserModel.findByIdAndDelete(id);\n      } catch (error) {\n        console.error('Error deleting user from MongoDB:', (error as Error).message);\n        throw error;\n      }\n    } else {\n      this.demoUsers.delete(id);\n    }\n  }\n\n  // Resident operations\n  async getAllResidents(): Promise<Resident[]> {\n    if (this.isMongoConnected) {\n      try {\n        const residents = await ResidentModel.find({ status: 'active' })\n          .sort({ department: 1, fullName: 1 });\n        return residents;\n      } catch (error) {\n        console.error('Error fetching residents from MongoDB:', (error as Error).message);\n      }\n    }\n    return Array.from(this.demoResidents.values()).sort((a, b) => \n      new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n    );\n  }\n\n  async getResident(id: string): Promise<Resident | undefined> {\n    if (this.isMongoConnected) {\n      try {\n        const resident = await ResidentModel.findById(id);\n        return resident || undefined;\n      } catch (error) {\n        console.error('Error fetching resident from MongoDB:', (error as Error).message);\n      }\n    }\n    return this.demoResidents.get(id);\n  }\n\n  async createResident(resident: InsertResident): Promise<Resident> {\n    if (this.isMongoConnected) {\n      try {\n        const newResident = await ResidentModel.create(resident);\n        return newResident;\n      } catch (error) {\n        console.error('Error creating resident in MongoDB:', (error as Error).message);\n      }\n    }\n    \n    const id = `resident_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const newResident: Resident = {\n      _id: id,\n      ...resident,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    } as Resident;\n    \n    this.demoResidents.set(id, newResident);\n    return newResident;\n  }\n\n  async updateResident(id: string, resident: Partial<InsertResident>): Promise<Resident> {\n    const existing = this.demoResidents.get(id);\n    if (!existing) {\n      throw new Error('Resident not found');\n    }\n    \n    const updated = { ...existing, ...resident, updatedAt: new Date() } as Resident;\n    this.demoResidents.set(id, updated);\n    return updated;\n  }\n\n  async deleteResident(id: string): Promise<void> {\n    this.demoResidents.delete(id);\n  }\n\n\n  // Teacher operations\n  async getAllTeachers(): Promise<Teacher[]> {\n    if (this.isMongoConnected) {\n      try {\n        const teachers = await TeacherModel.find({ status: 'active' })\n          .sort({ department: 1, name: 1 });\n        return teachers;\n      } catch (error) {\n        console.error('Error fetching teachers from MongoDB:', (error as Error).message);\n      }\n    }\n    return Array.from(this.demoTeachers.values()).sort((a, b) => \n      new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n    );\n  }\n\n  async getTeacher(id: string): Promise<Teacher | undefined> {\n    if (this.isMongoConnected) {\n      try {\n        const teacher = await TeacherModel.findById(id);\n        return teacher || undefined;\n      } catch (error) {\n        console.error('Error fetching teacher from MongoDB:', (error as Error).message);\n      }\n    }\n    return this.demoTeachers.get(id);\n  }\n\n  async createTeacher(teacherData: InsertTeacher): Promise<Teacher> {\n    if (this.isMongoConnected) {\n      try {\n        const teacher = await TeacherModel.create(teacherData);\n        return teacher;\n      } catch (error) {\n        console.error('Error creating teacher in MongoDB:', (error as Error).message);\n      }\n    }\n    \n    const id = `teacher_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const newTeacher: Teacher = {\n      _id: id,\n      ...teacherData,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    } as Teacher;\n    \n    this.demoTeachers.set(id, newTeacher);\n    return newTeacher;\n  }\n\n  async updateTeacher(id: string, teacherData: Partial<InsertTeacher>): Promise<Teacher> {\n    if (this.isMongoConnected) {\n      try {\n        const teacher = await TeacherModel.findByIdAndUpdate(\n          id,\n          { ...teacherData, updatedAt: new Date() },\n          { new: true }\n        );\n        if (!teacher) {\n          throw new Error('Teacher not found');\n        }\n        return teacher;\n      } catch (error) {\n        console.error('Error updating teacher in MongoDB:', (error as Error).message);\n      }\n    }\n    \n    const existing = this.demoTeachers.get(id);\n    if (!existing) {\n      throw new Error('Teacher not found');\n    }\n    \n    const updated = { ...existing, ...teacherData, updatedAt: new Date() } as Teacher;\n    this.demoTeachers.set(id, updated);\n    return updated;\n  }\n\n  async deleteTeacher(id: string): Promise<void> {\n    if (this.isMongoConnected) {\n      try {\n        const result = await TeacherModel.findByIdAndDelete(id);\n      } catch (error) {\n        console.error('Error deleting teacher from MongoDB:', (error as Error).message);\n      }\n    }\n    \n    this.demoTeachers.delete(id);\n  }\n\n  // Form operations\n  async getResidentForms(residentId: string): Promise<Form[]> {\n    return Array.from(this.demoForms.values())\n      .filter(form => form.residentId === residentId)\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n  }\n\n  async getForm(id: string): Promise<Form | undefined> {\n    return this.demoForms.get(id);\n  }\n\n  async createForm(form: InsertForm): Promise<Form> {\n    const id = `form_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const newForm: Form = {\n      _id: id,\n      ...form,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    } as Form;\n    \n    this.demoForms.set(id, newForm);\n    return newForm;\n  }\n\n  async updateForm(id: string, form: Partial<InsertForm>): Promise<Form> {\n    const existing = this.demoForms.get(id);\n    if (!existing) {\n      throw new Error('Form not found');\n    }\n    \n    const updated = { ...existing, ...form, updatedAt: new Date() } as Form;\n    this.demoForms.set(id, updated);\n    return updated;\n  }\n\n  async deleteForm(id: string): Promise<void> {\n    this.demoForms.delete(id);\n  }\n\n  // Disciplinary action operations\n  async getResidentDisciplinaryActions(residentId: string): Promise<DisciplinaryAction[]> {\n    return Array.from(this.demoDisciplinaryActions.values())\n      .filter(action => action.residentId === residentId)\n      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n  }\n\n  async createDisciplinaryAction(action: InsertDisciplinaryAction): Promise<DisciplinaryAction> {\n    const id = `disciplinary_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const newAction: DisciplinaryAction = {\n      _id: id,\n      ...action,\n    } as DisciplinaryAction;\n    \n    this.demoDisciplinaryActions.set(id, newAction);\n    return newAction;\n  }\n\n  async updateDisciplinaryAction(\n    id: string,\n    action: Partial<InsertDisciplinaryAction>\n  ): Promise<DisciplinaryAction> {\n    const existing = this.demoDisciplinaryActions.get(id);\n    if (!existing) {\n      throw new Error('Disciplinary action not found');\n    }\n    \n    const updated = { ...existing, ...action } as DisciplinaryAction;\n    this.demoDisciplinaryActions.set(id, updated);\n    return updated;\n  }\n\n  async deleteDisciplinaryAction(id: string): Promise<void> {\n    this.demoDisciplinaryActions.delete(id);\n  }\n\n  // Reward operations\n  async getResidentRewards(residentId: string): Promise<Reward[]> {\n    return Array.from(this.demoRewards.values())\n      .filter(reward => reward.residentId === residentId)\n      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n  }\n\n  async createReward(reward: InsertReward): Promise<Reward> {\n    const id = `reward_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const newReward: Reward = {\n      _id: id,\n      ...reward,\n    } as Reward;\n    \n    this.demoRewards.set(id, newReward);\n    return newReward;\n  }\n\n  async updateReward(id: string, reward: Partial<InsertReward>): Promise<Reward> {\n    const existing = this.demoRewards.get(id);\n    if (!existing) {\n      throw new Error('Reward not found');\n    }\n    \n    const updated = { ...existing, ...reward } as Reward;\n    this.demoRewards.set(id, updated);\n    return updated;\n  }\n\n  async deleteReward(id: string): Promise<void> {\n    this.demoRewards.delete(id);\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":17278},"server/controllers/index.ts":{"content":"export * from './userController';\nexport * from './residentController';\nexport * from './teacherController';","size_bytes":108},"server/models/form-K.ts":{"content":"import mongoose, { Schema, Document, Types } from \"mongoose\";\r\n\r\n// این همان ساختار هر سطر ارزیابی مونوگراف است\r\nexport interface IMonographRow {\r\n  section: string;\r\n  percentage: string;\r\n  score: string;\r\n  teacherName: string;\r\n  teacherSigned: boolean;\r\n  characteristics: string;\r\n  total: string;\r\n  average: string;\r\n  notes: string;\r\n}\r\n\r\n// ساختار کامل فرم\r\nexport interface IMonographEvaluation extends Document {\r\n  trainer: Types.ObjectId; // رفرنس به جدول Trainer\r\n  name: string;\r\n  lastName: string;\r\n  parentType: string;\r\n  idNumber: string;\r\n  department: string;\r\n  trainingYear: string;\r\n  startYear: string;\r\n  date: string;\r\n  evaluations: IMonographRow[];\r\n}\r\n\r\nconst MonographRowSchema: Schema = new Schema({\r\n  section: { type: String, required: true },\r\n  percentage: { type: String, default: \"\" },\r\n  score: { type: String, default: \"\" },\r\n  teacherName: { type: String, default: \"\" },\r\n  teacherSigned: { type: Boolean, default: false },\r\n  characteristics: { type: String, default: \"\" },\r\n  total: { type: String, default: \"\" },\r\n  average: { type: String, default: \"\" },\r\n  notes: { type: String, default: \"\" },\r\n});\r\n\r\nconst MonographEvaluationSchema: Schema = new Schema({\r\n  trainer: { type: Schema.Types.ObjectId, ref: \"Trainer\", required: true },\r\n  name: { type: String, required: true },\r\n  lastName: { type: String, required: true },\r\n  parentType: { type: String, required: true },\r\n  idNumber: { type: String, default: \"\" },\r\n  department: { type: String, default: \"\" },\r\n  trainingYear: { type: String, default: \"\" },\r\n  startYear: { type: String, default: \"\" },\r\n  date: { type: String, default: \"\" },\r\n  evaluations: { type: [MonographRowSchema], default: [] },\r\n}, { timestamps: true });\r\n\r\nexport const MonographEvaluation = mongoose.model<IMonographEvaluation>(\r\n  \"MonographEvaluation\",\r\n  MonographEvaluationSchema\r\n);\r\n","size_bytes":1929},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"server/models/form-G.ts":{"content":"import mongoose, { Schema, Document, Types } from \"mongoose\";\r\n\r\n// هر ردیف از جدول نمرات\r\ninterface IScoreRow {\r\n  exam1Written: number;\r\n  exam1Practical: number;\r\n  exam2Written: number;\r\n  exam2Practical: number;\r\n  finalWritten: number;\r\n  finalPractical: number;\r\n  total: number;\r\n  teacherName: string;\r\n}\r\n\r\n// اطلاعات شخصی\r\ninterface IPersonalInfo {\r\n  Name: string;\r\n  parentType: string;\r\n  trainingYear: string;\r\n  year: string;\r\n  department: string;\r\n}\r\n\r\nexport interface IEvaluationFormG extends Document {\r\n  trainer: Types.ObjectId; // رفرنس به Trainer\r\n  personalInfo: IPersonalInfo;\r\n  scores: IScoreRow[]; // شش ردیف شامل ردیف ششم اوسط\r\n  averageScore: number;\r\n}\r\n\r\nconst ScoreRowSchema = new Schema<IScoreRow>({\r\n  exam1Written: { type: Number, default: 0 },\r\n  exam1Practical: { type: Number, default: 0 },\r\n  exam2Written: { type: Number, default: 0 },\r\n  exam2Practical: { type: Number, default: 0 },\r\n  finalWritten: { type: Number, default: 0 },\r\n  finalPractical: { type: Number, default: 0 },\r\n  total: { type: Number, default: 0 },\r\n  teacherName: { type: String, default: \"\" },\r\n});\r\n\r\nconst PersonalInfoSchema = new Schema<IPersonalInfo>({\r\n  Name: { type: String, required: true },\r\n  parentType: { type: String, required: true },\r\n  trainingYear: { type: String, required: true },\r\n  year: { type: String, required: true },\r\n  department: { type: String, required: true },\r\n});\r\n\r\nconst EvaluationFormGSchema = new Schema<IEvaluationFormG>(\r\n  {\r\n    trainer: {\r\n      type: Schema.Types.ObjectId,\r\n      ref: \"Trainer\", // رفرنس به مدل Trainer\r\n      required: true,\r\n    },\r\n    personalInfo: { type: PersonalInfoSchema, required: true },\r\n    scores: { type: [ScoreRowSchema], required: true },\r\n    averageScore: { type: Number, default: 0 },\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\nexport const EvaluationFormG = mongoose.model<IEvaluationFormG>(\r\n  \"EvaluationFormG\",\r\n  EvaluationFormGSchema\r\n);\r\n","size_bytes":2003},"server/models/form-E.ts":{"content":"import mongoose, { Schema, Document, Types } from \"mongoose\";\r\n\r\nexport interface IEvaluationFormE extends Document {\r\n  trainer: Types.ObjectId;\r\n  Name: string;\r\n  parentType: string;\r\n  trainingYear: string;\r\n  incidentTitle: string;\r\n  date: string;\r\n  scores: { score: string; teacherName: string; notes?: string }[]; // 👈 آرایه\r\n  averageScore: string;\r\n}\r\n\r\nconst EvaluationFormESchema = new Schema<IEvaluationFormE>(\r\n  {\r\n    trainer: { type: Schema.Types.ObjectId, ref: \"Trainer\", required: true },\r\n    Name: { type: String, required: true },\r\n    parentType: { type: String, required: true },\r\n    trainingYear: { type: String, required: true },\r\n    incidentTitle: { type: String, required: true },\r\n    date: { type: String, required: true },\r\n    scores: [\r\n      {\r\n        score: { type: String, default: \"\" },\r\n        teacherName: { type: String, default: \"\" },\r\n        notes: { type: String, default: \"\" }\r\n      }\r\n    ],\r\n    averageScore: { type: String, default: \"\" },\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\nexport const EvaluationFormE = mongoose.model<IEvaluationFormE>(\r\n  \"EvaluationFormE\",\r\n  EvaluationFormESchema\r\n);\r\n","size_bytes":1156},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"server/routes/form-E.ts":{"content":"// routes/evaluationFormERoutes.ts\r\nimport express from \"express\";\r\nimport { EvaluationFormEController } from \"../controllers/form-E\";\r\n\r\nconst router = express.Router();\r\n\r\n// 🔹 ایجاد فرم جدید\r\nrouter.post(\"/\", EvaluationFormEController.create);\r\n\r\n// 🔹 دریافت همه فرم‌ها یا فیلتر بر اساس trainerId\r\nrouter.get(\"/\", EvaluationFormEController.getAll);\r\n\r\n// 🔹 دریافت فرم بر اساس ID\r\nrouter.get(\"/:id\", EvaluationFormEController.getById);\r\n\r\n// 🔹 بروزرسانی فرم بر اساس ID\r\nrouter.put(\"/:id\", EvaluationFormEController.update);\r\n\r\n// 🔹 حذف فرم بر اساس ID\r\nrouter.delete(\"/:id\", EvaluationFormEController.delete);\r\n\r\nexport default router;\r\n","size_bytes":739},"client/src/components/teachers/EditTeacherModal.tsx":{"content":"import { useState, useEffect } from \"react\";\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\r\nimport { Teacher } from \"@shared/schema\";\r\n\r\ninterface EditTeacherModalProps {\r\n  teacher: Teacher | null;\r\n  open: boolean;\r\n  onClose: () => void;\r\n  onSave: (updatedTeacher: Teacher) => void;\r\n}\r\n\r\nexport default function EditTeacherModal({ teacher, open, onClose, onSave }: EditTeacherModalProps) {\r\n  const [formValues, setFormValues] = useState<Teacher | null>(teacher);\r\n\r\n  // وقتی استاد جدید انتخاب شد، فرم ریست شود\r\n  useEffect(() => {\r\n    setFormValues(teacher);\r\n  }, [teacher]);\r\n\r\n  if (!formValues) return null;\r\n\r\n  const handleChange = (field: keyof Teacher, value: any) => {\r\n    setFormValues(prev => prev ? { ...prev, [field]: value } : prev);\r\n  };\r\n\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (formValues) {\r\n      onSave(formValues); // ارسال به والد\r\n      onClose();          // بستن مودال\r\n    }\r\n  };\r\n\r\n  const formatDate = (date: string | Date | undefined) => {\r\n    if (!date) return \"\";\r\n    const d = new Date(date);\r\n    return d.toISOString().slice(0, 10); // YYYY-MM-DD برای input type=\"date\"\r\n  };\r\n\r\n  return (\r\n    <Dialog open={open} onOpenChange={onClose}>\r\n      <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\">\r\n        <DialogHeader>\r\n          <DialogTitle className=\"flex items-center space-x-4 rtl:space-x-reverse\">\r\n            <Avatar className=\"h-14 w-14\">\r\n              <AvatarImage src={formValues.profileImageUrl || \"\"} alt={formValues.name} />\r\n              <AvatarFallback>{formValues.name.charAt(0)}</AvatarFallback>\r\n            </Avatar>\r\n            <span className=\"text-xl font-semibold\">ویرایش استاد</span>\r\n          </DialogTitle>\r\n        </DialogHeader>\r\n\r\n        <form onSubmit={handleSubmit} className=\"grid grid-cols-2 gap-4 text-sm mt-4\">\r\n          <InputItem label=\"نام\" value={formValues.name} onChange={val => handleChange(\"name\", val)} />\r\n          {/* <InputItem label=\"تخلص\" value={formValues.lostname} onChange={val => handleChange(\"lostname\", val)} /> */}\r\n          <InputItem label=\"نام پدر\" value={formValues.fatherName} onChange={val => handleChange(\"fatherName\", val)} />\r\n          <InputItem label=\"نام پدر کلان\" value={formValues.grandfatherName} onChange={val => handleChange(\"grandfatherName\", val)} />\r\n          <InputItem label=\"رتبه علمی\" value={formValues.academicRank} onChange={val => handleChange(\"academicRank\", val)} />\r\n          <InputItem\r\n            label=\"تاریخ اخذ رتبه\"\r\n            type=\"date\"\r\n            value={formatDate(formValues.rankAchievementDate)}\r\n            onChange={val => handleChange(\"rankAchievementDate\", val)}\r\n          />\r\n          <InputItem\r\n            label=\"تاریخ تقرری مربی\"\r\n            type=\"date\"\r\n            value={formatDate(formValues.trainerAppointmentDate)}\r\n            onChange={val => handleChange(\"trainerAppointmentDate\", val)}\r\n          />\r\n          <InputItem label=\"جنسیت\" value={formValues.gender} onChange={val => handleChange(\"gender\", val)} />\r\n          <InputItem label=\"ولایت\" value={formValues.province} onChange={val => handleChange(\"province\", val)} />\r\n          <InputItem label=\"مضمون\" value={formValues.subject} onChange={val => handleChange(\"subject\", val)} />\r\n          <InputItem label=\"وظیفه / موقف\" value={formValues.position} onChange={val => handleChange(\"position\", val)} />\r\n          <InputItem label=\"شفاخانه\" value={formValues.hospital} onChange={val => handleChange(\"hospital\", val)} />\r\n          <InputItem\r\n            label=\"تاریخ تولد\"\r\n            type=\"date\"\r\n            value={formatDate(formValues.dateOfBirth)}\r\n            onChange={val => handleChange(\"dateOfBirth\", val)}\r\n          />\r\n          <InputItem label=\"نمبر تذکره\" value={formValues.idNumber} onChange={val => handleChange(\"idNumber\", val)} />\r\n          <InputItem\r\n            label=\"تاریخ شروع وظیفه\"\r\n            type=\"date\"\r\n            value={formatDate(formValues.dutyStartDate)}\r\n            onChange={val => handleChange(\"dutyStartDate\", val)}\r\n          />\r\n          <InputItem label=\"شماره تماس\" value={formValues.contactInfo} onChange={val => handleChange(\"contactInfo\", val)} />\r\n          <InputItem label=\"نمبر واتساپ\" value={formValues.whatsappNumber} onChange={val => handleChange(\"whatsappNumber\", val)} />\r\n          <InputItem label=\"ایمیل\" value={formValues.emailAddress} onChange={val => handleChange(\"emailAddress\", val)} />\r\n          <InputItem label=\"کود پوست\" value={formValues.postCode} onChange={val => handleChange(\"postCode\", val)} />\r\n          <InputItem label=\"نوع تقرری\" value={formValues.appointmentType} onChange={val => handleChange(\"appointmentType\", val)} />\r\n          {/* <InputItem label=\"دیپارتمنت\" value={formValues.department} onChange={val => handleChange(\"department\", val)} /> */}\r\n          {/* <InputItem label=\"تجربه کاری\" type=\"number\" value={formValues.experience} onChange={val => handleChange(\"experience\", val)} /> */}\r\n          <div className=\"col-span-2 flex justify-end space-x-2 rtl:space-x-reverse mt-4\">\r\n            <Button type=\"button\" variant=\"outline\" onClick={onClose}>بستن</Button>\r\n            <Button type=\"submit\" variant=\"default\">ذخیره</Button>\r\n          </div>\r\n        </form>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nfunction InputItem({\r\n  label,\r\n  value,\r\n  onChange,\r\n  type = \"text\",\r\n}: {\r\n  label: string;\r\n  value: any;\r\n  onChange: (val: any) => void;\r\n  type?: string;\r\n}) {\r\n  return (\r\n    <div className=\"flex flex-col\">\r\n      <label className=\"text-gray-500 text-xs\">{label}</label>\r\n      <input\r\n        type={type}\r\n        className=\"border rounded px-2 py-1 text-sm\"\r\n        value={value || \"\"}\r\n        onChange={e => onChange(e.target.value)}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","size_bytes":6231},"server/controllers/form-K.ts":{"content":"// controllers/monographEvaluationController.ts\r\nimport { Request, Response } from \"express\";\r\nimport mongoose from \"mongoose\";\r\nimport { MonographEvaluation } from \"../models/form-K\";\r\n\r\nexport class MonographEvaluationController {\r\n  // 🔹 ایجاد فرم جدید\r\n  static async create(req: Request, res: Response) {\r\n    try {\r\n      const {\r\n        trainer,\r\n        name,\r\n        lastName,\r\n        parentType,\r\n        idNumber,\r\n        department,\r\n        trainingYear,\r\n        startYear,\r\n        date,\r\n        evaluations,\r\n      } = req.body;\r\n\r\n      if (!trainer) {\r\n        return res.status(400).json({ message: \"Trainer ID الزامی است\" });\r\n      }\r\n\r\n        \r\n      const form = new MonographEvaluation({\r\n        trainer: new mongoose.Types.ObjectId(trainer),\r\n        name,\r\n        lastName,\r\n        parentType,\r\n        idNumber,\r\n        department,\r\n        trainingYear,\r\n        startYear,\r\n        date,\r\n        evaluations,\r\n      });\r\n\r\n      await form.save();\r\n      res.status(201).json({ message: \"✅ فرم با موفقیت ذخیره شد\", form });\r\n    } catch (error) {\r\n      console.error(\"❌ Error creating MonographEvaluation:\", error);\r\n      res.status(500).json({ message: \"خطا در ایجاد فرم\", error });\r\n    }\r\n  }\r\n\r\n  // 🔹 دریافت همه فرم‌ها یا فیلتر بر اساس trainerId\r\n  static async getAll(req: Request, res: Response) {\r\n    try {\r\n      const { trainerId } = req.query;\r\n      const filter = trainerId\r\n        ? { trainer: new mongoose.Types.ObjectId(trainerId as string) }\r\n        : {};\r\n\r\n      const forms = await MonographEvaluation.find(filter)\r\n        .populate(\"trainer\")\r\n        .sort({ createdAt: -1 });\r\n\r\n      res.status(200).json(forms);\r\n    } catch (error) {\r\n      console.error(\"❌ Error fetching MonographEvaluations:\", error);\r\n      res.status(500).json({ message: \"خطا در دریافت فرم‌ها\", error });\r\n    }\r\n  }\r\n\r\n  // 🔹 دریافت فرم بر اساس ID\r\n  static async getById(req: Request, res: Response) {\r\n    try {\r\n      const form = await MonographEvaluation.findById(req.params.id).populate(\r\n        \"trainer\"\r\n      );\r\n      if (!form) return res.status(404).json({ message: \"فرم پیدا نشد\" });\r\n      res.json(form);\r\n    } catch (error) {\r\n      console.error(\"❌ Error fetching MonographEvaluation:\", error);\r\n      res.status(500).json({ message: \"خطا در دریافت فرم\", error });\r\n    }\r\n  }\r\n\r\n  // 🔹 بروزرسانی فرم بر اساس ID\r\n  static async update(req: Request, res: Response) {\r\n    try {\r\n      const updated = await MonographEvaluation.findByIdAndUpdate(\r\n        req.params.id,\r\n        req.body,\r\n        { new: true }\r\n      );\r\n      if (!updated) return res.status(404).json({ message: \"فرم پیدا نشد\" });\r\n      res.json({ message: \"✅ فرم بروزرسانی شد\", updated });\r\n    } catch (error) {\r\n      console.error(\"❌ Error updating MonographEvaluation:\", error);\r\n      res.status(500).json({ message: \"خطا در بروزرسانی فرم\", error });\r\n    }\r\n  }\r\n\r\n  // 🔹 حذف فرم بر اساس ID\r\n  static async delete(req: Request, res: Response) {\r\n    try {\r\n      const deleted = await MonographEvaluation.findByIdAndDelete(\r\n        req.params.id\r\n      );\r\n      if (!deleted) return res.status(404).json({ message: \"فرم پیدا نشد\" });\r\n      res.json({ message: \"✅ فرم با موفقیت حذف شد\" });\r\n    } catch (error) {\r\n      console.error(\"❌ Error deleting MonographEvaluation:\", error);\r\n      res.status(500).json({ message: \"خطا در حذف فرم\", error });\r\n    }\r\n  }\r\n}\r\n","size_bytes":3688},"server/controllers/form-H.ts":{"content":"// controllers/evaluationFormHController.ts\r\nimport { Request, Response } from \"express\";\r\nimport mongoose from \"mongoose\";\r\nimport { EvaluationFormH } from \"../models/form-H\";\r\n\r\nexport class EvaluationFormHController {\r\n  // 🔹 ایجاد فرم جدید\r\n  static async create(req: Request, res: Response) {\r\n    try {\r\n      const {\r\n        trainer,\r\n        Name,\r\n        parentType,\r\n        department,\r\n        trainingYears,\r\n        averageScore,\r\n        shiftDepartment,\r\n        programDirector,\r\n      } = req.body;\r\n\r\n      if (!trainer) {\r\n        return res.status(400).json({ message: \"Trainer ID الزامی است\" });\r\n      }\r\n\r\n      // 🔹 بررسی وجود فرم قبلی برای همین Trainer\r\n        \r\n\r\n      const form = new EvaluationFormH({\r\n        trainer: new mongoose.Types.ObjectId(trainer),\r\n        Name,\r\n        parentType,\r\n        department,\r\n        trainingYears,\r\n        averageScore,\r\n        shiftDepartment,\r\n        programDirector,\r\n      });\r\n\r\n      await form.save();\r\n      res.status(201).json({ message: \"✅ فرم با موفقیت ذخیره شد\", form });\r\n    } catch (err) {\r\n      console.error(\"❌ Error saving EvaluationFormH:\", err);\r\n      res.status(500).json({ message: \"خطا در ذخیره فرم\", error: err });\r\n    }\r\n  }\r\n\r\n  // 🔹 دریافت همه فرم‌ها یا فیلتر بر اساس trainerId\r\n  static async getAll(req: Request, res: Response) {\r\n    try {\r\n      const { trainerId } = req.query;\r\n      const filter = trainerId\r\n        ? { trainer: new mongoose.Types.ObjectId(trainerId as string) }\r\n        : {};\r\n\r\n      const forms = await EvaluationFormH.find(filter)\r\n        .populate(\"trainer\")\r\n        .sort({ createdAt: -1 });\r\n\r\n      res.status(200).json(forms);\r\n    } catch (err) {\r\n      console.error(\"❌ Error fetching EvaluationFormH:\", err);\r\n      res.status(500).json({ message: \"خطا در دریافت فرم‌ها\", error: err });\r\n    }\r\n  }\r\n\r\n  // 🔹 دریافت فرم بر اساس ID\r\n  static async getById(req: Request, res: Response) {\r\n    try {\r\n      const form = await EvaluationFormH.findById(req.params.id).populate(\r\n        \"trainer\"\r\n      );\r\n      if (!form) return res.status(404).json({ message: \"فرم پیدا نشد\" });\r\n      res.json(form);\r\n    } catch (err) {\r\n      console.error(\"❌ Error fetching EvaluationFormH:\", err);\r\n      res.status(500).json({ message: \"خطا در دریافت فرم\", error: err });\r\n    }\r\n  }\r\n\r\n  // 🔹 بروزرسانی فرم بر اساس ID\r\n  static async update(req: Request, res: Response) {\r\n    try {\r\n      const updated = await EvaluationFormH.findByIdAndUpdate(\r\n        req.params.id,\r\n        req.body,\r\n        { new: true }\r\n      );\r\n      if (!updated) return res.status(404).json({ message: \"فرم پیدا نشد\" });\r\n      res.json({ message: \"✅ فرم بروزرسانی شد\", updated });\r\n    } catch (err) {\r\n      console.error(\"❌ Error updating EvaluationFormH:\", err);\r\n      res.status(500).json({ message: \"خطا در بروزرسانی فرم\", error: err });\r\n    }\r\n  }\r\n\r\n  // 🔹 حذف فرم بر اساس ID\r\n  static async delete(req: Request, res: Response) {\r\n    try {\r\n      const deleted = await EvaluationFormH.findByIdAndDelete(req.params.id);\r\n      if (!deleted) return res.status(404).json({ message: \"فرم پیدا نشد\" });\r\n      res.json({ message: \"✅ فرم با موفقیت حذف شد\" });\r\n    } catch (err) {\r\n      console.error(\"❌ Error deleting EvaluationFormH:\", err);\r\n      res.status(500).json({ message: \"خطا در حذف فرم\", error: err });\r\n    }\r\n  }\r\n}\r\n","size_bytes":3661},"client/src/hooks/useTrainers.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\r\nimport type { Trainer } from \"server/models/Trainers\";\r\n\r\nexport function useTrainers() {\r\n  return useQuery<Trainer[]>({\r\n    queryKey: [\"trainers\"],\r\n    queryFn: async () => {\r\n      const res = await fetch(\"/api/trainers\");\r\n      if (!res.ok) throw new Error(\"Failed to fetch trainers\");\r\n      return res.json();\r\n    },\r\n  });\r\n}\r\n","size_bytes":389},"client/src/components/residents/form-details/formJ-detail.tsx":{"content":"import React, { useEffect, useState, useRef } from \"react\";\nimport { useReactToPrint } from \"react-to-print\";\nimport * as XLSX from \"xlsx\";\n\ninterface TeacherActivityFormProps {\n  trainerId: string;\n  onClose?: () => void;\n}\n\ntype Activity = {\n  _id: string;\n  section: string;\n  activity: string;\n  evaluators: boolean[];\n};\n\ntype FormJ = {\n  _id: string;\n  trainerId: string;\n  name: string;\n  parentType: string;\n  trainingYear: string;\n  teachers: string[];\n  activities: Activity[];\n};\n\nconst Check: React.FC<{ on: boolean }> = ({ on }) => (\n  <span className=\"inline-block w-5 h-5 flex items-center justify-center\">\n    {on && (\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 24 24\"\n        className=\"w-4 h-4\"\n      >\n        <path\n          fill=\"currentColor\"\n          d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\"\n        />\n      </svg>\n    )}\n  </span>\n);\n\nexport default function TeacherActivityForm({\n  trainerId,\n}: TeacherActivityFormProps) {\n  const [data, setData] = useState<FormJ | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [editing, setEditing] = useState(false);\n  const printRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        const res = await fetch(\n          `http://localhost:5000/api/teacher-activities/${trainerId}`\n        );\n        if (!res.ok) throw new Error(\"فرمی برای این ترینر موجود نیست\");\n        const result = await res.json();\n        setData(result);\n      } catch (err) {\n        console.error(err);\n        setData(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [trainerId]);\n\n  const handlePrint = useReactToPrint({\n    content: () => printRef.current,\n    documentTitle: \"FormJ\",\n  });\n\n  const handleExportExcel = () => {\n    if (!data) return;\n    const wsData = [\n      [\"#\", \"Section\", \"Activity\", ...(data.teachers || [])],\n      ...(data.activities?.map((act, idx) => [\n        idx + 1,\n        act.section,\n        act.activity,\n        ...(act.evaluators || []).map((v) => (v ? \"✓\" : \"\")),\n      ]) || []),\n    ];\n    const ws = XLSX.utils.aoa_to_sheet(wsData);\n    const wb = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, ws, \"FormJ\");\n    XLSX.writeFile(wb, \"FormJ.xlsx\");\n  };\n\n  const toggleEvaluator = (actIdx: number, tIdx: number) => {\n    if (!data?.activities) return;\n    const newActivities = [...data.activities];\n    newActivities[actIdx].evaluators[tIdx] =\n      !newActivities[actIdx].evaluators[tIdx];\n    setData({ ...data, activities: newActivities });\n  };\n\n  const handleSave = async () => {\n    if (!data) return;\n    try {\n      const res = await fetch(\n        `http://localhost:5000/api/teacher-activities/${data._id}`,\n        {\n          method: \"PUT\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(data),\n        }\n      );\n      if (!res.ok) throw new Error(\"خطا در ذخیره فرم\");\n      const updated = await res.json();\n      setData(updated.form || updated);\n      setEditing(false);\n      alert(\"✅ فرم با موفقیت ذخیره شد\");\n    } catch (err) {\n      console.error(err);\n      alert(\"❌ خطا در ذخیره فرم\");\n    }\n  };\n\n  if (loading) return <div className=\"p-4\">در حال بارگذاری...</div>;\n  if (!data)\n    return (\n      <div className=\"p-4 text-red-600\">فرمی برای این ترینر موجود نیست</div>\n    );\n\n  const groupedActivities: Record<string, Activity[]> = {};\n  data.activities?.forEach((act) => {\n    if (!groupedActivities[act.section]) groupedActivities[act.section] = [];\n    groupedActivities[act.section].push(act);\n  });\n\n  return (\n    <div style={{ fontFamily: \"Calibri, sans-serif\" }}>\n      <div className=\"p-4\">\n        <div className=\"mb-4 flex items-center justify-between\">\n          <h1 className=\"text-2xl font-bold mb-4 text-center\">\n            چک لیست امتحان عملی و نظری ترینی‌های شفاخانه نور\n          </h1>\n          <div className=\"space-x-2\">\n            <button\n              onClick={handlePrint}\n              className=\"bg-green-600 text-white px-3 py-1 rounded\"\n            >\n              PDF\n            </button>\n            <button\n              onClick={handleExportExcel}\n              className=\"bg-yellow-500 text-white px-3 py-1 rounded\"\n            >\n              Excel\n            </button>\n            <button\n              onClick={() => setEditing(!editing)}\n              className=\"bg-blue-600 text-white px-3 py-1 rounded\"\n            >\n              {editing ? \"لغو\" : \"ویرایش\"}\n            </button>\n            {editing && (\n              <button\n                onClick={handleSave}\n                className=\"bg-green-700 text-white px-3 py-1 rounded\"\n              >\n                ذخیره\n              </button>\n            )}\n          </div>\n        </div>\n\n        <div\n          ref={printRef}\n          className=\"border rounded-lg p-4 mb-4 bg-white shadow-sm\"\n        >\n          {/* Header Editable */}\n          <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-3 mb-4\">\n            <div className=\"flex flex-col\">\n              <label className=\"text-sm text-gray-600 mb-1\">اسم</label>\n              <input\n                type=\"text\"\n                value={data.name || \"\"}\n                onChange={(e) => setData({ ...data, name: e.target.value })}\n                className={`border rounded px-3 py-2 text-center ${\n                  editing ? \"bg-white\" : \"bg-gray-100\"\n                }`}\n                disabled={!editing}\n              />\n            </div>\n            <div className=\"flex flex-col\">\n              <label className=\"text-sm text-gray-600 mb-1\">ولد</label>\n              <input\n                type=\"text\"\n                value={data.parentType || \"\"}\n                onChange={(e) =>\n                  setData({ ...data, parentType: e.target.value })\n                }\n                className={`border rounded px-3 py-2 text-center ${\n                  editing ? \"bg-white\" : \"bg-gray-100\"\n                }`}\n                disabled={!editing}\n              />\n            </div>\n            <div className=\"flex flex-col\">\n              <label className=\"text-sm text-gray-600 mb-1\">سال ترینینگ</label>\n              <input\n                type=\"text\"\n                value={data.trainingYear || \"\"}\n                onChange={(e) =>\n                  setData({ ...data, trainingYear: e.target.value })\n                }\n                className={`border rounded px-3 py-2 text-center ${\n                  editing ? \"bg-white\" : \"bg-gray-100\"\n                }`}\n                disabled={!editing}\n              />\n            </div>\n          </div>\n\n          {/* Teachers Display */}\n          {editing && (\n            <div className=\"flex flex-col mb-4\">\n              <label className=\"text-sm text-gray-600 mb-1\">نام استادها</label>\n              <div className=\"flex gap-2 flex-wrap\">\n                {data.teachers.map((t, i) => (\n                  <input\n                    key={i}\n                    type=\"text\"\n                    value={t}\n                    onChange={(e) => {\n                      const newTeachers = [...data.teachers];\n                      newTeachers[i] = e.target.value;\n                      setData({ ...data, teachers: newTeachers });\n                    }}\n                    className=\"border rounded px-2 py-1 bg-white text-center w-28 flex-shrink\"\n                  />\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Activities Table */}\n          <table className=\"min-w-full text-right table-auto border-collapse\">\n            <thead className=\"bg-gray-50 sticky top-0\">\n              <tr>\n                <th className=\"p-2 border\">بخش</th>\n                <th className=\"p-2 border\">فعالیت</th>\n                {data.teachers.map((t, i) => (\n                  <th key={i} className=\"p-2 border\">\n                    {t}\n                  </th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {Object.entries(groupedActivities).map(([section, acts]) =>\n                acts.map((act, idx) => (\n                  <tr\n                    key={act._id}\n                    className={idx % 2 === 0 ? \"bg-white\" : \"bg-gray-50\"}\n                  >\n                    {idx === 0 && (\n                      <td\n                        className=\"p-2 border font-medium\"\n                        rowSpan={acts.length}\n                      >\n                        {section}\n                      </td>\n                    )}\n                    <td className=\"p-2 border\">{act.activity}</td>\n                    {data.teachers.map((_, tIdx) => (\n                      <td key={tIdx} className=\"p-2 border text-center\">\n                        {editing ? (\n                          <input\n                            type=\"checkbox\"\n                            checked={act.evaluators[tIdx] || false}\n                            onChange={() =>\n                              toggleEvaluator(\n                                data.activities!.findIndex(\n                                  (a) => a._id === act._id\n                                ),\n                                tIdx\n                              )\n                            }\n                          />\n                        ) : (\n                          <Check on={act.evaluators[tIdx] || false} />\n                        )}\n                      </td>\n                    ))}\n                  </tr>\n                ))\n              )}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9864},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"server/models/form-J.ts":{"content":"\n// models/TeacherActivity.ts\nimport mongoose, { Schema, Document } from \"mongoose\";\n\n// 🔹 ساختار هر فعالیت\ninterface IActivity {\n  section: string;           // بخش مثل \"آغاز فعالیت\"\n  activity: string;          // فعالیت خاص\n  evaluators: boolean[];     // آرایه‌ای از تیک‌ها برای هر استاد\n}\n\n// 🔹 ساختار اصلی سند\nexport interface ITeacherActivity extends Document {\n  trainerId: mongoose.Types.ObjectId;  // ارجاع به ترینر\n  name: string;                        // نام ترینر\n  parentType: string;                  // نام پدر\n  trainingYear: string;                // سال تریننگ\n  teachers: string[];                  // نام استادها\n  activities: IActivity[];             // لیست فعالیت‌ها\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// 🔹 اسکیمای فعالیت‌ها\nconst ActivitySchema = new Schema<IActivity>({\n  section: { type: String, required: true },\n  activity: { type: String, required: true },\n  evaluators: {\n    type: [Boolean],\n    required: true,\n    validate: {\n      validator: (arr: boolean[]) => arr.length <= 5,\n      message: \"تعداد evaluator‌ها نباید بیشتر از ۵ باشد\",\n    },\n  },\n});\n\n// 🔹 اسکیمای اصلی TeacherActivity\nconst TeacherActivitySchema = new Schema<ITeacherActivity>(\n  {\n    trainerId: {\n      type: Schema.Types.ObjectId,\n      ref: \"Trainer\",\n      required: true,\n    },\n    name: { type: String, required: true },\n    parentType: { type: String, required: true },\n    trainingYear: { type: String, required: true },\n    teachers: {\n      type: [String],\n      validate: {\n        validator: (arr: string[]) => arr.length <= 5,\n        message: \"حداکثر ۵ استاد مجاز است\",\n      },\n      required: true,\n    },\n    activities: { type: [ActivitySchema], required: true },\n  },\n  {\n    timestamps: true, // ایجاد فیلدهای createdAt و updatedAt\n  }\n);\n\n// 🔹 مدل نهایی\nexport const TeacherActivityModel = mongoose.model<ITeacherActivity>(\n  \"TeacherActivity\",\n  TeacherActivitySchema\n);\n","size_bytes":2157},"client/src/components/forms/formJ.tsx":{"content":"import React, { useState, useEffect } from \"react\";\r\n\r\ninterface TeacherActivityFormProps {\r\n  trainerIdProp?: string;\r\n}\r\n\r\nconst teacherActivities: Record<string, string[]> = {\r\n  \"آغاز فعالیت\": [\"Uniform\", \"Salam\", \"Introduction\", \"Patient add\"],\r\n  \"شیوه اخذ مشاهده\": [\r\n    \"CC\",\r\n    \"PI\",\r\n    \"Post History\",\r\n    \"Pers History\",\r\n    \"S.E State\",\r\n    \"Drug History\",\r\n  ],\r\n  \"Review of System\": [\"Head & Neck\", \"RS\", \"CVS\", \"GIS\", \"UGS\", \"CNS\", \"ENT\"],\r\n  \"معاینه فزیکی\": [\r\n    \"Head & Neck\",\r\n    \"RS\",\r\n    \"CVS\",\r\n    \"GIS\",\r\n    \"UGS\",\r\n    \"Local Status\",\r\n    \"Extremities\",\r\n  ],\r\n  \" نتیجه \": [\"Impression\", \"Action Plan\", \"Drug Order\"],\r\n  \" پروسیجر \": [\r\n    \"IP\",\r\n    \"Mask, Hat, Gloves\",\r\n    \"Surgical Instrument Handling\",\r\n    \"Kind of Procedure\",\r\n  ],\r\n};\r\n\r\ninterface Activity {\r\n  section: string;\r\n  activity: string;\r\n  evaluators: boolean[];\r\n}\r\n\r\nexport default function TeacherActivityForm({\r\n  trainerIdProp,\r\n}: TeacherActivityFormProps) {\r\n  const [trainerId, setTrainerId] = useState<string | null>(null);\r\n  const [teachers, setTeachers] = useState<string[]>(Array(5).fill(\"\"));\r\n  const [data, setData] = useState<Activity[]>(() =>\r\n    Object.entries(teacherActivities).flatMap(([section, items]) =>\r\n      items.map((item) => ({\r\n        section,\r\n        activity: item,\r\n        evaluators: Array(5).fill(false),\r\n      }))\r\n    )\r\n  );\r\n\r\n  // ✅ state های جدید برای سه input\r\n  const [name, setName] = useState(\"\");\r\n  const [parentType, setparentType] = useState(\"\");\r\n  const [trainingYear, setTrainingYear] = useState(\"\");\r\n\r\n  // ✅ وقتی trainerIdProp آماده شد، trainerId تنظیم می‌شود و داده از دیتابیس گرفته می‌شود\r\n  useEffect(() => {\r\n    if (!trainerIdProp) {\r\n      alert(\"هیچ ترینر فعالی یافت نشد!\");\r\n      return;\r\n    }\r\n\r\n    setTrainerId(trainerIdProp);\r\n\r\n    // 👇 دریافت داده از دیتابیس\r\n    const fetchTrainerInfo = async () => {\r\n      try {\r\n        const res = await fetch(\r\n          `http://localhost:5000/api/trainers/${trainerIdProp}`\r\n        );\r\n        const result = await res.json();\r\n\r\n        if (!res.ok) throw new Error(result.message || \"خطا در دریافت ترینر\");\r\n\r\n        // فرض می‌کنیم دیتابیس این فیلدها را دارد:\r\n        // name, fatherName, trainingYear\r\n        setName(result.name || \"\");\r\n        setparentType(result.parentType || \"\");\r\n        setTrainingYear(result.trainingYear || \"\");\r\n      } catch (err) {\r\n        console.error(\"خطا در دریافت ترینر:\", err);\r\n        alert(\"خطا در دریافت اطلاعات ترینر ❌\");\r\n      }\r\n    };\r\n\r\n    fetchTrainerInfo();\r\n  }, [trainerIdProp]);\r\n\r\n  const handleTeacherName = (index: number, value: string) => {\r\n    setTeachers((prev) => prev.map((t, i) => (i === index ? value : t)));\r\n  };\r\n\r\n  const toggle = (rowIdx: number, teacherIdx: number) => {\r\n    setData((prev) =>\r\n      prev.map((row, i) =>\r\n        i === rowIdx\r\n          ? {\r\n              ...row,\r\n              evaluators: row.evaluators.map((v, j) =>\r\n                j === teacherIdx ? !v : v\r\n              ),\r\n            }\r\n          : row\r\n      )\r\n    );\r\n  };\r\n\r\n  const toggleAllForTeacher = (teacherIdx: number) => {\r\n    const allChecked = data.every((row) => row.evaluators[teacherIdx]);\r\n    setData((prev) =>\r\n      prev.map((row) => ({\r\n        ...row,\r\n        evaluators: row.evaluators.map((v, j) =>\r\n          j === teacherIdx ? !allChecked : v\r\n        ),\r\n      }))\r\n    );\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n\r\n    if (!trainerId) {\r\n      alert(\"ابتدا باید یک ترینر ثبت شده انتخاب شود!\");\r\n      return;\r\n    }\r\n\r\n    const nonEmptyTeachers = teachers.filter((t) => t.trim() !== \"\");\r\n    if (nonEmptyTeachers.length === 0) {\r\n      alert(\"حداقل یک نام استاد وارد کنید!\");\r\n      return;\r\n    }\r\n\r\n    const payload = {\r\n      trainerId,\r\n      name,\r\n      parentType, // الان مقدار واقعی است\r\n      trainingYear,\r\n      teachers: nonEmptyTeachers,\r\n      activities: data,\r\n    };\r\n\r\n    try {\r\n      const res = await fetch(\"http://localhost:5000/api/teacher-activities\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(payload),\r\n      });\r\n\r\n      const result = await res.json();\r\n\r\n      if (!res.ok) {\r\n        console.error(\"Server error:\", result); // ← این را اضافه کن\r\n        throw new Error(result.message || \"خطای ناشناخته\");\r\n      }\r\n\r\n      alert(\"فرم با موفقیت ذخیره شد ✅\");\r\n    } catch (err: any) {\r\n      console.error(\"Error object:\", err); // ← این را اضافه کن\r\n      alert(\"خطا در ذخیره داده ❌: \" + err.message);\r\n    }\r\n  };\r\n\r\n  const grouped = Object.entries(teacherActivities);\r\n\r\n  return (\r\n    <div style={{ fontFamily: \"Calibri, sans-serif\" }}>\r\n      <form\r\n        onSubmit={handleSubmit}\r\n        className=\"max-w-6xl mx-auto p-4 bg-gray-100 rounded-xl shadow-md\"\r\n      >\r\n        <h1 className=\"text-2xl font-bold mb-4 text-center\">\r\n          چک لیست امتحان عملی و نظری ترینی‌های شفاخانه نور\r\n        </h1>\r\n\r\n        {/* ✅ سه input جدید که از دیتابیس پر می‌شوند */}\r\n        <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-3 mb-6\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"اسم\"\r\n            value={name}\r\n            readOnly\r\n            className=\"border rounded px-3 py-2 text-center bg-gray-200\"\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"ولد\"\r\n            value={parentType}\r\n            readOnly\r\n            className=\"border rounded px-3 py-2 text-center bg-gray-200\"\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"سال تریننگ\"\r\n            value={trainingYear}\r\n            readOnly\r\n            className=\"border rounded px-3 py-2 text-center bg-gray-200\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"grid grid-cols-1 sm:grid-cols-5 gap-2 mb-6 items-center\">\r\n          {teachers.map((t, i) => (\r\n            <div key={i} className=\"flex flex-col items-center\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder={`نام استاد ${i + 1}`}\r\n                value={t}\r\n                onChange={(e) => handleTeacherName(i, e.target.value)}\r\n                className=\"border rounded px-2 py-1 text-center mb-1\"\r\n              />\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => toggleAllForTeacher(i)}\r\n                className=\"text-sm bg-gray-300 hover:bg-gray-400 px-2 py-1 rounded\"\r\n              >\r\n                تیک همه / حذف همه\r\n              </button>\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        <table className=\"table-auto border-collapse border border-gray-300 w-full text-center text-sm\">\r\n          <thead>\r\n            <tr className=\"bg-gray-200\">\r\n              <th className=\"border px-2 py-1\">بخش</th>\r\n              <th className=\"border px-2 py-1\">فعالیت</th>\r\n              {teachers.map((t, idx) => (\r\n                <th key={idx} className=\"border px-2 py-1\">\r\n                  {t || `استاد ${idx + 1}`}\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {grouped.map(([section, items]) =>\r\n              items.map((item, rowIndex) => {\r\n                const dataIdx = data.findIndex(\r\n                  (d) => d.section === section && d.activity === item\r\n                );\r\n                return (\r\n                  <tr key={section + item} className=\"even:bg-gray-50\">\r\n                    {rowIndex === 0 && (\r\n                      <td\r\n                        rowSpan={items.length}\r\n                        className=\"border px-2 py-1 font-medium whitespace-nowrap\"\r\n                      >\r\n                        {section}\r\n                      </td>\r\n                    )}\r\n                    <td className=\"border px-2 py-1\">{item}</td>\r\n                    {teachers.map((_, tIdx) => (\r\n                      <td key={tIdx} className=\"border px-2 py-1\">\r\n                        <input\r\n                          type=\"checkbox\"\r\n                          checked={data[dataIdx].evaluators[tIdx]}\r\n                          onChange={() => toggle(dataIdx, tIdx)}\r\n                        />\r\n                      </td>\r\n                    ))}\r\n                  </tr>\r\n                );\r\n              })\r\n            )}\r\n          </tbody>\r\n        </table>\r\n\r\n        <button\r\n          type=\"submit\"\r\n          disabled={!trainerId}\r\n          className=\"mt-6 w-full bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 transition disabled:opacity-50\"\r\n        >\r\n          ذخیره\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","size_bytes":9161},"server/models/User.ts":{"content":"import mongoose, { Document, Schema } from \"mongoose\";\n\nexport interface IUser extends Document {\n  _id: string;\n  email?: string;\n  firstName?: string;\n  lastName?: string;\n  profileImageUrl?: string;\n  password?: string;\n  role: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nconst userSchema = new Schema<IUser>({\n  _id: { type: String, required: true },\n  email: { type: String, unique: true, sparse: true },\n  firstName: String,\n  lastName: String,\n  profileImageUrl: String,\n  password: String,\n  role: { type: String, required: true, default: \"viewer\" }, // admin or viewer\n  createdAt: { type: Date, default: Date.now },\n  updatedAt: { type: Date, default: Date.now },\n});\n\nexport const UserModel = mongoose.model<IUser>(\"User\", userSchema);","size_bytes":751},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"server/controllers/residentController.ts":{"content":"import { Request, Response } from 'express';\nimport { ResidentModel, UserModel } from '../models';\nimport { z } from 'zod';\n\nconst createResidentSchema = z.object({\n  fullName: z.string().min(1, \"Full name is required\"),\n  age: z.number().min(18, \"Age must be at least 18\").max(100, \"Age must be less than 100\"),\n  gender: z.enum([\"Male\", \"Female\"]),\n  department: z.string().min(1, \"Department is required\"),\n  startDate: z.string().transform((str) => new Date(str)),\n  endDate: z.string().optional().transform((str) => str ? new Date(str) : undefined),\n  status: z.string().optional().default(\"active\"),\n  profileImageUrl: z.string().optional(),\n});\n\nexport class ResidentController {\n  static async getAllResidents(req: Request, res: Response) {\n    try {\n      const residents = await ResidentModel.find().sort({ createdAt: -1 });\n      res.json(residents);\n    } catch (error) {\n      console.error('Error fetching residents:', error);\n      res.status(500).json({ message: 'Failed to fetch residents' });\n    }\n  }\n\n  static async getResidentById(req: Request, res: Response) {\n    try {\n      const resident = await ResidentModel.findById(req.params.id);\n      if (!resident) {\n        return res.status(404).json({ message: 'Resident not found' });\n      }\n      res.json(resident);\n    } catch (error) {\n      console.error('Error fetching resident:', error);\n      res.status(500).json({ message: 'Failed to fetch resident' });\n    }\n  }\n\n  static async createResident(req: any, res: Response) {\n    try {\n      const user = await UserModel.findById(req.user.claims.sub);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const validatedData = createResidentSchema.parse(req.body);\n      const resident = new ResidentModel(validatedData);\n      const savedResident = await resident.save();\n      res.status(201).json(savedResident);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: 'Validation error', \n          errors: error.errors \n        });\n      }\n      console.error(\"Error creating resident:\", error);\n      res.status(500).json({ message: \"Failed to create resident\" });\n    }\n  }\n\n  static async updateResident(req: any, res: Response) {\n    try {\n      const user = await UserModel.findById(req.user.claims.sub);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const validatedData = createResidentSchema.partial().parse(req.body);\n      const resident = await ResidentModel.findByIdAndUpdate(\n        req.params.id,\n        { ...validatedData, updatedAt: new Date() },\n        { new: true, runValidators: true }\n      );\n      \n      if (!resident) {\n        return res.status(404).json({ message: \"Resident not found\" });\n      }\n      \n      res.json(resident);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: 'Validation error', \n          errors: error.errors \n        });\n      }\n      console.error(\"Error updating resident:\", error);\n      res.status(500).json({ message: \"Failed to update resident\" });\n    }\n  }\n\n  static async deleteResident(req: any, res: Response) {\n    try {\n      const user = await UserModel.findById(req.user.claims.sub);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const resident = await ResidentModel.findByIdAndDelete(req.params.id);\n      if (!resident) {\n        return res.status(404).json({ message: \"Resident not found\" });\n      }\n      res.json({ message: \"Resident deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting resident:\", error);\n      res.status(500).json({ message: \"Failed to delete resident\" });\n    }\n  }\n}","size_bytes":3897},"server/models/trainerModel.ts":{"content":"import mongoose, { Schema, Document } from \"mongoose\";\r\n\r\nexport interface ITrainer extends Document {\r\n  id: string;\r\n  name: string;\r\n  lastName: string;\r\n  parentType: string;\r\n  parentName: string;\r\n  gender: string;\r\n  province: string;\r\n  department: string;\r\n  specialty: string;\r\n  hospital: string;\r\n  joiningDate: Date;\r\n  trainingYear: string;\r\n  supervisorName: string;\r\n  birthDate: Date;\r\n  idNumber: string;\r\n  phoneNumber: string;\r\n  whatsappNumber: string;\r\n  email: string;\r\n  postNumberAndCode: string;\r\n  appointmentType: string;\r\n  status: string;\r\n  photo?: string; // مسیر عکس ذخیره شده\r\n}\r\n\r\nconst trainerSchema = new Schema<ITrainer>(\r\n  {\r\n    id: { type: String },\r\n    name: { type: String, required: true, trim: true },\r\n    lastName: { type: String, required: true, trim: true },\r\n    parentType: { type: String, trim: true },\r\n    parentName: { type: String, trim: true },\r\n    gender: { type: String, enum: [\"مرد\", \"زن\", \"\"], default: \"\" },\r\n    province: { type: String, required: true, trim: true },\r\n    department: { type: String, required: true, trim: true },\r\n    specialty: { type: String, required: true, trim: true },\r\n    hospital: { type: String, trim: true },\r\n    joiningDate: { type: Date },\r\n    trainingYear: { type: String, trim: true },\r\n    supervisorName: { type: String, trim: true },\r\n    birthDate: { type: Date },\r\n    idNumber: { type: String, trim: true },\r\n    phoneNumber: { type: String, trim: true },\r\n    whatsappNumber: { type: String, trim: true },\r\n    email: { type: String, lowercase: true, trim: true },\r\n    postNumberAndCode: { type: String, trim: true },\r\n    appointmentType: {\r\n      type: String,\r\n      enum: [\"رقابت آزاد\", \"داوطلب\", \"حکمی\", \"بست خالی\", \"\"],\r\n      default: \"\",\r\n    },\r\n    status: {\r\n      type: String,\r\n      enum: [\"برحال\", \"خدماتی\", \"\"],\r\n      default: \"\",\r\n    },\r\n    photo: { type: String, trim: true }, // مسیر عکس ذخیره می‌شود\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\nexport default mongoose.models.Trainer ||\r\n  mongoose.model<ITrainer>(\"Trainer\", trainerSchema);\r\n","size_bytes":2143},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"server/models/form-C.ts":{"content":"// models/MonographEvaluationForm.ts\r\nimport mongoose, { Document, Schema, Types } from \"mongoose\";\r\n\r\nexport interface IMonographEvaluationForm extends Document {\r\n  trainer: Types.ObjectId; // ⬅️ رفرنس به Trainer\r\n  name: string;\r\n  lastName: string;\r\n  parentType: string;\r\n  idNumber: string;\r\n  department: string;\r\n  trainingYear: string;\r\n  startYear: string;\r\n  date: string;\r\n  chef: string;\r\n  departmentHead: string;\r\n  hospitalHead: string;\r\n  evaluations: {\r\n    section: string; // نام بخش مثل نمره سیکل، مجموع نمرات ...\r\n    percentage: string; // فیصدی\r\n    score: string; // نمره\r\n    teacherName: string; // نام استاد\r\n  }[];\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\n// اسکیمای هر آیتم ارزیابی\r\nconst MonographEvaluationItemSchema: Schema = new Schema({\r\n  section: { type: String, required: true },\r\n  percentage: { type: String, required: true },\r\n  score: { type: String, required: true },\r\n  teacherName: { type: String, required: true },\r\n});\r\n\r\n// اسکیمای اصلی فرم\r\nconst MonographEvaluationFormSchema: Schema = new Schema(\r\n  {\r\n    trainer: {\r\n      type: Schema.Types.ObjectId,\r\n      ref: \"Trainer\", // ⬅️ به مدل Trainer وصل می‌شود\r\n      required: true,\r\n    },\r\n    name: { type: String, required: true },\r\n    lastName: { type: String, required: true },\r\n    parentType: { type: String, required: true },\r\n    idNumber: { type: String, required: true },\r\n    department: { type: String, required: true },\r\n    trainingYear: { type: String, required: true },\r\n    startYear: { type: String, required: true },\r\n    date: { type: String, required: true },\r\n    chef: { type: String, required: true },\r\n    departmentHead: { type: String, required: true },\r\n    hospitalHead: { type: String, required: true },\r\n    evaluations: [MonographEvaluationItemSchema], // آرایه ارزیابی‌ها\r\n  },\r\n  {\r\n    timestamps: true, // createdAt و updatedAt اتوماتیک\r\n  }\r\n);\r\n\r\nexport const MonographEvaluationForm = mongoose.model<IMonographEvaluationForm>(\r\n  \"MonographEvaluationForm\",\r\n  MonographEvaluationFormSchema\r\n);\r\n","size_bytes":2176},"client/src/components/forms/Form-E.tsx":{"content":"import React, { useState, useEffect } from \"react\";\r\ninterface ScoreRow {\r\n  score: string;\r\n  teacherName: string;\r\n}\r\n\r\ninterface EvaluationFormEProps {\r\n  trainerIdProp?: string; // ✅ گرفتن trainerId از والد یا Context\r\n}\r\n\r\nexport default function EvaluationFormE({\r\n  trainerIdProp,\r\n}: EvaluationFormEProps) {\r\n  const [trainerId, setTrainerId] = useState<string | null>(null);\r\n  // 🔹 State‌های فرم\r\n  const [name, setName] = useState(\"\");\r\n  const [parentType, setparentType] = useState(\"\");\r\n  const [trainingYear, setTrainingYear] = useState(\"\");\r\n  const [incidentTitle, setIncidentTitle] = useState(\"\");\r\n  const [date, setDate] = useState(\"\");\r\n  const [averageScore, setAverageScore] = useState(\"\");\r\n  const [scores, setScores] = useState<ScoreRow[]>(\r\n    Array.from({ length: 5 }, () => ({ score: \"\", teacherName: \"\" }))\r\n  );\r\n\r\n  ////////////////////////////////////\r\n   useEffect(() => {\r\n      if (!trainerIdProp) {\r\n        alert(\"هیچ ترینر فعالی یافت نشد!\");\r\n        return;\r\n      }\r\n  \r\n      setTrainerId(trainerIdProp);\r\n  \r\n      // 👇 دریافت داده از دیتابیس\r\n      const fetchTrainerInfo = async () => {\r\n        try {\r\n          const res = await fetch(\r\n            `http://localhost:5000/api/trainers/${trainerIdProp}`\r\n          );\r\n          const result = await res.json();\r\n  \r\n          if (!res.ok) throw new Error(result.message || \"خطا در دریافت ترینر\");\r\n  \r\n          // فرض می‌کنیم دیتابیس این فیلدها را دارد:\r\n          // name, fatherName, trainingYear\r\n          setName(result.name || \"\");\r\n          setparentType(result.parentType || \"\");\r\n          setTrainingYear(result.trainingYear || \"\");\r\n        } catch (err) {\r\n          console.error(\"خطا در دریافت ترینر:\", err);\r\n          alert(\"خطا در دریافت اطلاعات ترینر ❌\");\r\n        }\r\n      };\r\n  \r\n      fetchTrainerInfo();\r\n    }, [trainerIdProp]);\r\n  //////////////////////////////////////\r\n  const inputClass = \"border rounded px-2 py-2 w-full text-center\";\r\n\r\n  // 🔸 محاسبه اوسط نمرات\r\n  useEffect(() => {\r\n    const filled = scores.filter((r) => r.score.trim() && r.teacherName.trim());\r\n    if (filled.length === 0) {\r\n      setAverageScore(\"\");\r\n      return;\r\n    }\r\n\r\n    const sum = filled.reduce((acc, r) => acc + (parseFloat(r.score) || 0), 0);\r\n    const avg = sum / filled.length;\r\n    setAverageScore(avg.toFixed(2));\r\n  }, [scores]);\r\n\r\n  // 💾 ارسال فرم\r\n  // 💾 ارسال فرم با ولیدیشن کامل\r\n  const handleSubmit = async () => {\r\n    if (!trainerId) {\r\n      alert(\"❌ Trainer ID موجود نیست، فرم ارسال نمی‌شود!\");\r\n      return;\r\n    }\r\n\r\n    // 🔹 بررسی فیلدهای اصلی\r\n    const requiredFields = {\r\n      name,\r\n      parentType,\r\n      trainingYear,\r\n      incidentTitle,\r\n      date,\r\n    };\r\n    for (const [key, value] of Object.entries(requiredFields)) {\r\n      if (!value.trim()) {\r\n        alert(\"⚠️ لطفاً تمام فیلدهای اصلی را پُر کنید.\");\r\n        return;\r\n      }\r\n    }\r\n\r\n    // 🔹 بررسی ردیف‌های جدول نمرات\r\n    for (let i = 0; i < scores.length; i++) {\r\n      const row = scores[i];\r\n      const { score, teacherName } = row;\r\n\r\n      // یکی پر و دیگری خالی نباشد\r\n      if (\r\n        (score.trim() && !teacherName.trim()) ||\r\n        (!score.trim() && teacherName.trim())\r\n      ) {\r\n        alert(\r\n          `⚠️ لطفاً ردیف شماره ${i + 1} را کامل پُر کنید (نمره و نام استاد).`\r\n        );\r\n        return;\r\n      }\r\n    }\r\n\r\n    // حداقل یک ردیف پر باشد\r\n    const filledRows = scores.filter(\r\n      (r) => r.score.trim() && r.teacherName.trim()\r\n    );\r\n    if (filledRows.length === 0) {\r\n      alert(\"⚠️ لطفاً حداقل یک نمره ثبت کنید.\");\r\n      return;\r\n    }\r\n\r\n    // 🔹 آماده‌سازی داده برای ارسال\r\n    const payload = {\r\n      trainer: trainerId,\r\n      Name: name.trim(),\r\n      parentType: parentType.trim(),\r\n      trainingYear: trainingYear.trim(),\r\n      incidentTitle: incidentTitle.trim(),\r\n      date: date.trim(),\r\n      averageScore: averageScore.trim(),\r\n      scores: filledRows.map((r) => ({\r\n        score: r.score.trim(),\r\n        teacherName: r.teacherName.trim(),\r\n      })),\r\n    };\r\n\r\n    console.log(\"📤 ارسال فرم:\", payload);\r\n\r\n    try {\r\n      const res = await fetch(\"http://localhost:5000/api/evaluationFormE\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(payload),\r\n      });\r\n\r\n      const data = await res.json().catch(() => null);\r\n\r\n      if (!res.ok) {\r\n        alert(data?.message || \"❌ خطا در ذخیره فرم\");\r\n        return;\r\n      }\r\n\r\n      alert(\"✅ فرم با موفقیت ذخیره شد!\");\r\n\r\n      // 🧹 ریست فرم\r\n      setName(\"\");\r\n      setparentType(\"\");\r\n      setTrainingYear(\"\");\r\n      setIncidentTitle(\"\");\r\n      setDate(\"\");\r\n      setAverageScore(\"\");\r\n      setScores(\r\n        Array.from({ length: 5 }, () => ({ score: \"\", teacherName: \"\" }))\r\n      );\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(\"❌ خطا در ذخیره فرم\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-5xl mx-auto bg-white shadow-lg rounded-2xl p-6 mt-6\">\r\n      <h2 className=\"text-xl font-bold text-center mb-4\">\r\n        فرم ارزشیابی سالانه دستیار\r\n      </h2>\r\n\r\n      {!trainerId && (\r\n        <p className=\"text-red-500 text-center mb-4\">\r\n          در حال دریافت شناسه ترینر...\r\n        </p>\r\n      )}\r\n\r\n      {/* اطلاعات پایه */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"اسم\"\r\n          value={name}\r\n          onChange={(e) => setName(e.target.value)}\r\n          className={inputClass}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"ولد\"\r\n          value={parentType}\r\n          onChange={(e) => setparentType(e.target.value)}\r\n          className={inputClass}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"سال تریننگ\"\r\n          value={trainingYear}\r\n          onChange={(e) => setTrainingYear(e.target.value)}\r\n          className={inputClass}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"تاریخ\"\r\n          value={date}\r\n          onChange={(e) => setDate(e.target.value)}\r\n          className={inputClass}\r\n        />\r\n      </div>\r\n\r\n      {/* جدول نمرات */}\r\n      <table className=\"table-auto border-collapse border w-full text-center mb-6\">\r\n        <thead>\r\n          <tr>\r\n            <th className=\"border px-2 py-2\">عنوان واقعه</th>\r\n            <th className=\"border px-2 py-2\">نمره داده شده</th>\r\n            <th className=\"border px-2 py-2\">اسم استاد</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {scores.map((row, idx) => (\r\n            <tr key={idx}>\r\n              {idx === 0 && (\r\n                <td rowSpan={scores.length + 1}>\r\n                  <textarea\r\n                    placeholder=\"عنوان واقعه\"\r\n                    rows={10}\r\n                    value={incidentTitle}\r\n                    onChange={(e) => setIncidentTitle(e.target.value)}\r\n                    className={inputClass + \" h-full resize-none\"}\r\n                  />\r\n                </td>\r\n              )}\r\n              <td>\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"نمره\"\r\n                  className={inputClass}\r\n                  value={row.score}\r\n                  onChange={(e) => {\r\n                    const newRows = [...scores];\r\n                    newRows[idx].score = e.target.value;\r\n                    setScores(newRows);\r\n                  }}\r\n                />\r\n              </td>\r\n              <td>\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"اسم استاد\"\r\n                  className={inputClass}\r\n                  value={row.teacherName}\r\n                  onChange={(e) => {\r\n                    const newRows = [...scores];\r\n                    newRows[idx].teacherName = e.target.value;\r\n                    setScores(newRows);\r\n                  }}\r\n                />\r\n              </td>\r\n            </tr>\r\n          ))}\r\n\r\n          {/* اوسط نمرات */}\r\n          <tr>\r\n            <td colSpan={2} className=\"border px-2 py-2 font-bold\">\r\n              اوسط نمرات\r\n            </td>\r\n            <td>\r\n              <input\r\n                type=\"text\"\r\n                value={averageScore}\r\n                readOnly\r\n                className={inputClass + \" bg-gray-100\"}\r\n              />\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n      {/* دکمه ذخیره */}\r\n      <div className=\"text-center mt-4\">\r\n        <button\r\n          onClick={handleSubmit}\r\n          disabled={!trainerId}\r\n          className=\"px-6 py-2 bg-green-600 text-white rounded-xl hover:bg-green-700 transition disabled:opacity-50\"\r\n        >\r\n          ذخیره فرم\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","size_bytes":9458},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/forms/TrainerRegistrationForm.tsx":{"content":"import React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { X } from \"lucide-react\";\r\nimport { useTrainer } from \"@/context/TrainerContext\";\r\n\r\ntype FormValues = {\r\n  id: string;\r\n  name: string;\r\n  lastName: string;\r\n  parentType: \"ولد\" | \"بنت\" | string;\r\n  parentName: string;\r\n  gender: \"مرد\" | \"زن\" | string;\r\n  province: string;\r\n  department: string;\r\n  specialty: string;\r\n  hospital: string;\r\n  joiningDate: string;\r\n  trainingYear: string;\r\n  supervisorName: string;\r\n  birthDate: string;\r\n  idNumber: string;\r\n  phoneNumber: string;\r\n  whatsappNumber: string;\r\n  email: string;\r\n  postNumberAndCode: string;\r\n  appointmentType: \"رقابت آزاد\" | \"داوطلب\" | \"حکمی\" | \"بست خالی\" | string;\r\n  status: \"برحال\" | \"خدماتی\" | string;\r\n  photo?: FileList;\r\n};\r\n\r\ntype TrainerRegistrationFormProps = {\r\n  onClose: () => void;\r\n};\r\n\r\nexport default function TrainerRegistrationForm({\r\n  onClose,\r\n}: TrainerRegistrationFormProps) {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm<FormValues>({\r\n    defaultValues: {\r\n      id: \"\",\r\n      name: \"\",\r\n      lastName: \"\",\r\n      parentType: \"\",\r\n      parentName: \"\",\r\n      gender: \"\",\r\n      province: \"\",\r\n      department: \"\",\r\n      specialty: \"\",\r\n      hospital: \"\",\r\n      joiningDate: \"\",\r\n      trainingYear: \"\",\r\n      supervisorName: \"\",\r\n      birthDate: \"\",\r\n      idNumber: \"\",\r\n      phoneNumber: \"\",\r\n      whatsappNumber: \"\",\r\n      email: \"\",\r\n      postNumberAndCode: \"\",\r\n      appointmentType: \"\",\r\n      status: \"\",\r\n      photo: undefined,\r\n    },\r\n  });\r\n\r\n  const { setTrainerId } = useTrainer();\r\n\r\n  const onSubmit = async (data: FormValues) => {\r\n    try {\r\n      const formData = new FormData();\r\n      Object.entries(data).forEach(([key, value]) => {\r\n        if (key === \"photo\" && value && value.length > 0) {\r\n          formData.append(\"photo\", value[0]);\r\n        } else {\r\n          formData.append(key, value as string);\r\n        }\r\n      });\r\n\r\n      const response = await fetch(\"/api/trainers\", {\r\n        method: \"POST\",\r\n        body: formData,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        alert(\"خطا در ثبت فرم: \" + (errorData.message || \"اطلاعات نادرست\"));\r\n        return;\r\n      }\r\n\r\n      const savedTrainer = await response.json();\r\n      console.log(\"Saved trainer:\", savedTrainer);\r\n\r\n      const trainerId = savedTrainer?._id ?? savedTrainer?.id;\r\n      if (!trainerId) {\r\n        alert(\"API آیدی برنگرداند!\");\r\n        return;\r\n      }\r\n\r\n      setTrainerId(trainerId);\r\n      alert(\"ترینر با موفقیت ثبت شد!\");\r\n      reset();\r\n      onClose();\r\n    } catch (error) {\r\n      console.error(error);\r\n      alert(\"خطا در ثبت فرم، دوباره تلاش کنید.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"h-screen overflow-y-auto bg-gray-50\">\r\n      <div className=\"max-w-4xl mx-auto p-6 bg-white rounded-xl shadow-md relative\">\r\n        <button\r\n          type=\"button\"\r\n          onClick={onClose}\r\n          className=\"absolute top-4 right-4 p-2 rounded-full hover:bg-gray-200\"\r\n        >\r\n          <X className=\"w-5 h-5 text-gray-600\" />\r\n        </button>\r\n\r\n        <h1 className=\"text-2xl font-semibold mb-4 text-center\">\r\n          فورم ثبت نام ترینری\r\n        </h1>\r\n\r\n        <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            {/* متن و انتخاب */}\r\n            <label className=\"flex flex-col\">\r\n              <span className=\"text-sm\">ایدی</span>\r\n              <input\r\n                {...register(\"id\", { required: \"ایدی لازم است\" })}\r\n                className=\"mt-1 p-2 border rounded-md focus:outline-none focus:ring-2\"\r\n              />\r\n              {errors.id && (\r\n                <span className=\"text-red-600 text-sm\">\r\n                  {errors.id.message}\r\n                </span>\r\n              )}\r\n            </label>\r\n\r\n            <label className=\"flex flex-col\">\r\n              <span className=\"text-sm\">اسم</span>\r\n              <input\r\n                {...register(\"name\", { required: \"اسم لازم است\" })}\r\n                className=\"mt-1 p-2 border rounded-md focus:outline-none focus:ring-2\"\r\n              />\r\n              {errors.name && (\r\n                <span className=\"text-red-600 text-sm\">\r\n                  {errors.name.message}\r\n                </span>\r\n              )}\r\n            </label>\r\n\r\n            <label className=\"flex flex-col\">\r\n              <span className=\"text-sm\">تخلص</span>\r\n              <input\r\n                {...register(\"lastName\", { required: \"تخلص لازم است\" })}\r\n                className=\"mt-1 p-2 border rounded-md focus:outline-none focus:ring-2\"\r\n              />\r\n              {errors.lastName && (\r\n                <span className=\"text-red-600 text-sm\">\r\n                  {errors.lastName.message}\r\n                </span>\r\n              )}\r\n            </label>\r\n\r\n            <label className=\"flex flex-col\">\r\n              <span className=\"text-sm\">ولد/بنت</span>\r\n              <input\r\n                {...register(\"parentType\")}\r\n                className=\"mt-1 p-2 border rounded-md\"\r\n              />\r\n            </label>\r\n\r\n            <label className=\"flex flex-col\">\r\n              <span className=\"text-sm\">ولدیت</span>\r\n              <input\r\n                {...register(\"parentName\")}\r\n                className=\"mt-1 p-2 border rounded-md\"\r\n              />\r\n            </label>\r\n\r\n            <label className=\"flex flex-col\">\r\n              <span className=\"text-sm\">جنسیت</span>\r\n              <select\r\n                {...register(\"gender\")}\r\n                className=\"mt-1 p-2 border rounded-md\"\r\n              >\r\n                <option value=\"\">جنسیت را انتخاب کنید</option>\r\n                <option value=\"مرد\">مرد</option>\r\n                <option value=\"زن\">زن</option>\r\n              </select>\r\n            </label>\r\n\r\n            <label className=\"flex flex-col\">\r\n              <span className=\"text-sm\">ولایت</span>\r\n              <select\r\n                {...register(\"province\", { required: \"انتخاب ولایت لازم است\" })}\r\n                className=\"mt-1 p-2 border rounded-md\"\r\n              >\r\n                <option value=\"\">ولایت را انتخاب کنید</option>\r\n                <option value=\"کابل\">کابل</option>\r\n                <option value=\"پروان\">پروان</option>\r\n                <option value=\"کاپیسا\">کاپیسا</option>\r\n                <option value=\"پنجشیر\">پنجشیر</option>\r\n                <option value=\"میدان وردک\">میدان وردک</option>\r\n                <option value=\"لوگر\">لوگر</option>\r\n                <option value=\"غزنی\">غزنی</option>\r\n                <option value=\"پکتیا\">پکتیا</option>\r\n                <option value=\"پکتیکا\">پکتیکا</option>\r\n                <option value=\"خوست\">خوست</option>\r\n                <option value=\"ننگرهار\">ننگرهار</option>\r\n                <option value=\"لغمان\">لغمان</option>\r\n                <option value=\"کنر\">کنر</option>\r\n                <option value=\"نورستان\">نورستان</option>\r\n                <option value=\"بغلان\">بغلان</option>\r\n                <option value=\"کندز\">کندز</option>\r\n                <option value=\"تخار\">تخار</option>\r\n                <option value=\"بدخشان\">بدخشان</option>\r\n                <option value=\"سمنگان\">سمنگان</option>\r\n                <option value=\"بلخ\">بلخ</option>\r\n                <option value=\"جوزجان\">جوزجان</option>\r\n                <option value=\"فاریاب\">فاریاب</option>\r\n                <option value=\"سرپل\">سرپل</option>\r\n                <option value=\"بامیان\">بامیان</option>\r\n                <option value=\"دایکندی\">دایکندی</option>\r\n                <option value=\"هرات\">هرات</option>\r\n                <option value=\"بادغیس\">بادغیس</option>\r\n                <option value=\"فراه\">فراه</option>\r\n                <option value=\"نیمروز\">نیمروز</option>\r\n                <option value=\"هلمند\">هلمند</option>\r\n                <option value=\"قندهار\">قندهار</option>\r\n                <option value=\"زابل\">زابل</option>\r\n                <option value=\"ارزگان\">ارزگان</option>\r\n                <option value=\"غور\">غور</option>\r\n              </select>\r\n              {errors.province && (\r\n                <span className=\"text-red-600 text-sm\">\r\n                  {errors.province.message}\r\n                </span>\r\n              )}\r\n            </label>\r\n\r\n            <label className=\"flex flex-col\">\r\n              <span className=\"text-sm\">دیپارتمنت</span>\r\n              <select\r\n                {...register(\"department\", { required: \"دیپارتمنت لازم است\" })}\r\n                className=\"mt-1 p-2 border rounded-md\"\r\n              >\r\n                <option value=\"\">دیپارتمنت را انتخاب کنید</option>\r\n                <option value=\"شبکیه\">شبکیه</option>\r\n                <option value=\"اطفال\">اطفال</option>\r\n                <option value=\"چشم پولیس\">چشم پولیس</option>\r\n                <option value=\"جراحی پلاستیک\">جراحی پلاستیک</option>\r\n                <option value=\"قرنیه\">قرنیه</option>\r\n                <option value=\"گلوکوم\">گلوکوم</option>\r\n                <option value=\"دیدکم\">دیدکم</option>\r\n                <option value=\"پبپکم\">پبپکم</option>\r\n                <option value=\"عمومی\">عمومی</option>\r\n              </select>\r\n            </label>\r\n\r\n            <label className=\"flex flex-col\">\r\n              <span className=\"text-sm\">رشته تخصصی</span>\r\n              <select\r\n                {...register(\"specialty\", { required: \"رشته تخصصی لازم است\" })}\r\n                className=\"mt-1 p-2 border rounded-md\"\r\n              >\r\n                <option value=\"\">رشته تخصص را انتخاب کنید</option>\r\n                <option value=\"چشم\">چشم</option>\r\n              </select>\r\n            </label>\r\n\r\n            <label className=\"flex flex-col\">\r\n              <span className=\"text-sm\">شفاخانه</span>\r\n              <input\r\n                {...register(\"hospital\")}\r\n                className=\"mt-1 p-2 border rounded-md\"\r\n              />\r\n            </label>\r\n\r\n            <label className=\"flex flex-col\">\r\n              <span className=\"text-sm\">تاریخ شمولیت به پروگرام تریننگ</span>\r\n              <input\r\n                type=\"date\"\r\n                {...register(\"joiningDate\")}\r\n                className=\"mt-1 p-2 border rounded-md\"\r\n              />\r\n            </label>\r\n\r\n            <label className=\"flex flex-col\">\r\n              <span className=\"text-sm\">سال تریننگ فعلی (صنف)</span>\r\n              <input\r\n                {...register(\"trainingYear\")}\r\n                className=\"mt-1 p-2 border rounded-md\"\r\n              />\r\n            </label>\r\n\r\n            <label className=\"flex flex-col\">\r\n              <span className=\"text-sm\">اسم سوپروایزر (ترینر)</span>\r\n              <input\r\n                {...register(\"supervisorName\")}\r\n                className=\"mt-1 p-2 border rounded-md\"\r\n              />\r\n            </label>\r\n\r\n            <label className=\"flex flex-col\">\r\n              <span className=\"text-sm\">تاریخ تولد</span>\r\n              <input\r\n                type=\"date\"\r\n                {...register(\"birthDate\")}\r\n                className=\"mt-1 p-2 border rounded-md\"\r\n              />\r\n            </label>\r\n\r\n            <label className=\"flex flex-col\">\r\n              <span className=\"text-sm\">نمبر تذکره</span>\r\n              <input\r\n                {...register(\"idNumber\")}\r\n                className=\"mt-1 p-2 border rounded-md\"\r\n              />\r\n            </label>\r\n\r\n            <label className=\"flex flex-col\">\r\n              <span className=\"text-sm\">شماره تماس</span>\r\n              <input\r\n                {...register(\"phoneNumber\")}\r\n                className=\"mt-1 p-2 border rounded-md\"\r\n              />\r\n            </label>\r\n\r\n            <label className=\"flex flex-col\">\r\n              <span className=\"text-sm\">شماره واتسپ</span>\r\n              <input\r\n                {...register(\"whatsappNumber\")}\r\n                className=\"mt-1 p-2 border rounded-md\"\r\n              />\r\n            </label>\r\n\r\n            <label className=\"flex flex-col\">\r\n              <span className=\"text-sm\">ایمل آدرس</span>\r\n              <input\r\n                type=\"email\"\r\n                {...register(\"email\")}\r\n                className=\"mt-1 p-2 border rounded-md\"\r\n              />\r\n            </label>\r\n\r\n            <label className=\"flex flex-col\">\r\n              <span className=\"text-sm\">شماره و کود بست</span>\r\n              <input\r\n                {...register(\"postNumberAndCode\")}\r\n                className=\"mt-1 p-2 border rounded-md\"\r\n              />\r\n            </label>\r\n\r\n            <label className=\"flex flex-col\">\r\n              <span className=\"text-sm\">نوع تقرر</span>\r\n              <select\r\n                {...register(\"appointmentType\")}\r\n                className=\"mt-1 p-2 border rounded-md\"\r\n              >\r\n                <option value=\"\">نوع تقرر را انتخاب کنید</option>\r\n                <option value=\"رقابت آزاد\">رقابت آزاد</option>\r\n                <option value=\"داوطلب\">داوطلب</option>\r\n                <option value=\"حکمی\">حکمی</option>\r\n                <option value=\"بست خالی\">بست خالی</option>\r\n              </select>\r\n            </label>\r\n\r\n            <label className=\"flex flex-col\">\r\n              <span className=\"text-sm\">وضعیت فعلی</span>\r\n              <select\r\n                {...register(\"status\")}\r\n                className=\"mt-1 p-2 border rounded-md\"\r\n              >\r\n                <option value=\"\">وضعیت فعلی را انتخاب کنید</option>\r\n                <option value=\"برحال\">برحال</option>\r\n                <option value=\"خدماتی\">خدماتی</option>\r\n              </select>\r\n            </label>\r\n\r\n            {/* فیلد آپلود عکس */}\r\n            <label className=\"flex flex-col\">\r\n              <span className=\"text-sm\">عکس ترینر</span>\r\n              <input\r\n                type=\"file\"\r\n                {...register(\"photo\")}\r\n                accept=\"image/*\"\r\n                className=\"mt-1 p-2 border rounded-md\"\r\n              />\r\n            </label>\r\n          </div>\r\n\r\n          <div className=\"flex items-center gap-3 justify-end\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => reset()}\r\n              className=\"px-4 py-2 bg-gray-200 rounded-md hover:bg-gray-300\"\r\n            >\r\n              لغو\r\n            </button>\r\n            <button\r\n              type=\"submit\"\r\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700\"\r\n            >\r\n              ثبت\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","size_bytes":15704},"client/src/components/layout/header.tsx":{"content":"import React from \"react\";\nimport { Menu } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\n\ninterface HeaderProps {\n  onMenuClick?: () => void;\n}\n\nconst Header: React.FC<HeaderProps> = ({ onMenuClick }) => {\n  const isMobile = useIsMobile();\n\n  return (\n    <header className=\"fixed top-0 left-0 right-0 z-40 flex items-center justify-between bg-green-600 text-white px-4 md:px-6 py-3 shadow-md\">\n      {/* Mobile menu button */}\n      {isMobile && (\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          onClick={onMenuClick}\n          className=\"text-white hover:bg-green-700 md:hidden focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-green-600\"\n          aria-label=\"باز کردن منوی ناوبری\"\n        >\n          <Menu className=\"h-6 w-6\" />\n        </Button>\n      )}\n\n      {/* Logo and Title */}\n      <div className={`flex items-center gap-2 md:gap-3 ${isMobile ? 'flex-1 justify-center' : 'mx-auto'}`}>\n        <img\n          src=\"/logo.svg\"\n          alt=\"Logo\"\n          className=\"h-8 w-8 md:h-10 md:w-10\"\n        />\n        <h1 className=\"text-sm md:text-xl font-bold tracking-wide truncate\">\n          سیستم مدیریتی ترینری شفاخانه چشم نور\n        </h1>\n      </div>\n\n      {/* Spacer for mobile to center title */}\n      {isMobile && <div className=\"w-10\" />}\n    </header>\n  );\n};\n\nexport default Header;\n","size_bytes":1474},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"server/controllers/form-J.ts":{"content":"// controllers/teacherActivityController.ts\nimport { Request, Response } from \"express\";\nimport mongoose from \"mongoose\";\nimport { TeacherActivityModel } from \"../models/form-J\";\n\n// ✅ ایجاد فرم جدید\nexport const createTeacherActivity = async (req: Request, res: Response) => {\n  try {\n    const { trainerId, name, parentType, trainingYear, teachers, activities } = req.body;\n\n    if (!trainerId || !name || !parentType || !trainingYear || !teachers || !activities) {\n      return res.status(400).json({ message: \"تمام فیلدها الزامی‌اند\" });\n    }\n\n    if (!mongoose.Types.ObjectId.isValid(trainerId)) {\n      return res.status(400).json({ message: \"TrainerId معتبر نیست\" });\n    }\n\n    // ✅ بررسی وجود فرم قبلی همان ترینر\n    const existingForm = await TeacherActivityModel.findOne({ trainerId });\n    if (existingForm) {\n      return res.status(400).json({ message: \"این فرم برای این ترینر قبلاً ثبت شده است.\" });\n    }\n\n    const newForm = new TeacherActivityModel({\n      trainerId: new mongoose.Types.ObjectId(trainerId),\n      name,\n      parentType,\n      trainingYear,\n      teachers,\n      activities,\n    });\n\n    const savedForm = await newForm.save();\n    res.status(201).json({ message: \"✅ فرم ذخیره شد\", form: savedForm });\n  } catch (err) {\n    console.error(\"❌ خطا در ذخیره فرم:\", err);\n    res.status(500).json({ message: \"خطای ناشناخته در هنگام ذخیره\", error: err });\n  }\n};\n\n// ✅ دریافت یک فرم برای یک ترینر\nexport const getSingleTeacherActivityByTrainer = async (req: Request, res: Response) => {\n  try {\n    const { trainerId } = req.params;\n\n    if (!trainerId)\n      return res.status(400).json({ message: \"TrainerId الزامی است\" });\n\n    // ✅ فقط اولین فرم ثبت شده برای این ترینر\n    const form = await TeacherActivityModel.findOne({\n      trainerId: new mongoose.Types.ObjectId(trainerId),\n    }).sort({ createdAt: -1 });\n\n    if (!form)\n      return res.status(404).json({ message: \"فرمی برای این ترینر موجود نیست\" });\n\n    res.json(form);\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ message: \"❌ خطا در گرفتن فرم\", error: err });\n  }\n};\n\n\n// ✅ دریافت فرم با ID خاص\nexport const getTeacherActivityById = async (req: Request, res: Response) => {\n  try {\n    const { id } = req.params;\n    const form = await TeacherActivityModel.findById(id);\n    if (!form) return res.status(404).json({ message: \"فرم یافت نشد\" });\n    res.json(form);\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ message: \"❌ خطا در دریافت فرم\", error: err });\n  }\n};\n\n// ✅ ویرایش فرم\nexport const updateTeacherActivity = async (req: Request, res: Response) => {\n  try {\n    const { id } = req.params;\n    const data = req.body;\n\n    if (!data.trainerId) return res.status(400).json({ message: \"TrainerId الزامی است\" });\n\n    const updatedForm = await TeacherActivityModel.findByIdAndUpdate(id, { $set: data }, { new: true, runValidators: true });\n    if (!updatedForm) return res.status(404).json({ message: \"فرم یافت نشد\" });\n\n    res.json({ message: \"✅ فرم بروزرسانی شد\", form: updatedForm });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ message: \"❌ خطا در بروزرسانی فرم\", error: err });\n  }\n};\n\n// ✅ حذف فرم\nexport const deleteTeacherActivity = async (req: Request, res: Response) => {\n  try {\n    const { id } = req.params;\n    const deleted = await TeacherActivityModel.findByIdAndDelete(id);\n    if (!deleted) return res.status(404).json({ message: \"فرم پیدا نشد\" });\n    res.json({ message: \"✅ فرم با موفقیت حذف شد\" });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ message: \"❌ خطا در حذف فرم\", error: err });\n  }\n};\n","size_bytes":4026},"server/models/form-F.ts":{"content":"import mongoose, { Schema, Document } from \"mongoose\";\r\n\r\ninterface MonthScore {\r\n  month: number;\r\n  value: number;\r\n}\r\n\r\ninterface Activity {\r\n  id: string;\r\n  title: string;\r\n  percent: number;\r\n  months: MonthScore[];\r\n  total: number;\r\n}\r\n\r\ninterface Section {\r\n  name: string;\r\n  activities: Activity[];\r\n}\r\n\r\nexport interface IChecklist extends Document {\r\n  trainerId: mongoose.Types.ObjectId; // ✅ اضافه شد\r\n  name: string;\r\n  parentType: string;\r\n  trainingYear: string;\r\n  sections: Section[];\r\n}\r\n\r\nconst MonthScoreSchema = new Schema<MonthScore>({\r\n  month: { type: Number, required: true },\r\n  value: { type: Number, required: true },\r\n});\r\n\r\nconst ActivitySchema = new Schema<Activity>({\r\n  id: { type: String, required: true },\r\n  title: { type: String, required: true },\r\n  percent: { type: Number, required: true },\r\n  months: { type: [MonthScoreSchema], required: true },\r\n  total: { type: Number, required: true },\r\n});\r\n\r\nconst SectionSchema = new Schema<Section>({\r\n  \r\n  name: { type: String, required: true },\r\n  activities: { type: [ActivitySchema], required: true },\r\n});\r\n\r\nconst ChecklistSchema = new Schema<IChecklist>({\r\n  trainerId: {\r\n    type: Schema.Types.ObjectId,\r\n    ref: \"Trainer\", // ✅ رفرنس به کالکشن ترینرها\r\n    required: true,\r\n  },\r\n  name: { type: String, required: true },\r\n  parentType: { type: String, required: true },\r\n  trainingYear: { type: String, required: true },\r\n  sections: { type: [SectionSchema], required: true },\r\n});\r\n\r\nexport default mongoose.model<IChecklist>(\"Checklist\", ChecklistSchema);","size_bytes":1587},"shared/schema.ts":{"content":"import { z } from \"zod\";\r\n\r\n// Demo User Credentials\r\nexport const DEMO_CREDENTIALS = {\r\n  admin: {\r\n    username: \"admin@com\",\r\n    password: \"admin123\",\r\n    id: \"demo_admin_001\",\r\n    firstName: \"Admin\",\r\n    lastName: \"User\",\r\n    role: \"admin\"\r\n  },\r\n  viewer: {\r\n    username: \"viewer@com\",\r\n    password: \"Viewer123\",\r\n    id: \"demo_viewer_001\", \r\n    firstName: \"Viewer\",\r\n    lastName: \"User\",\r\n    role: \"viewer\"\r\n  }\r\n};\r\n\r\n// Zod validation schemas\r\nexport const insertResidentSchema = z.object({\r\n  fullName: z.string().min(1),\r\n  age: z.number().min(1).max(150),\r\n  gender: z.string().min(1),\r\n  department: z.string().min(1),\r\n  startDate: z.date(),\r\n  endDate: z.date().optional(),\r\n  status: z.string().default(\"active\"),\r\n  profileImageUrl: z.string().optional(),\r\n});\r\n\r\nexport const insertTeacherSchema = z.object({\r\n  name: z.string().min(1),\r\n  lostname: z.string().min(1),\r\n  fatherName: z.string().min(1),\r\n  grandfatherName: z.string().min(1),\r\n  academicRank: z.string().min(1),\r\n  rankAchievementDate: z.date(),\r\n  trainerAppointmentDate: z.date(),\r\n  gender: z.string().min(1),\r\n  province: z.string().min(1),\r\n  subject: z.string().min(1),\r\n  position: z.string().min(1),\r\n  hospital: z.string().min(1),\r\n  dateOfBirth: z.date(),\r\n  idNumber: z.string().min(1),\r\n  dutyStartDate: z.date(),\r\n  contactInfo: z.string().min(1),\r\n  whatsappNumber: z.string().min(1),\r\n  emailAddress: z.string().email(),\r\n  postCode: z.string().min(1),\r\n  appointmentType: z.string().min(1),\r\n  status: z.string().default(\"active\"),\r\n  profileImageUrl: z.string().optional(),\r\n});\r\n\r\nexport const insertFormSchema = z.object({\r\n  residentId: z.string().min(1),\r\n  formType: z.string().min(1),\r\n  formData: z.record(z.any()),\r\n  supervisorId: z.string().optional(),\r\n  status: z.string().default(\"draft\"),\r\n  completedAt: z.date().optional(),\r\n});\r\n\r\nexport const insertDisciplinaryActionSchema = z.object({\r\n  residentId: z.string().min(1),\r\n  date: z.date(),\r\n  description: z.string().min(1),\r\n  actionTaken: z.string().min(1),\r\n  severity: z.string().default(\"minor\"),\r\n  createdBy: z.string().min(1),\r\n});\r\n\r\nexport const insertRewardSchema = z.object({\r\n  residentId: z.string().min(1),\r\n  date: z.date(),\r\n  description: z.string().min(1),\r\n  rewardType: z.string().min(1),\r\n  amount: z.string().optional(),\r\n  createdBy: z.string().min(1),\r\n});\r\n\r\n// Basic Types for interface compatibility\r\nexport type UpsertUser = {\r\n  _id: string;\r\n  email?: string;\r\n  firstName?: string;\r\n  lastName?: string;\r\n  profileImageUrl?: string;\r\n  role?: string;\r\n};\r\n\r\nexport type InsertResident = z.infer<typeof insertResidentSchema>;\r\nexport type InsertTeacher = z.infer<typeof insertTeacherSchema>;\r\nexport type InsertForm = z.infer<typeof insertFormSchema>;\r\nexport type InsertDisciplinaryAction = z.infer<typeof insertDisciplinaryActionSchema>;\r\nexport type InsertReward = z.infer<typeof insertRewardSchema>;\r\n\r\n// Interface types that match our models\r\nexport type User = {\r\n  _id: string;\r\n  email?: string;\r\n  firstName?: string;\r\n  lastName?: string;\r\n  profileImageUrl?: string;\r\n  password?: string;\n  role: string;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n};\r\n\r\nexport type Resident = {\r\n  _id: string;\r\n  fullName: string;\r\n  age: number;\r\n  gender: string;\r\n  department: string;\r\n  startDate: Date;\r\n  endDate?: Date;\r\n  status: string;\r\n  profileImageUrl?: string;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n};\r\n\r\nexport type Teacher = {\r\n  _id: string;\r\n  name: string;\r\n  lostname:string;\r\n  fatherName: string;\r\n  grandfatherName: string;\r\n  academicRank: string;\r\n  rankAchievementDate: Date;\r\n  trainerAppointmentDate: Date;\r\n  gender: string;\r\n  province: string;\r\n  subject: string;\r\n  position: string;\r\n  hospital: string;\r\n  dateOfBirth: Date;\r\n  idNumber: string;\r\n  dutyStartDate: Date;\r\n  contactInfo: string;\r\n  whatsappNumber: string;\r\n  emailAddress: string;\r\n  postCode: string;\r\n  appointmentType: string;\r\n  status: string;\r\n  profileImageUrl?: string;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n};\r\n\r\nexport type Form = {\r\n  _id: string;\r\n  residentId: string;\r\n  formType: string;\r\n  formData: Record<string, any>;\r\n  supervisorId?: string;\r\n  status: string;\r\n  completedAt?:string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n};\r\n\r\nexport type DisciplinaryAction = {\r\n  _id: string;\r\n  residentId: string;\r\n  date: Date;\r\n  description: string;\r\n  actionTaken: string;\r\n  severity: string;\r\n  createdBy: string;\r\n  createdAt: Date;\r\n};\r\n\r\nexport type Reward = {\r\n  _id: string;\r\n  residentId: string;\r\n  date: Date;\r\n  description: string;\r\n  rewardType: string;\r\n  amount?: string;\r\n  createdBy: string;\r\n  createdAt: Date;\r\n};","size_bytes":4663},"client/src/components/teachers/teacher-table.tsx":{"content":"import { useState } from \"react\";\r\nimport { Teacher } from \"@shared/schema\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\r\nimport { Eye, Edit, CalendarDays } from \"lucide-react\";\r\nimport ViewTeacherModal from \"./ViewTeacherModal\";\r\nimport LectureModal from \"./LectureModal\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { useAuth } from \"@/hooks/useAuth\";\n\r\ninterface TeacherTableProps {\r\n  teachers: Teacher[];\r\n  onViewDetails: (teacher: Teacher) => void;\r\n  onEdit: (teacher: Teacher) => void;\r\n  onDelete: (teacherId: string) => void;\r\n}\r\n\r\nexport default function TeacherTable({\r\n  teachers,\r\n  onViewDetails,\r\n  onEdit,\r\n  onDelete,\r\n}: TeacherTableProps) {\r\n  const { user } = useAuth();\n  const [selectedTeacher, setSelectedTeacher] = useState<Teacher | null>(null);\r\n  const [openLectureModal, setOpenLectureModal] = useState(false);\r\n  const [viewModalOpen, setViewModalOpen] = useState(false);\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case \"active\":\r\n        return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\";\r\n      case \"inactive\":\r\n        return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300\";\r\n      default:\r\n        return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300\";\r\n    }\r\n  };\r\n\r\n  const getStatusText = (status: string) => {\r\n    switch (status) {\r\n      case \"active\":\r\n        return \"برحال\";\r\n      case \"inactive\":\r\n        return \"منفک\";\r\n      default:\r\n        return status;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"overflow-x-auto rounded-lg shadow-md border border-slate-200\">\r\n      <table className=\"min-w-full border-collapse text-sm\">\r\n        <thead className=\"bg-slate-100 text-slate-700\">\r\n          <tr>\r\n            <th className=\"px-4 py-3 text-right\">عکس</th>\r\n            <th className=\"px-4 py-3 text-right\">نام مکمل</th>\r\n            <th className=\"px-4 py-3 text-right\">بست</th>\r\n            <th className=\"px-4 py-3 text-right\">رتبه علمی</th>\r\n            <th className=\"px-4 py-3 text-right\">مضمون</th>\r\n            <th className=\"px-4 py-3 text-right\">حالت</th>\r\n            <th className=\"px-4 py-3 text-center\">عملیات</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {teachers.map((teacher, index) => (\r\n            <tr\r\n              key={teacher._id}\r\n              className={`${\r\n                index % 2 === 0 ? \"bg-white\" : \"bg-slate-50\"\r\n              } hover:bg-slate-100 transition`}\r\n            >\r\n              <td className=\"px-4 py-3\">\r\n                <Avatar className=\"h-10 w-10\">\r\n                  <AvatarImage\r\n                    src={teacher.profileImageUrl || \"\"}\r\n                    alt={teacher.name}\r\n                  />\r\n                  <AvatarFallback className=\"bg-hospital-green-100 text-hospital-green-600\">\r\n                    {teacher.name.charAt(0)}\r\n                  </AvatarFallback>\r\n                </Avatar>\r\n              </td>\r\n\r\n              <td className=\"px-4 py-3 font-medium text-slate-900\">\r\n                {teacher.name} {teacher.lostname}\r\n              </td>\r\n\r\n              <td className=\"px-4 py-3\">{teacher.position}</td>\r\n              <td className=\"px-4 py-3\">{teacher.academicRank}</td>\r\n              <td className=\"px-4 py-3\">{teacher.subject}</td>\r\n\r\n              <td className=\"px-4 py-3\">\r\n                <Badge className={`text-xs ${getStatusColor(teacher.status)}`}>\r\n                  {getStatusText(teacher.status)}\r\n                </Badge>\r\n              </td>\r\n\r\n              <td className=\"px-4 py-3 flex items-center justify-center gap-2\">\r\n                {/* مشاهده جزئیات */}\r\n                <Button\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                  onClick={() => {\r\n                    setSelectedTeacher(teacher);\r\n                    setViewModalOpen(true);\r\n                  }}\r\n                >\r\n                  <Eye className=\"h-4 w-4\" />\r\n                </Button>\r\n\r\n                {/* ویرایش */}\n                {user?.role === \"admin\" && (\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => onEdit(teacher)}\n                  >\n                    <Edit className=\"h-4 w-4\" />\n                  </Button>\n                )}\n\n                {/* بخش لکچر */}\n                {user?.role === \"admin\" && (\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => {\n                      setSelectedTeacher(teacher);\n                      setOpenLectureModal(true);\n                    }}\n                  >\n                    <CalendarDays className=\"h-4 w-4\" />\n                  </Button>\n                )}\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n\r\n      {/* مودال نمایش جزئیات استاد */}\r\n      {selectedTeacher && viewModalOpen && (\r\n        <ViewTeacherModal\r\n          teacher={selectedTeacher}\r\n          open={viewModalOpen}\r\n          onClose={() => {\r\n            setSelectedTeacher(null);\r\n            setViewModalOpen(false);\r\n          }}\r\n        />\r\n      )}\r\n\r\n      {/* مودال لکچر */}\r\n      {selectedTeacher && openLectureModal && (\r\n        <LectureModal\r\n          teacher={selectedTeacher}\r\n          open={openLectureModal}\r\n          onClose={() => setOpenLectureModal(false)}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","size_bytes":5652},"client/src/pages/landing.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useState } from \"react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Landing() {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [showDemo, setShowDemo] = useState(false);\n  const { toast } = useToast();\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      await apiRequest(\"/api/login\", {\n        method: \"POST\",\n        body: JSON.stringify({ username, password }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n\n      toast({\n        title: \"Login successful\",\n        description: \"Welcome to the Hospital Resident Management System\",\n      });\n\n      // Refresh the page to trigger auth state update\n      window.location.reload();\n    } catch (error) {\n      toast({\n        title: \"Login failed\",\n        description: \"Please check your credentials and try again\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const fillDemoCredentials = (type: 'admin' | 'viewer') => {\n    if (type === 'admin') {\n      setUsername(\"admin@com\");\n      setPassword(\"admin123\");\n    } else {\n      setUsername(\"viewer@com\");\n      setPassword(\"Viewer123\");\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-slate-50 to-slate-100\">\n      <Card className=\"w-[400px] h-[450px] max-w-md mx-4 \">\n        <CardHeader className=\"text-center\">\n          <div className=\"mx-auto h-16 w-16 bg-hospital-green-500 rounded-full flex items-center justify-center mb-4\">\n            <svg\n              className=\"h-8 w-8 text-white\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              viewBox=\"0 0 24 24\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4\"\n              />\n            </svg>\n          </div>\n          <CardTitle className=\"text-3xl font-bold text-slate-900\">سیستم مدیریتی ترینری شفاخانه چشم نور</CardTitle>\n          {/* <p className=\"text-slate-600\">ورود به سیستم </p> */}\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleLogin} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"username\">ایمیل</Label>\n              <Input \n                id=\"username\"\n                type=\"email\"\n                placeholder=\"ایمیل خود را وارد کنید\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                required\n                data-testid=\"input-username\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"password\">پسورد</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"پسورد خود را بنویسید\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n                data-testid=\"input-password\"\n              />\n            </div>\n            <Button\n              type=\"submit\"\n              className=\"w-full bg-hospital-green-600 hover:bg-hospital-green-700\"\n              disabled={isLoading}\n              data-testid=\"button-login\"\n            >\n              {isLoading ? \"Signing in...\" : \"Sign In\"}\n            </Button>\n          </form>\n\n          {/* <div className=\"mt-6 pt-4 border-t\"> */}\n            {/* <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => setShowDemo(!showDemo)}\n              className=\"w-full mb-3\"\n              data-testid=\"button-show-demo\"\n            >\n              {showDemo ? \"پنهان\" : \"نمایش\"} اکونت های دیمو\n            </Button> */}\n\n            {showDemo && (\n              <div className=\"space-y-2\">\n                {/* <div className=\"text-sm text-slate-600 mb-3\">\n                  استفاده از اکونت دیمو\n                </div> */}\n                {/* <div className=\"flex gap-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"secondary\"\n                    size=\"sm\"\n                    onClick={() => fillDemoCredentials('admin')}\n                    className=\"flex-1\"\n                    data-testid=\"button-demo-admin\"\n                  >\n                    ادمین\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    variant=\"secondary\"\n                    size=\"sm\"\n                    onClick={() => fillDemoCredentials('viewer')}\n                    className=\"flex-1\"\n                    data-testid=\"button-demo-viewer\"\n                  >\n                    ناظر\n                  </Button>\n                </div> */}\n                <div className=\"text-xs text-slate-500 mt-2\">\n                  ادمین: دسترسی تمام • ناظر: فقد دیدن سیستم\n                </div>\n              </div>\n            )}\n          {/* </div> */}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5771},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean>(() => \n    typeof window !== 'undefined' ? window.innerWidth < MOBILE_BREAKPOINT : false\n  )\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return isMobile\n}\n","size_bytes":633},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  url: string,\n  options?: {\n    method?: string;\n    body?: string;\n    headers?: Record<string, string>;\n  }\n): Promise<Response> {\n  const res = await fetch(url, {\n    method: options?.method || \"GET\",\n    headers: options?.headers || {},\n    body: options?.body,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1403},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/controllers/form-D.ts":{"content":"import { Request, Response } from \"express\";\r\nimport mongoose from \"mongoose\";\r\nimport { ConferenceEvaluation } from \"../models/form-D\";\r\n\r\nexport class ConferenceEvaluationController {\r\n  // 🔹 ایجاد فرم جدید\r\n  static async create(req: Request, res: Response) {\r\n    try {\r\n      const {\r\n        trainer,\r\n        year,\r\n        name,\r\n        parentType,\r\n        department,\r\n        trainingYear,\r\n        conferences,\r\n      } = req.body;\r\n\r\n      if (!trainer) {\r\n        return res\r\n          .status(400)\r\n          .json({ message: \"Trainer ID خالی است و فرم ذخیره نمی‌شود.\" });\r\n      }\r\n\r\n       \r\n\r\n      const newEvaluation = new ConferenceEvaluation({\r\n        trainer: new mongoose.Types.ObjectId(trainer),\r\n        year,\r\n        name,\r\n        parentType,\r\n        department,\r\n        trainingYear,\r\n        conferences,\r\n      });\r\n\r\n      await newEvaluation.save();\r\n      res\r\n        .status(201)\r\n        .json({ message: \"✅ فرم ذخیره شد\", id: newEvaluation._id });\r\n    } catch (err) {\r\n      console.error(\"❌ Error saving evaluation:\", err);\r\n      res.status(500).json({ message: \"خطا در ذخیره فرم\", error: err });\r\n    }\r\n  }\r\n\r\n  // 🔹 دریافت تمام فرم‌ها بر اساس trainerId (اختیاری)\r\n  static async getAll(req: Request, res: Response) {\r\n    try {\r\n      const { trainerId } = req.query;\r\n\r\n      const filter = trainerId\r\n        ? { trainer: new mongoose.Types.ObjectId(trainerId as string) }\r\n        : {};\r\n\r\n      const evaluations = await ConferenceEvaluation.find(filter)\r\n        .populate(\"trainer\")\r\n        .sort({ createdAt: -1 });\r\n\r\n      res.status(200).json(evaluations);\r\n    } catch (err) {\r\n      console.error(\"❌ Error fetching evaluations:\", err);\r\n      res.status(500).json({ message: \"خطا در دریافت دیتا\", error: err });\r\n    }\r\n  }\r\n\r\n  // 🔹 دریافت فرم بر اساس ID\r\n  static async getById(req: Request, res: Response) {\r\n    try {\r\n      const evaluation = await ConferenceEvaluation.findById(\r\n        req.params.id\r\n      ).populate(\"trainer\");\r\n      if (!evaluation) return res.status(404).json({ message: \"فرم پیدا نشد\" });\r\n      res.json(evaluation);\r\n    } catch (err) {\r\n      console.error(\"❌ Error fetching evaluation:\", err);\r\n      res.status(500).json({ message: \"خطا در دریافت فرم\", error: err });\r\n    }\r\n  }\r\n\r\n  // 🔹 بروزرسانی فرم بر اساس ID\r\n  static async update(req: Request, res: Response) {\r\n    try {\r\n      const updated = await ConferenceEvaluation.findByIdAndUpdate(\r\n        req.params.id,\r\n        req.body,\r\n        { new: true }\r\n      );\r\n      if (!updated) return res.status(404).json({ message: \"فرم پیدا نشد\" });\r\n      res.json({ message: \"✅ فرم بروزرسانی شد\", updated });\r\n    } catch (err) {\r\n      console.error(\"❌ Error updating evaluation:\", err);\r\n      res.status(500).json({ message: \"خطا در بروزرسانی فرم\", error: err });\r\n    }\r\n  }\r\n\r\n  // 🔹 حذف فرم بر اساس ID\r\n  static async delete(req: Request, res: Response) {\r\n    try {\r\n      const deleted = await ConferenceEvaluation.findByIdAndDelete(\r\n        req.params.id\r\n      );\r\n      if (!deleted) return res.status(404).json({ message: \"فرم پیدا نشد\" });\r\n      res.json({ message: \"✅ فرم با موفقیت حذف شد\" });\r\n    } catch (err) {\r\n      console.error(\"❌ Error deleting evaluation:\", err);\r\n      res.status(500).json({ message: \"خطا در حذف فرم\", error: err });\r\n    }\r\n  }\r\n}\r\n","size_bytes":3614},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/components/teachers/LectureModal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport axios from \"axios\";\n\n// برای تاریخ شمسی\nimport DatePicker from \"react-multi-date-picker\";\nimport persian from \"react-date-object/calendars/persian\";\nimport persian_fa from \"react-date-object/locales/persian_fa\";\n\ninterface LectureModalProps {\n  teacher: any;\n  open: boolean;\n  onClose: () => void;\n}\n\nexport default function LectureModal({ teacher, open, onClose }: LectureModalProps) {\n  const [lecture, setLecture] = useState({\n    date: null as any,\n    subject: \"\",\n    startTime: \"\",\n    endTime: \"\",\n    room: \"\",\n    notes: \"\",\n    files: [] as File[],\n  });\n\n  // تغییرات فرم\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setLecture({ ...lecture, [e.target.name]: e.target.value });\n  };\n\n  // تغییر فایل‌ها\n  const handleFilesChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files) {\n      setLecture({ ...lecture, files: Array.from(e.target.files) });\n    }\n  };\n\n  // تغییر تاریخ شمسی\n  const handleDateChange = (date: any) => {\n    setLecture({ ...lecture, date });\n  };\n\n  const handleSubmit = async () => {\n    try {\n      // تبدیل تاریخ شمسی به میلادی\n      const gregorianDate = lecture.date?.toDate(); // تبدیل به JavaScript Date (میلادی)\n      const dateString = gregorianDate ? gregorianDate.toISOString().split('T')[0] : \"\";\n      \n      // Create FormData for file upload\n      const formData = new FormData();\n      formData.append(\"teacherId\", teacher._id);\n      formData.append(\"date\", dateString);\n      formData.append(\"subject\", lecture.subject);\n      formData.append(\"startTime\", lecture.startTime);\n      formData.append(\"endTime\", lecture.endTime);\n      formData.append(\"room\", lecture.room);\n      formData.append(\"notes\", lecture.notes);\n      \n      // Add files to FormData\n      lecture.files.forEach((file) => {\n        formData.append(\"files\", file);\n      });\n\n      await axios.post(\"/api/lectures\", formData, {\n        headers: { \"Content-Type\": \"multipart/form-data\" },\n      });\n\n      alert(\"لکچر موفقانه ثبت شد ✅\");\n      onClose();\n    } catch (error) {\n      console.error(error);\n      alert(\"ثبت لکچر ناکام شد ❌\");\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle>ثبت لکچر برای {teacher.name}</DialogTitle>\n        </DialogHeader>\n\n        <div className=\"grid gap-4\">\n          {/* تاریخ شمسی */}\n          <div>\n            <Label>تاریخ</Label>\n            <DatePicker\n              calendar={persian}\n              locale={persian_fa}\n              value={lecture.date}\n              onChange={handleDateChange}\n              inputClass=\"w-full border rounded px-2 py-1\"\n            />\n          </div>\n\n          <div>\n            <Label>مضمون لکچر</Label>\n            <Input name=\"subject\" value={lecture.subject} onChange={handleChange} />\n          </div>\n\n          <div className=\"flex gap-2\">\n            <div className=\"flex-1\">\n              <Label>ساعت شروع</Label>\n              <Input type=\"time\" name=\"startTime\" value={lecture.startTime} onChange={handleChange} />\n            </div>\n            <div className=\"flex-1\">\n              <Label>ساعت ختم</Label>\n              <Input type=\"time\" name=\"endTime\" value={lecture.endTime} onChange={handleChange} />\n            </div>\n          </div>\n\n          <div>\n            <Label>صنف / تالار</Label>\n            <Input name=\"room\" value={lecture.room} onChange={handleChange} />\n          </div>\n\n          {/* <div>\n            <Label>توضیحات</Label>\n            <Input name=\"notes\" value={lecture.notes} onChange={handleChange} />\n          </div> */}\n\n          {/* آپلود فایل */}\n          <div>\n            <Label>آپلود فایل‌ها</Label>\n            <Input type=\"file\" multiple onChange={handleFilesChange} />\n            {lecture.files.length > 0 && (\n              <ul className=\"mt-1 text-sm\">\n                {lecture.files.map((file, idx) => (\n                  <li key={idx}>{file.name}</li>\n                ))}\n              </ul>\n            )}\n          </div>\n\n          <Button onClick={handleSubmit} className=\"w-full mt-2\">\n            ذخیره لکچر\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":4711},"client/src/pages/reports.tsx":{"content":"import ReportCards from \"@/components/reports/report-cards\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\n\nexport default function Reports() {\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <Header />\n      <Sidebar />\n      <div className=\"mr-0 md:mr-64 p-4 md:p-6\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b border-slate-200 -m-4 md:-m-6 mb-4 md:mb-6\">\n        <div className=\"px-4 md:px-6 py-4\">\n          <h1 className=\"text-xl md:text-2xl font-semibold text-slate-900\">گزارشات و تحلیل‌ها</h1>\n        </div>\n      </header>\n\n      <ReportCards />\n      </div>\n    </div>\n  );\n}\n","size_bytes":704},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/pages/setting.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { User } from \"@shared/schema\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Plus, Search } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport UserFormDialog from \"@/components/forms/UserFormDialog\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nexport default function UserManagement() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [users, setUsers] = useState<User[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isUserDialogOpen, setIsUserDialogOpen] = useState(false);\n  const [editingUser, setEditingUser] = useState<User | null>(null);\n\n\n\n\n  // دریافت کاربران از سرور\n  const fetchUsers = async () => {\n    try {\n      setLoading(true);\n      const res = await axios.get<User[]>(\"/api/users\");\n      setUsers(res.data);\n    } catch (err: any) {\n      setError(err.message || \"خطا در دریافت کاربران\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n\n  // حذف کاربر\n  const deleteUser = async (id: string) => {\n    if (!confirm(\"آیا مطمئن هستید که می‌خواهید این کاربر را حذف کنید؟\")) return;\n    try {\n      await axios.delete(`/api/users/${id}`);\n      setUsers((prev) => prev.filter((u) => u._id !== id));\n      toast({ title: \"موفقیت\", description: \"کاربر حذف شد\" });\n    } catch (err: any) {\n      toast({ title: \"خطا\", description: \"حذف کاربر با خطا مواجه شد\", variant: \"destructive\" });\n    }\n  };\n\n// فیلتر جستجو\nconst filteredUsers = users.filter(\n  (u) =>\n    u.firstName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    u.email?.toLowerCase().includes(searchTerm.toLowerCase())\n);\n\n\n  const handleAddUser = () => {\n    setEditingUser(null);\n    setIsUserDialogOpen(true);\n  };\n\n  const handleEditUser = (user: User) => {\n    setEditingUser(user);\n    setIsUserDialogOpen(true);\n  };\n\n  const handleCloseDialog = () => {\n    setIsUserDialogOpen(false);\n    setEditingUser(null);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <Header />\n      <Sidebar />\n      <div className=\"mr-0 md:mr-64 pt-16 md:pt-20 p-4 md:p-6 space-y-4 md:space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-xl md:text-3xl font-bold tracking-tight\">مدیریت کاربران</h1>\n            <p className=\"text-sm md:text-base text-slate-600 dark:text-slate-400\">مدیریت حساب‌های کاربران سیستم</p>\n          </div>\n          {user?.role === \"admin\" && (\n            <Button\n              onClick={handleAddUser}\n              data-testid=\"button-add-user\"\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              افزودن کاربر جدید\n            </Button>\n          )}\n        </div>\n\n        {/* Main Card */}\n        <Card>\n          <CardHeader>\n            <CardTitle>لیست کاربران</CardTitle>\n            <CardDescription>مجموع {filteredUsers.length} کاربر</CardDescription>\n          </CardHeader>\n          <CardContent>\n            {/* Search */}\n            <div className=\"mb-6\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-slate-400\" />\n                <Input\n                  placeholder=\"جستجو بر اساس نام یا ایمیل...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n\n            {/* Content */}\n            {loading ? (\n              <div className=\"flex justify-center py-8\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-hospital-green-500\"></div>\n              </div>\n            ) : error ? (\n              <p className=\"text-red-600\">{error}</p>\n            ) : filteredUsers.length === 0 ? (\n              <div className=\"text-center py-8 text-slate-500\">\n                {searchTerm ? \"هیچ کاربری یافت نشد\" : \"هنوز کاربری اضافه نشده است\"}\n              </div>\n            ) : (\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full border-collapse rounded-lg overflow-hidden shadow-sm\">\n                  <thead className=\"bg-slate-100 text-slate-700\">\n                    <tr>\n                      <th className=\"border p-2 text-center\">نام</th>\n                      <th className=\"border p-2 text-center\">ایمیل</th>\n                      <th className=\"border p-2 text-center\">نقش</th>\n                      <th className=\"border p-2 text-center\">عملیات</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {filteredUsers.map((userItem) => (\n                      <tr key={userItem._id} className=\"text-center hover:bg-slate-50\">\n                      <td className=\"border p-2\">{userItem.firstName ?? \"-\"}</td>\n                      <td className=\"border p-2\">{userItem.email ?? \"-\"}</td>\n                      <td className=\"border p-2\">{userItem.role ?? \"-\"}</td>\n\n                        <td className=\"border p-2 flex items-center justify-center gap-2\">\n                          {user?.role === \"admin\" && (\n                            <>\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => handleEditUser(userItem)}\n                              >\n                                ویرایش\n                              </Button>\n                              <Button\n                                variant=\"destructive\"\n                                size=\"sm\"\n                                onClick={() => deleteUser(userItem._id)}\n                              >\n                                حذف\n                              </Button>\n                            </>\n                          )}\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      <UserFormDialog\n        isOpen={isUserDialogOpen}\n        onClose={handleCloseDialog}\n        onSuccess={fetchUsers}\n        editingUser={editingUser}\n      />\n    </div>\n  );\n}\n","size_bytes":6970},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/residents/form-details/formG-detail.tsx":{"content":"// components/forms/FormGDetails.tsx\r\nimport React, { useEffect, useState, useRef } from \"react\";\r\nimport * as XLSX from \"xlsx\";\r\n\r\ninterface FormGDetailsProps {\r\n  trainerId: string;\r\n  onClose?: () => void;\r\n}\r\n\r\ninterface PersonalInfo {\r\n  Name: string;\r\n  parentType: string;\r\n  department: string;\r\n  trainingYear: string;\r\n  year: string;\r\n}\r\n\r\ninterface Score {\r\n  exam1Written: number;\r\n  exam1Practical: number;\r\n  exam2Written: number;\r\n  exam2Practical: number;\r\n  finalWritten: number;\r\n  finalPractical: number;\r\n  total: number;\r\n  teacherName: string;\r\n}\r\n\r\ninterface FormG {\r\n  _id: string;\r\n  trainer: string;\r\n  personalInfo: PersonalInfo;\r\n  scores: Score[];\r\n  averageScore: number;\r\n  departmentHead?: string;\r\n  programHead?: string;\r\n  hospitalHead?: string;\r\n}\r\n\r\nexport default function FormGDetails({ trainerId, onClose }: FormGDetailsProps) {\r\n  const [data, setData] = useState<FormG | null>(null);\r\n  const [editing, setEditing] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [saving, setSaving] = useState(false);\r\n  const printRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const res = await fetch(`/api/evaluationFormG?trainerId=${trainerId}`);\r\n        if (res.status === 404) {\r\n          setData(null);\r\n          return;\r\n        }\r\n        if (!res.ok) throw new Error(\"خطا در دریافت داده‌ها\");\r\n        const result = await res.json();\r\n        const form = Array.isArray(result) ? result[0] : result;\r\n        setData({\r\n          ...form,\r\n          scores: form.scores || [],\r\n          personalInfo: form.personalInfo || {\r\n            Name: \"\",\r\n            parentType: \"\",\r\n            department: \"\",\r\n            trainingYear: \"\",\r\n            year: \"\",\r\n          },\r\n        });\r\n      } catch (err) {\r\n        console.error(\"Error fetching Form G:\", err);\r\n        setData(null);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    if (trainerId) fetchData();\r\n  }, [trainerId]);\r\n\r\n  const handleChangePersonalInfo = (field: keyof PersonalInfo, value: string) => {\r\n    if (!data) return;\r\n    setData({ ...data, personalInfo: { ...data.personalInfo, [field]: value } });\r\n  };\r\n\r\n  const handleScoreChange = (idx: number, field: keyof Score, value: string | number) => {\r\n    if (!data) return;\r\n    const newScores = [...data.scores];\r\n    newScores[idx] = { ...newScores[idx], [field]: value };\r\n\r\n    const s = newScores[idx];\r\n    newScores[idx].total =\r\n      Number(s.exam1Written) +\r\n      Number(s.exam1Practical) +\r\n      Number(s.exam2Written) +\r\n      Number(s.exam2Practical) +\r\n      Number(s.finalWritten) +\r\n      Number(s.finalPractical);\r\n\r\n    const avg =\r\n      newScores.reduce((acc, cur) => acc + cur.total, 0) / (newScores.length || 1);\r\n\r\n    setData({ ...data, scores: newScores, averageScore: parseFloat(avg.toFixed(2)) });\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    if (!data) return;\r\n    try {\r\n      setSaving(true);\r\n      const res = await fetch(`/api/evaluationFormG/${data._id}`, {\r\n        method: \"PUT\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(data),\r\n      });\r\n      if (!res.ok) throw new Error(\"خطا در ذخیره تغییرات\");\r\n      const result = await res.json();\r\n      setData(result.updated);\r\n      setEditing(false);\r\n      alert(\"✅ تغییرات با موفقیت ذخیره شد\");\r\n    } catch (err) {\r\n      console.error(\"Error saving form:\", err);\r\n      alert(\"❌ خطا در ذخیره تغییرات\");\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  const handleExportExcel = () => {\r\n    if (!data) return;\r\n    const wb = XLSX.utils.book_new();\r\n\r\n    const detailsWS = XLSX.utils.json_to_sheet([\r\n      { فیلد: \"نام\", مقدار: data.personalInfo.Name },\r\n      { فیلد: \"نام پدر\", مقدار: data.personalInfo.parentType },\r\n      { فیلد: \"دیپارتمنت\", مقدار: data.personalInfo.department },\r\n      { فیلد: \"سال آموزش\", مقدار: data.personalInfo.trainingYear },\r\n      { فیلد: \"سال\", مقدار: data.personalInfo.year },\r\n      { فیلد: \"اوسط نمرات\", مقدار: data.averageScore },\r\n    ]);\r\n    XLSX.utils.book_append_sheet(wb, detailsWS, \"مشخصات\");\r\n\r\n    if (data.scores?.length) {\r\n      const scoresWS = XLSX.utils.json_to_sheet(\r\n        data.scores.map((score, idx) => ({\r\n          \"#\": idx + 1,\r\n          \"امتحان 4 ماه اول تحریری\": score.exam1Written,\r\n          \"امتحان 4 ماه اول عملی\": score.exam1Practical,\r\n          \"امتحان 4 ماه دوم تحریری\": score.exam2Written,\r\n          \"امتحان 4 ماه دوم عملی\": score.exam2Practical,\r\n          \"امتحان نهایی تحریری\": score.finalWritten,\r\n          \"امتحان نهایی عملی\": score.finalPractical,\r\n          مجموع: score.total,\r\n          \"نام استاد\": score.teacherName,\r\n        }))\r\n      );\r\n      XLSX.utils.book_append_sheet(wb, scoresWS, \"نمرات\");\r\n    }\r\n\r\n    const signWS = XLSX.utils.json_to_sheet([\r\n      { مسئول: \"رئیس دیپارتمنت\", نام: data.departmentHead || \"\" },\r\n      { مسئول: \"آمر برنامه تریننگ\", نام: data.programHead || \"\" },\r\n      { مسئول: \"رئیس شفاخانه\", نام: data.hospitalHead || \"\" },\r\n    ]);\r\n    XLSX.utils.book_append_sheet(wb, signWS, \"امضاها\");\r\n\r\n    XLSX.writeFile(wb, `FormG_${data.personalInfo.Name}.xlsx`);\r\n  };\r\n\r\n  const handlePrint = () => {\r\n    if (!printRef.current) return;\r\n    const printContents = printRef.current.innerHTML;\r\n    const printWindow = window.open(\"\", \"_blank\", \"width=1100,height=700\");\r\n    if (printWindow) {\r\n      printWindow.document.write(`\r\n        <html dir=\"rtl\" lang=\"fa\">\r\n        <head>\r\n          <meta charset=\"UTF-8\">\r\n          <title>فرم G - ${data?.personalInfo.Name}</title>\r\n          <style>\r\n            body { font-family: 'Tahoma','Arial',sans-serif; direction: rtl; margin: 20px; line-height: 1.6; color: #000; }\r\n            table { width:100%; border-collapse: collapse; margin-bottom: 15px; }\r\n            th, td { border:1px solid #333; padding:6px; text-align:center; }\r\n            th { background:#f5f5f5; }\r\n            .average-score { font-weight:bold; margin-bottom:20px; text-align:center; }\r\n            @media print { .no-print { display:none !important; } }\r\n          </style>\r\n        </head>\r\n        <body>${printContents}</body>\r\n        </html>\r\n      `);\r\n      printWindow.document.close();\r\n      printWindow.focus();\r\n      printWindow.print();\r\n    }\r\n  };\r\n\r\n  if (loading) return <div className=\"p-4 text-center\">در حال بارگذاری...</div>;\r\n  if (!data)\r\n    return (\r\n      <div className=\"p-4 text-center\">\r\n        <div className=\"text-red-500 mb-4\">فرمی برای این ترینر موجود نیست</div>\r\n        {onClose && <button onClick={onClose} className=\"bg-gray-500 text-white px-4 py-2 rounded\">بستن</button>}\r\n      </div>\r\n    );\r\n\r\n  return (\r\n    <div className=\"p-4\">\r\n      {/* دکمه‌ها */}\r\n      <div className=\"mb-4 flex items-center justify-between\">\r\n        <h2 className=\"text-lg font-semibold\">Form G - فرم ارزیابی امتحانات</h2>\r\n        <div className=\"space-x-2\">\r\n          <button onClick={handlePrint} className=\"bg-green-600 text-white px-3 py-1 rounded\">PDF</button>\r\n          <button onClick={handleExportExcel} className=\"bg-yellow-500 text-white px-3 py-1 rounded\">Excel</button>\r\n          {editing ? (\r\n            <>\r\n              <button onClick={handleSave} disabled={saving} className=\"bg-green-600 text-white px-3 py-1 rounded\">{saving ? \"در حال ذخیره...\" : \"ذخیره\"}</button>\r\n              <button onClick={() => setEditing(false)} className=\"bg-red-600 text-white px-3 py-1 rounded\">لغو</button>\r\n            </>\r\n          ) : (\r\n            <button onClick={() => setEditing(true)} className=\"bg-blue-600 text-white px-3 py-1 rounded\">ویرایش</button>\r\n          )}\r\n          {onClose && <button onClick={onClose} className=\"bg-gray-500 text-white px-3 py-1 rounded\">بستن</button>}\r\n        </div>\r\n      </div>\r\n\r\n      <div ref={printRef} className=\"overflow-auto border rounded-lg max-h-[70vh] p-4 bg-white\">\r\n        {/* مشخصات فردی */}\r\n        <table className=\"min-w-full border border-slate-300 mb-6\">\r\n          <tbody>\r\n            <tr>\r\n              <td className=\"font-semibold px-3 py-2 border\">نام</td>\r\n              <td className=\"px-3 py-2 border\">{editing ? <input className=\"w-full border px-2 py-1 rounded\" value={data.personalInfo.Name} onChange={e => handleChangePersonalInfo(\"Name\", e.target.value)} /> : data.personalInfo.Name}</td>\r\n              <td className=\"font-semibold px-3 py-2 border\">نام پدر</td>\r\n              <td className=\"px-3 py-2 border\">{editing ? <input className=\"w-full border px-2 py-1 rounded\" value={data.personalInfo.parentType} onChange={e => handleChangePersonalInfo(\"parentType\", e.target.value)} /> : data.personalInfo.parentType}</td>\r\n            </tr>\r\n            <tr>\r\n              <td className=\"font-semibold px-3 py-2 border\">دیپارتمنت</td>\r\n              <td className=\"px-3 py-2 border\">{editing ? <input className=\"w-full border px-2 py-1 rounded\" value={data.personalInfo.department} onChange={e => handleChangePersonalInfo(\"department\", e.target.value)} /> : data.personalInfo.department}</td>\r\n              <td className=\"font-semibold px-3 py-2 border\">سال آموزش</td>\r\n              <td className=\"px-3 py-2 border\">{editing ? <input className=\"w-full border px-2 py-1 rounded\" value={data.personalInfo.trainingYear} onChange={e => handleChangePersonalInfo(\"trainingYear\", e.target.value)} /> : data.personalInfo.trainingYear}</td>\r\n            </tr>\r\n            <tr>\r\n              <td className=\"font-semibold px-3 py-2 border\">سال</td>\r\n              <td className=\"px-3 py-2 border\" colSpan={3}>{editing ? <input className=\"w-full border px-2 py-1 rounded\" value={data.personalInfo.year} onChange={e => handleChangePersonalInfo(\"year\", e.target.value)} /> : data.personalInfo.year}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n\r\n        {/* جدول نمرات */}\r\n        {data.scores?.length > 0 && (\r\n          <table className=\"min-w-full border border-slate-300 mb-6\">\r\n            <thead>\r\n              <tr className=\"bg-gray-50\">\r\n                <th className=\"p-2 border\">#</th>\r\n                <th className=\"p-2 border\">4 ماه اول تحریری</th>\r\n                <th className=\"p-2 border\">4 ماه اول عملی</th>\r\n                <th className=\"p-2 border\">4 ماه دوم تحریری</th>\r\n                <th className=\"p-2 border\">4 ماه دوم عملی</th>\r\n                <th className=\"p-2 border\">نهایی تحریری</th>\r\n                <th className=\"p-2 border\">نهایی عملی</th>\r\n                <th className=\"p-2 border\">مجموع</th>\r\n                <th className=\"p-2 border\">نام استاد</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {data.scores.map((score, idx) => (\r\n                <tr key={idx}>\r\n                  <td className=\"p-2 border text-center\">{idx + 1}</td>\r\n                  {editing ? (\r\n                    <>\r\n                      <td className=\"p-2 border\"><input className=\"w-full border px-1 py-0.5 text-center rounded\" type=\"number\" value={score.exam1Written} onChange={e => handleScoreChange(idx,\"exam1Written\", Number(e.target.value))} /></td>\r\n                      <td className=\"p-2 border\"><input className=\"w-full border px-1 py-0.5 text-center rounded\" type=\"number\" value={score.exam1Practical} onChange={e => handleScoreChange(idx,\"exam1Practical\", Number(e.target.value))} /></td>\r\n                      <td className=\"p-2 border\"><input className=\"w-full border px-1 py-0.5 text-center rounded\" type=\"number\" value={score.exam2Written} onChange={e => handleScoreChange(idx,\"exam2Written\", Number(e.target.value))} /></td>\r\n                      <td className=\"p-2 border\"><input className=\"w-full border px-1 py-0.5 text-center rounded\" type=\"number\" value={score.exam2Practical} onChange={e => handleScoreChange(idx,\"exam2Practical\", Number(e.target.value))} /></td>\r\n                      <td className=\"p-2 border\"><input className=\"w-full border px-1 py-0.5 text-center rounded\" type=\"number\" value={score.finalWritten} onChange={e => handleScoreChange(idx,\"finalWritten\", Number(e.target.value))} /></td>\r\n                      <td className=\"p-2 border\"><input className=\"w-full border px-1 py-0.5 text-center rounded\" type=\"number\" value={score.finalPractical} onChange={e => handleScoreChange(idx,\"finalPractical\", Number(e.target.value))} /></td>\r\n                      <td className=\"p-2 border font-bold text-center\">{score.total}</td>\r\n                      <td className=\"p-2 border\"><input className=\"w-full border px-1 py-0.5 rounded\" type=\"text\" value={score.teacherName} onChange={e => handleScoreChange(idx,\"teacherName\", e.target.value)} /></td>\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      <td className=\"p-2 border text-center\">{score.exam1Written}</td>\r\n                      <td className=\"p-2 border text-center\">{score.exam1Practical}</td>\r\n                      <td className=\"p-2 border text-center\">{score.exam2Written}</td>\r\n                      <td className=\"p-2 border text-center\">{score.exam2Practical}</td>\r\n                      <td className=\"p-2 border text-center\">{score.finalWritten}</td>\r\n                      <td className=\"p-2 border text-center\">{score.finalPractical}</td>\r\n                      <td className=\"p-2 border text-center font-bold\">{score.total}</td>\r\n                      <td className=\"p-2 border\">{score.teacherName}</td>\r\n                    </>\r\n                  )}\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        )}\r\n\r\n        <div className=\"average-score mb-4 text-center font-bold\">اوسط نمرات: {data.averageScore}</div>\r\n             {/* امضاها */}\r\n        <table className=\"min-w-full border border-slate-300 mb-6\">\r\n          <tbody>\r\n            <tr>\r\n              <td className=\"font-semibold px-3 py-2 border text-center\">رئیس دیپارتمنت</td>\r\n              <td className=\"font-semibold px-3 py-2 border text-center\">آمر برنامه تریننگ</td>\r\n              <td className=\"font-semibold px-3 py-2 border text-center\">رئیس شفاخانه</td>\r\n            </tr>\r\n            <tr>\r\n              <td className=\"px-3 py-2 border text-center min-h-[40px]\">{data.departmentHead || \"____________\"}</td>\r\n              <td className=\"px-3 py-2 border text-center min-h-[40px]\">{data.programHead || \"____________\"}</td>\r\n              <td className=\"px-3 py-2 border text-center min-h-[40px]\">{data.hospitalHead || \"____________\"}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div> {/* پایان ref برای چاپ */}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\n","size_bytes":15277},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport MongoStore from \"connect-mongo\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const mongoStore = MongoStore.create({\n    mongoUrl: process.env.DATABASE_URL || 'mongodb://localhost:27017/hospital-residents',\n    touchAfter: 24 * 3600, // lazy session update\n  });\n  \n  return session({\n    secret: process.env.SESSION_SECRET || 'demo-secret-key-for-hospital-system',\n    store: mongoStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: false, // Set to false for development\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4276},"client/src/components/reports/TrainerReports.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Input } from \"@/components/ui/input\";\nimport TrainerDetailsModal from \"@/components/residents/ResidentDetailsModal\";\nimport TrainerActionsListModal from \"./TrainerActionsListModal\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\nimport { Search, Eye, MoreHorizontal } from \"lucide-react\";\nimport Sidebar from \"@/components/layout/sidebar\";\n\ntype Trainer = {\n  _id: string;\n  id: string;\n  name: string;\n  lastName: string;\n  department: string;\n  profileImageUrl?: string;\n};\n\nexport default function TrainerReportPage() {\n  const [selectedTrainer, setSelectedTrainer] = useState<string | null>(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isActionsModalOpen, setIsActionsModalOpen] = useState(false);\n  const [selectedActionTrainer, setSelectedActionTrainer] = useState<Trainer | null>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [departmentFilter, setDepartmentFilter] = useState(\"all\");\n\n  const { data: trainers = [], isLoading, error } = useQuery<Trainer[]>({\n    queryKey: [\"/api/trainers\"],\n    queryFn: async () => {\n      const res = await fetch(\"/api/trainers\");\n      if (!res.ok) {\n        throw new Error(\"Failed to fetch trainers\");\n      }\n      const data = await res.json();\n      return Array.isArray(data) ? data : [];\n    },\n  });\n\n  const filteredTrainers = Array.isArray(trainers) ? trainers.filter((trainer) => {\n    const fullName = `${trainer.name} ${trainer.lastName}`.toLowerCase();\n    const matchesSearch =\n      fullName.includes(searchTerm.toLowerCase()) ||\n      trainer.department.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesDepartment =\n      departmentFilter === \"all\" || trainer.department === departmentFilter;\n    return matchesSearch && matchesDepartment;\n  }) : [];\n\n  const departments = Array.isArray(trainers) ? Array.from(new Set(trainers.map((t) => t.department))) : [];\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-slate-50\">\n        <Sidebar />\n        <div className=\"p-6\">\n          <div className=\"animate-pulse space-y-6\">\n            <div className=\"h-8 bg-slate-200 rounded w-64\"></div>\n            <div className=\"h-20 bg-slate-200 rounded\"></div>\n            <div className=\"space-y-4\">\n              {[...Array(3)].map((_, i) => (\n                <div key={i} className=\"h-32 bg-slate-200 rounded\"></div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-slate-50\">\n        <Sidebar />\n        <div className=\"p-6\">\n          <div className=\"bg-red-50 border border-red-200 rounded-lg p-4 text-center\">\n            <p className=\"text-red-600 font-semibold\">خطا در بارگذاری اطلاعات ترینرها</p>\n            <p className=\"text-red-500 text-sm mt-2\">لطفاً بعداً دوباره تلاش کنید</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-50 top-0 \">\n      <Sidebar />\n\n      <div className=\"p-6\">\n        {/* Header + Filters (Sticky) */}\n        <div className=\"sticky top-0 z-20  shadow-md border-b border-slate-200 p-4 mb-6\">\n          <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-4\">\n            <h2 className=\"text-xl font-bold text-slate-800\">گزارش ترینرها</h2>\n\n            <div className=\"flex flex-wrap gap-3 items-center\">\n              {/* Search */}\n              <div className=\"relative\">\n                <Search className=\"h-4 w-4 absolute right-3 top-1/2 transform -translate-y-1/2 text-slate-400\" />\n                <Input\n                  type=\"text\"\n                  placeholder=\"جستجو ترینر...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pr-10 w-64\"\n                />\n              </div>\n\n              {/* Department filter */}\n              <Select\n                value={departmentFilter}\n                onValueChange={setDepartmentFilter}\n              >\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue placeholder=\"همه بخش‌ها\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">همه بخش‌ها</SelectItem>\n                  {departments.map((dept) => (\n                    <SelectItem key={dept} value={dept}>\n                      {dept}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </div>\n\n        {/* Table */}\n        <div className=\"overflow-x-auto border rounded-lg shadow-lg\">\n          <table className=\"min-w-full bg-white text-sm\">\n            <thead className=\"bg-slate-200 text-slate-700 text-[13px]\">\n              <tr>\n                <th className=\"px-3 py-2 border\">تصویر</th>\n                <th className=\"px-3 py-2 border\">نام</th>\n                <th className=\"px-3 py-2 border\">تخلص</th>\n                <th className=\"px-3 py-2 border\">آیدی</th>\n                <th className=\"px-3 py-2 border\">دپارتمان</th>\n                <th className=\"px-3 py-2 border\">جزئیات</th>\n                <th className=\"px-3 py-2 border\">اکشن</th>\n              </tr>\n            </thead>\n            <tbody>\n              {filteredTrainers.map((trainer) => (\n                <tr key={trainer._id} className=\"border-b hover:bg-slate-50\">\n                  <td className=\"px-3 py-2 border text-center\">\n                    <img\n                      src={\n                        trainer.profileImageUrl ??\n                        \"/assets/img/default-avatar.png\"\n                      }\n                      className=\"w-12 h-12 rounded-full mx-auto\"\n                    />\n                  </td>\n                  <td className=\"px-3 py-2 border\">{trainer.name}</td>\n                  <td className=\"px-3 py-2 border\">{trainer.lastName}</td>\n                  <td className=\"px-3 py-2 border\">{trainer.id}</td>\n                  <td className=\"px-3 py-2 border\">{trainer.department}</td>\n\n                  {/* جزئیات */}\n                  <td className=\"px-3 py-2 border text-center\">\n                    <Button\n                      size=\"icon\"\n                      variant=\"outline\"\n                      onClick={() => {\n                        setSelectedTrainer(trainer._id);\n                        setIsModalOpen(true);\n                      }}\n                    >\n                      <Eye className=\"h-4 w-4\" />\n                    </Button>\n                  </td>\n\n                  {/* اکشن */}\n                  <td className=\"px-3 py-2 border text-center\">\n                    <Button \n                      size=\"icon\" \n                      variant=\"outline\"\n                      onClick={() => {\n                        setSelectedActionTrainer(trainer);\n                        setIsActionsModalOpen(true);\n                      }}\n                    >\n                      <MoreHorizontal className=\"h-4 w-4\" />\n                    </Button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n\n        {/* Modal */}\n        {selectedTrainer && (\n          <TrainerDetailsModal\n            trainerId={selectedTrainer}\n            isOpen={isModalOpen}\n            onClose={() => {\n              setIsModalOpen(false);\n              setSelectedTrainer(null);\n            }}\n          />\n        )}\n\n        {/* Actions Modal */}\n        {selectedActionTrainer && (\n          <TrainerActionsListModal\n            trainerId={selectedActionTrainer._id}\n            trainerName={`${selectedActionTrainer.name} ${selectedActionTrainer.lastName}`}\n            isOpen={isActionsModalOpen}\n            onClose={() => {\n              setIsActionsModalOpen(false);\n              setSelectedActionTrainer(null);\n            }}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":8289},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-gray-100 px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5740},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Landing from \"@/pages/landing\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Residents from \"@/pages/residents\";\nimport Teachers from \"@/pages/teachers\";\nimport Reports from \"@/pages/reports\";\nimport NotFound from \"@/pages/not-found\";\nimport  Setting  from \"@/pages/setting\";\nimport  About  from \"@/pages/about\";\nimport VacantPosts from \"@/components/jobs/VacantPosts\";\n//////////////////////////////////////\n import { TrainerProvider } from \"./context/TrainerContext\"; // ✅ context اضافه شد\n\n\n/////////////////////////////////\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Residents} />\n          <Route path=\"/residents\" component={Residents} />\n          \n\n          <Route path=\"/teachers\" component={Teachers} />\n          <Route path=\"/reports\" component={Reports} />\n          <Route path=\"/setting\" component={Setting} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/jobs\" component={VacantPosts} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n     <TrainerProvider>\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n     </TrainerProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1808},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">صفحه پیدا نشد</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":717},"client/src/components/forms/form-H.tsx":{"content":"import React, { useState, useEffect } from \"react\";\r\ninterface EvaluationFormHProps {\r\n  trainerIdProp?: string;\r\n}\r\n\r\ntype TrainingYear = {\r\n  year: string;\r\n  totalScore: string;\r\n  instructor: string;\r\n};\r\n\r\nexport default function EvaluationFormH({\r\n  trainerIdProp,\r\n}: EvaluationFormHProps) {\r\n  const [trainerId, setTrainerId] = useState<string | null>(null);\r\n  // 🔹 معلومات شخصی\r\n  const [Name, setName] = useState(\"\");\r\n  const [parentType, setparentType] = useState(\"\");\r\n  const [department, setDepartment] = useState(\"\");\r\n\r\n  // 🔹 جدول سال‌های ترینینگ\r\n  const [years, setYears] = useState<TrainingYear[]>([\r\n    { year: \"سال اول\", totalScore: \"\", instructor: \"\" },\r\n    { year: \"سال دوم\", totalScore: \"\", instructor: \"\" },\r\n    { year: \"سال سوم\", totalScore: \"\", instructor: \"\" },\r\n    { year: \"سال چهارم\", totalScore: \"\", instructor: \"\" },\r\n  ]);\r\n\r\n  const [averageScore, setAverageScore] = useState(\"\");\r\n  const [shiftDepartment, setShiftDepartment] = useState(\"\");\r\n  const [programDirector, setProgramDirector] = useState(\"\");\r\n  //////////////////////////////////////////\r\n    useEffect(() => {\r\n        if (!trainerIdProp) {\r\n          alert(\"هیچ ترینر فعالی یافت نشد!\");\r\n          return;\r\n        }\r\n    \r\n        setTrainerId(trainerIdProp);\r\n    \r\n        // 👇 دریافت داده از دیتابیس\r\n        const fetchTrainerInfo = async () => {\r\n          try {\r\n            const res = await fetch(\r\n              `http://localhost:5000/api/trainers/${trainerIdProp}`\r\n            );\r\n            const result = await res.json();\r\n    \r\n            if (!res.ok) throw new Error(result.message || \"خطا در دریافت ترینر\");\r\n    \r\n            // فرض می‌کنیم دیتابیس این فیلدها را دارد:\r\n            // name, fatherName, trainingYear\r\n            setName(result.name || \"\");\r\n            setparentType(result.parentType || \"\");\r\n            setDepartment(result.department||\"\");\r\n          } catch (err) {\r\n            console.error(\"خطا در دریافت ترینر:\", err);\r\n            alert(\"خطا در دریافت اطلاعات ترینر ❌\");\r\n          }\r\n        };\r\n    \r\n        fetchTrainerInfo();\r\n      }, [trainerIdProp]);\r\n  /////////////////////////////////////////\r\n\r\n  const inputClass = \"border px-2 py-2 w-full text-center\";\r\n\r\n  // 📊 تغییر نمره یا استاد در جدول\r\n  const handleYearChange = (\r\n    index: number,\r\n    field: keyof TrainingYear,\r\n    value: string\r\n  ) => {\r\n    const updated = [...years];\r\n    updated[index][field] = value;\r\n    setYears(updated);\r\n\r\n    // محاسبه اوسط نمرات\r\n    const validScores = updated\r\n      .map((y) => parseFloat(y.totalScore))\r\n      .filter((s) => !isNaN(s));\r\n    if (validScores.length > 0) {\r\n      const avg =\r\n        validScores.reduce((sum, s) => sum + s, 0) / validScores.length;\r\n      setAverageScore(avg.toFixed(2));\r\n    } else {\r\n      setAverageScore(\"\");\r\n    }\r\n  };\r\n\r\n  // 💾 ذخیره فرم با ولیدیشن کامل\r\n  const handleSubmit = async () => {\r\n    if (!trainerId) {\r\n      alert(\"❌ Trainer ID موجود نیست، فرم ذخیره نمی‌شود!\");\r\n      return;\r\n    }\r\n\r\n    // ✅ بررسی فیلدهای اصلی\r\n    if (!Name.trim() || !parentType.trim() || !department.trim()) {\r\n      alert(\"⚠️ لطفاً تمام فیلدهای معلومات شخصی را پُر کنید.\");\r\n      return;\r\n    }\r\n\r\n    // ✅ بررسی جدول نمرات\r\n    for (let i = 0; i < years.length; i++) {\r\n      const y = years[i];\r\n      if (!y.totalScore.trim() || !y.instructor.trim()) {\r\n        alert(\r\n          `⚠️ لطفاً تمام فیلدهای ردیف ${y.year} را پُر کنید (نمره و نام استاد).`\r\n        );\r\n        return;\r\n      }\r\n      if (isNaN(parseFloat(y.totalScore))) {\r\n        alert(`⚠️ نمره ${y.year} باید عددی باشد.`);\r\n        return;\r\n      }\r\n    }\r\n\r\n    // ✅ بررسی فیلدهای نهایی\r\n    if (\r\n      !averageScore.trim() ||\r\n      !shiftDepartment.trim() ||\r\n      !programDirector.trim()\r\n    ) {\r\n      alert(\r\n        \"⚠️ لطفاً اوسط نمرات، شف دپارتمان و آمر برنامه آموزشی را پُر کنید.\"\r\n      );\r\n      return;\r\n    }\r\n\r\n    // ✅ آماده‌سازی داده برای ارسال\r\n    const payload = {\r\n      trainer: trainerId,\r\n      Name: Name.trim(),\r\n      parentType: parentType.trim(),\r\n      department: department.trim(),\r\n      trainingYears: years.map((y) => ({\r\n        ...y,\r\n        totalScore: y.totalScore.trim(),\r\n        instructor: y.instructor.trim(),\r\n      })),\r\n      averageScore: averageScore.trim(),\r\n      shiftDepartment: shiftDepartment.trim(),\r\n      programDirector: programDirector.trim(),\r\n    };\r\n\r\n    console.log(\"📤 ارسال فرم:\", payload);\r\n\r\n    try {\r\n      const res = await fetch(\"http://localhost:5000/api/evaluationFormH\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(payload),\r\n      });\r\n\r\n      if (!res.ok) throw new Error(\"خطا در ذخیره فرم\");\r\n      alert(\"✅ فرم با موفقیت ذخیره شد!\");\r\n\r\n      // 🧹 پاک‌سازی فرم بعد از ذخیره\r\n      setName(\"\");\r\n      setparentType(\"\");\r\n      setDepartment(\"\");\r\n      setYears([\r\n        { year: \"سال اول\", totalScore: \"\", instructor: \"\" },\r\n        { year: \"سال دوم\", totalScore: \"\", instructor: \"\" },\r\n        { year: \"سال سوم\", totalScore: \"\", instructor: \"\" },\r\n        { year: \"سال چهارم\", totalScore: \"\", instructor: \"\" },\r\n      ]);\r\n      setAverageScore(\"\");\r\n      setShiftDepartment(\"\");\r\n      setProgramDirector(\"\");\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(\"❌ خطا در ذخیره فرم\");\r\n    }\r\n  };\r\n\r\n  // 🧱 UI\r\n  return (\r\n    <div className=\"max-w-6xl mx-auto bg-white shadow-lg rounded-2xl p-6 mt-6\">\r\n      <h2 className=\"text-xl font-bold text-center mb-4\">\r\n        فورم مخصوص درج نمرات سال‌های دوران ترینینگ\r\n      </h2>\r\n\r\n      {!trainerId && (\r\n        <p className=\"text-center text-red-500 mb-4\">\r\n          در حال دریافت شناسه ترینر...\r\n        </p>\r\n      )}\r\n\r\n      {/* 📋 معلومات شخصی */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"نام دستیار\"\r\n          value={Name}\r\n          onChange={(e) => setName(e.target.value)}\r\n          className={inputClass}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"نام پدر\"\r\n          value={parentType}\r\n          onChange={(e) => setparentType(e.target.value)}\r\n          className={inputClass}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"دپارتمان\"\r\n          value={department}\r\n          onChange={(e) => setDepartment(e.target.value)}\r\n          className={inputClass}\r\n        />\r\n      </div>\r\n\r\n      {/* 📊 جدول نمرات سال‌های ترینینگ */}\r\n      <table className=\"table-auto border-collapse border w-full text-center\">\r\n        <thead className=\"bg-gray-100\">\r\n          <tr>\r\n            <th className=\"border px-2 py-2\">سال</th>\r\n            <th className=\"border px-2 py-2\">مجموع نمرات</th>\r\n            <th className=\"border px-2 py-2\">نام استاد</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {years.map((y, idx) => (\r\n            <tr key={idx}>\r\n              <td className=\"border px-2 py-2\">{y.year}</td>\r\n              <td className=\"border px-2 py-2\">\r\n                <input\r\n                  type=\"number\"\r\n                  value={y.totalScore}\r\n                  onChange={(e) =>\r\n                    handleYearChange(idx, \"totalScore\", e.target.value)\r\n                  }\r\n                  className={inputClass}\r\n                />\r\n              </td>\r\n              <td className=\"border px-2 py-2\">\r\n                <input\r\n                  type=\"text\"\r\n                  value={y.instructor}\r\n                  onChange={(e) =>\r\n                    handleYearChange(idx, \"instructor\", e.target.value)\r\n                  }\r\n                  className={inputClass}\r\n                />\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n\r\n      {/* 📈 اوسط و بخش پایانی */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 my-6\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"اوسط نمرات\"\r\n          value={averageScore}\r\n          onChange={(e) => setAverageScore(e.target.value)}\r\n          className={inputClass}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"شف دپارتمان\"\r\n          value={shiftDepartment}\r\n          onChange={(e) => setShiftDepartment(e.target.value)}\r\n          className={inputClass}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"آمر برنامه آموزشی\"\r\n          value={programDirector}\r\n          onChange={(e) => setProgramDirector(e.target.value)}\r\n          className={inputClass}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"text-center\">\r\n        <button\r\n          onClick={handleSubmit}\r\n          disabled={!trainerId}\r\n          className=\"px-6 py-2 bg-green-600 text-white rounded-xl hover:bg-green-700 transition disabled:opacity-50\"\r\n        >\r\n          ذخیره فرم\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","size_bytes":9709},"client/src/components/forms/formI.tsx":{"content":"import React, { useState, useMemo, useEffect } from \"react\";\r\n\r\ninterface ChecklistsProps {\r\n  trainerIdProp?: string;\r\n}\r\n\r\nconst RotationForm: React.FC<ChecklistsProps> = ({ trainerIdProp }) => {\r\n  const [header, setHeader] = useState({\r\n    name: \"\",\r\n    parentType: \"\",\r\n    parentName: \"\",\r\n    department: \"\",\r\n    trainingYear: \"\",\r\n    rotationName: \"\",\r\n    rotationFrom: \"\",\r\n    rotationTo: \"\",\r\n    date: \"\",\r\n  });\r\n\r\n  const handleHeaderChange = (field: string, value: string) => {\r\n    setHeader((prev) => ({ ...prev, [field]: value }));\r\n  };\r\n\r\n  const persianTopics = [\r\n    \"اشتراک در کنفرانس\",\r\n    \"اشتراک در تدریس/سمینار\",\r\n    \"کارهای عملی و تیوری\",\r\n    \"اخلاق طبی\",\r\n    \"حفظ نظم/اشتراک\",\r\n  ];\r\n\r\n  const [persianRows, setPersianRows] = useState(\r\n    persianTopics.map(() => ({\r\n      mark: 0,\r\n      teacherName: \"\",\r\n      teacherSign: \"\",\r\n      note: \"\",\r\n    }))\r\n  );\r\n\r\n  const [persianNote, setPersianNote] = useState(\"\");\r\n  const [trainerId, setTrainerId] = useState<string | null>(null);\r\n\r\n  // English competencies table\r\n  const englishCompetencies = [\r\n    \"Describe basics of radiographic & magnetic resonance imaging techniques and indications\",\r\n    \"describe indications and approaches for radiographic and MR imaging  techniques in ophthalmology\",\r\n    \"detailed interpretation of skull & orbit radiographs\",\r\n    \"Interpretation of chest radiographs\",\r\n    \"interoretion of limbs and spine radiographs\",\r\n    \"Detailed interpretation of brain & orbit CT simple radiographs and with contrast enhancement techniques\",\r\n    \"Interpretation of brain MRI in different techniques (e.g, Gadolinium, fat, suppression technique and FLAIR)\",\r\n    \"Conducting and interpretation of MRA (Magnetic resonance Angiography) for eye diseases\",\r\n  ];\r\n\r\n  const [rows, setRows] = useState(\r\n    englishCompetencies.map(() => ({\r\n      weeks: [\r\n        { cases: \"\", level: \"\" },\r\n        { cases: \"\", level: \"\" },\r\n        { cases: \"\", level: \"\" },\r\n        { cases: \"\", level: \"\" },\r\n      ],\r\n      total: 0,\r\n    }))\r\n  );\r\n\r\n  const handlePersianChange = (row: number, field: string, value: string) => {\r\n    const updated = [...persianRows];\r\n    (updated as any)[row][field] = value;\r\n    setPersianRows(updated);\r\n  };\r\n\r\n  const handleEnglishChange = (\r\n    rowIndex: number,\r\n    weekIndex: number,\r\n    field: \"cases\" | \"level\",\r\n    value: string\r\n  ) => {\r\n    const updated = [...rows];\r\n    updated[rowIndex].weeks[weekIndex][field] = value;\r\n    const total = updated[rowIndex].weeks.reduce((sum, w) => {\r\n      const c = parseInt(w.cases, 10);\r\n      return sum + (isNaN(c) ? 0 : c);\r\n    }, 0);\r\n    updated[rowIndex].total = total;\r\n    setRows(updated);\r\n  };\r\n\r\n  const grandTotal = useMemo(\r\n    () => rows.reduce((s, r) => s + r.total, 0),\r\n    [rows]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!trainerIdProp) alert(\"هیچ ترینر فعالی یافت نشد!\");\r\n  }, [trainerIdProp]);\r\n\r\n  useEffect(() => {\r\n    if (!trainerIdProp) return;\r\n\r\n    const fetchStudentData = async () => {\r\n      try {\r\n        const res = await fetch(\r\n          `http://localhost:5000/api/trainers/${trainerIdProp}`\r\n        );\r\n        if (!res.ok) throw new Error(\"اطلاعات محصل موجود نیست\");\r\n\r\n        const data = await res.json();\r\n\r\n        // ست کردن header از داده API\r\n        if (data) {\r\n          setHeader({\r\n            name: data.name || \"\",\r\n            parentType: data.parentType || \"\",\r\n            parentName: data.parentName || \"\",\r\n            department: data.department || \"\",\r\n            trainingYear: data.trainingYear || \"\",\r\n            rotationName: data.rotationName || \"\",\r\n            rotationFrom: data.rotationFrom || \"\",\r\n            rotationTo: data.rotationTo || \"\",\r\n            date: data.date || \"\",\r\n          });\r\n        }\r\n      } catch (err: any) {\r\n        console.error(err);\r\n        alert(\"❌ خطا در دریافت اطلاعات محصل: \" + err.message);\r\n      }\r\n    };\r\n\r\n    fetchStudentData();\r\n  }, [trainerIdProp]);\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n\r\n    if (!trainerIdProp) {\r\n      alert(\"❌ TrainerId ارسال نشده است. لطفاً بررسی کنید!\");\r\n      return;\r\n    }\r\n\r\n    if (!header.name || !header.trainingYear) {\r\n      alert(\"⚠️ لطفاً تمام معلومات عمومی را تکمیل کنید!\");\r\n      return;\r\n    }\r\n\r\n    const payload = {\r\n      trainerId: trainerIdProp, // ✅ مستقیماً از props استفاده کن\r\n      header,\r\n      persianRows,\r\n      persianNote,\r\n      rows,\r\n    };\r\n\r\n    console.log(\"📦 ارسال به سرور:\", payload);\r\n\r\n    try {\r\n      const res = await fetch(\"http://localhost:5000/api/rotation-form\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(payload),\r\n      });\r\n\r\n      const result = await res.json();\r\n\r\n      if (!res.ok) throw new Error(result.message || \"خطای ناشناخته\");\r\n\r\n      alert(\"✅ فرم با موفقیت ذخیره شد\");\r\n    } catch (err: any) {\r\n      console.error(\"❌ خطا در ذخیره فرم:\", err);\r\n      alert(\"❌ خطا در ذخیره فرم: \" + err.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ fontFamily: \"Calibri, sans-serif\" }}>\r\n      <form\r\n        onSubmit={handleSubmit}\r\n        className=\"max-w-6xl mx-auto p-6 bg-gray-100 rounded-xl shadow-md space-y-10\"\r\n      >\r\n        {/* عنوان */}\r\n        <div className=\"text-center\">\r\n          <h1 className=\"text-3xl font-extrabold mb-1 text-gray-800\">\r\n            فورم مخصوص درج نمرات سیکل شفاخانه چشم نور\r\n          </h1>\r\n        </div>\r\n\r\n        {/* کارت اطلاعات عمومی و جدول فارسی */}\r\n        <div className=\"bg-white p-8 rounded-2xl shadow-xl space-y-8\">\r\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-5\">\r\n            {[\r\n              { field: \"name\", placeholder: \"نام محصل\" },\r\n              { field: \"parentType\", placeholder: \"اسم پدر\" },\r\n              { field: \"parentName\", placeholder: \"اسم پدر کلان\" },\r\n              { field: \"department\", placeholder: \"دیپارتمنت\" },\r\n              { field: \"trainingYear\", placeholder: \"سال ترینینگ\" },\r\n              { field: \"rotationName\", placeholder: \"نام روتیشن\" },\r\n              { field: \"rotationFrom\", placeholder: \"Rotation From\" },\r\n              { field: \"rotationTo\", placeholder: \"Rotation To\" },\r\n              { field: \"date\", placeholder: \"تاریخ\" },\r\n            ].map((item) => (\r\n              <input\r\n                key={item.field}\r\n                className=\"border border-gray-300 p-3 rounded-lg focus:ring-2 focus:ring-blue-400 outline-none\"\r\n                placeholder={item.placeholder}\r\n                value={(header as any)[item.field]}\r\n                onChange={(e) => handleHeaderChange(item.field, e.target.value)}\r\n              />\r\n            ))}\r\n          </div>\r\n\r\n          <div className=\"overflow-x-auto rounded-lg border border-gray-300\">\r\n            <table className=\"w-full text-right border-collapse\">\r\n              <thead>\r\n                <tr className=\"bg-blue-100 font-semibold text-gray-800\">\r\n                  <th className=\"border p-3\">موضوع کنفرانس</th>\r\n                  <th className=\"border p-3\">نمره</th>\r\n                  <th className=\"border p-3\">نام استاد</th>\r\n                  <th className=\"border p-3\">امضا</th>\r\n                  <th className=\"border p-3\">ملاحظات</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {persianRows.map((row, i) => (\r\n                  <tr\r\n                    key={i}\r\n                    className={`${\r\n                      i % 2 === 0 ? \"bg-white\" : \"bg-gray-50\"\r\n                    } hover:bg-blue-50 transition`}\r\n                  >\r\n                    <td className=\"border p-3 font-medium text-gray-800\">\r\n                      {persianTopics[i]}\r\n                    </td>\r\n                    {[\"mark\", \"teacherName\", \"teacherSign\", \"note\"].map((f) => (\r\n                      <td key={f} className=\"border p-2\">\r\n                        <input\r\n                          className=\"w-full border border-gray-300 p-2 rounded-md focus:ring-2 focus:ring-blue-300 outline-none\"\r\n                          value={(row as any)[f]}\r\n                          onChange={(e) =>\r\n                            handlePersianChange(i, f, e.target.value)\r\n                          }\r\n                        />\r\n                      </td>\r\n                    ))}\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n\r\n            {/* یادداشت */}\r\n            <div className=\"mt-4 text-right\">\r\n              <label className=\"block font-medium text-gray-700 mb-1\">\r\n                یادداشت (مثلاً: از ۵٪ نمره داده شده است)\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* جدول انگلیسی */}\r\n        <div className=\"bg-white p-6 rounded-xl shadow-md\">\r\n          <h2 className=\"text-lg font-semibold mb-4\">Rotation Competencies</h2>\r\n          <div className=\"overflow-x-auto\">\r\n            <table className=\"w-full border text-center border-collapse\">\r\n              <thead>\r\n                <tr className=\"bg-gray-100\">\r\n                  <th rowSpan={2} className=\"border p-2\">\r\n                    Competence\r\n                  </th>\r\n                  {[\"1st\", \"2nd\", \"3rd\", \"4th\"].map((w) => (\r\n                    <th key={w} colSpan={2} className=\"border p-2\">\r\n                      {w} Week\r\n                    </th>\r\n                  ))}\r\n                  <th rowSpan={2} className=\"border p-2\">\r\n                    Total of Cases\r\n                  </th>\r\n                </tr>\r\n                <tr className=\"bg-gray-100\">\r\n                  {Array.from({ length: 4 }).map((_, i) => (\r\n                    <React.Fragment key={i}>\r\n                      <th className=\"border p-1\">Cases</th>\r\n                      <th className=\"border p-1\">Level</th>\r\n                    </React.Fragment>\r\n                  ))}\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {rows.map((row, ri) => (\r\n                  <tr key={ri}>\r\n                    <td className=\"border p-2 text-left\">\r\n                      {englishCompetencies[ri]}\r\n                    </td>\r\n                    {row.weeks.map((w, wi) => (\r\n                      <React.Fragment key={wi}>\r\n                        <td className=\"border p-1\">\r\n                          <input\r\n                            type=\"number\"\r\n                            min={0}\r\n                            className=\"w-full border p-1 text-center rounded\"\r\n                            value={w.cases}\r\n                            onChange={(e) =>\r\n                              handleEnglishChange(\r\n                                ri,\r\n                                wi,\r\n                                \"cases\",\r\n                                e.target.value\r\n                              )\r\n                            }\r\n                          />\r\n                        </td>\r\n                        <td className=\"border p-1\">\r\n                          <input\r\n                            type=\"text\"\r\n                            className=\"w-full border p-1 text-center rounded\"\r\n                            placeholder=\"مثلاً: 1-2,2,3\"\r\n                            value={w.level}\r\n                            onChange={(e) =>\r\n                              handleEnglishChange(\r\n                                ri,\r\n                                wi,\r\n                                \"level\",\r\n                                e.target.value\r\n                              )\r\n                            }\r\n                          />\r\n                        </td>\r\n                      </React.Fragment>\r\n                    ))}\r\n                    <td className=\"border p-1 bg-gray-50 font-bold\">\r\n                      {row.total}\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n              <tfoot>\r\n                <tr className=\"bg-gray-100 font-bold\">\r\n                  <td className=\"border p-2 text-right\" colSpan={9}>\r\n                    Grand Total of Cases\r\n                  </td>\r\n                  <td className=\"border p-2\">{grandTotal}</td>\r\n                </tr>\r\n              </tfoot>\r\n            </table>\r\n          </div>\r\n        </div>\r\n\r\n        <button\r\n          type=\"submit\"\r\n          className=\"w-full bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 transition\"\r\n        >\r\n          ذخیره فرم\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RotationForm;\r\n","size_bytes":13080},"client/src/components/teachers/ViewTeacherModal.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\r\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Teacher } from \"@shared/schema\";\r\nimport { Button } from \"@/components/ui/button\";\r\n\r\ninterface ViewTeacherModalProps {\r\n  teacher: Teacher | null;\r\n  open: boolean;\r\n  onClose: () => void;\r\n}\r\n\r\nexport default function ViewTeacherModal({ teacher, open, onClose }: ViewTeacherModalProps) {\r\n  if (!teacher) return null;\r\n\r\n  const formatDate = (date: string | Date | undefined) => {\r\n    if (!date) return \"نامشخص\";\r\n    try {\r\n      return new Date(date).toLocaleDateString(\"fa-AF\");\r\n    } catch {\r\n      return \"نامشخص\";\r\n    }\r\n  };\r\n\r\n  const handlePrint = () => {\r\n    window.print();\r\n  };\r\n\r\n  return (\r\n    <Dialog open={open} onOpenChange={onClose}>\r\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto rounded-2xl border border-slate-300 shadow-xl bg-white dark:bg-slate-900\">\r\n        <DialogHeader>\r\n          <DialogTitle className=\"flex items-center gap-4\">\r\n            <Avatar className=\"h-16 w-16 ring-2 ring-indigo-500\">\r\n              <AvatarImage src={teacher.profileImageUrl || \"\"} alt={teacher.name} />\r\n              <AvatarFallback>{teacher.name.charAt(0)}</AvatarFallback>\r\n            </Avatar>\r\n            <div>\r\n              <h2 className=\"text-2xl font-bold text-slate-900 dark:text-white\">\r\n                {teacher.name} {teacher.lostname}\r\n              </h2>\r\n            </div>\r\n          </DialogTitle>\r\n        </DialogHeader>\r\n\r\n        {/* جزئیات استاد */}\r\n        <div className=\"grid grid-cols-2 gap-6 text-sm mt-6\">\r\n          <InfoItem label=\"نام\" value={teacher.name} />\r\n          <InfoItem label=\"تخلص\" value={teacher.lostname} />\r\n          <InfoItem label=\"نام پدر\" value={teacher.fatherName} />\r\n          <InfoItem label=\"نام پدر کلان\" value={teacher.grandfatherName} />\r\n          <InfoItem label=\"رتبه علمی\" value={teacher.academicRank} />\r\n          <InfoItem label=\"تاریخ اخذ رتبه\" value={formatDate(teacher.rankAchievementDate)} />\r\n          <InfoItem label=\"تاریخ تقرری مربی\" value={formatDate(teacher.trainerAppointmentDate)} />\r\n          <InfoItem label=\"جنسیت\" value={teacher.gender} />\r\n          <InfoItem label=\"ولایت\" value={teacher.province} />\r\n          <InfoItem label=\"مضمون\" value={teacher.subject} />\r\n          <InfoItem label=\"وظیفه / موقف\" value={teacher.position} />\r\n          <InfoItem label=\"شفاخانه\" value={teacher.hospital} />\r\n          <InfoItem label=\"تاریخ تولد\" value={formatDate(teacher.dateOfBirth)} />\r\n          <InfoItem label=\"نمبر تذکره\" value={teacher.idNumber} />\r\n          <InfoItem label=\"تاریخ شروع وظیفه\" value={formatDate(teacher.dutyStartDate)} />\r\n          <InfoItem label=\"شماره تماس\" value={teacher.contactInfo} />\r\n          <InfoItem label=\"نمبر واتساپ\" value={teacher.whatsappNumber} />\r\n          <InfoItem label=\"ایمیل آدرس\" value={teacher.emailAddress} />\r\n          <InfoItem label=\"کود پوست\" value={teacher.postCode} />\r\n          <InfoItem label=\"نوع تقرری\" value={teacher.appointmentType} />\r\n          {/* <InfoItem label=\"دیپارتمنت\" value={teacher.department} /> */}\r\n          {/* <InfoItem label=\"تجربه کاری\" value={`${teacher.experience} سال`} /> */}\r\n          <InfoItem\r\n            label=\"وضعیت\"\r\n            value={\r\n              <Badge\r\n                className={\r\n                  teacher.status === \"active\"\r\n                    ? \"bg-green-100 text-green-800 px-3 py-1 rounded-full\"\r\n                    : \"bg-red-100 text-red-800 px-3 py-1 rounded-full\"\r\n                }\r\n              >\r\n                {teacher.status === \"active\" ? \"برحال\" : \"منفک\"}\r\n              </Badge>\r\n            }\r\n          />\r\n        </div>\r\n\r\n        {/* دکمه‌ها */}\r\n        <div className=\"mt-8 flex justify-end gap-4\">\r\n          <Button\r\n            onClick={handlePrint}\r\n            className=\"bg-indigo-600 hover:bg-indigo-700 text-white font-semibold px-6 py-2 rounded-xl shadow-md transition-all\"\r\n          >\r\n            پرینت / PDF\r\n          </Button>\r\n          <Button\r\n            onClick={onClose}\r\n            variant=\"outline\"\r\n            className=\"bg-red-600 hover:bg-red-700 text-white font-semibold px-6 py-2 rounded-xl shadow-md transition-all\"\r\n          >\r\n            بستن\r\n          </Button>\r\n        </div>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nfunction InfoItem({ label, value }: { label: string; value: React.ReactNode }) {\r\n  return (\r\n    <div className=\"bg-slate-50 dark:bg-slate-800 p-4 rounded-xl shadow-sm\">\r\n      <p className=\"text-gray-500 text-xs mb-1\">{label}</p>\r\n      <p className=\"font-medium text-slate-900 dark:text-slate-100\">{value || \"نامشخص\"}</p>\r\n    </div>\r\n  );\r\n}\r\n","size_bytes":5048},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\nimport { getQueryFn } from \"@/lib/queryClient\";\n\nexport function useAuth() {\n  const { data: user, isLoading, error } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user && !error,\n  };\n}\n","size_bytes":422},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/reports/TeacherReportTable.tsx":{"content":"import React, { useState } from \"react\";\nimport * as XLSX from \"xlsx\";\nimport { saveAs } from \"file-saver\";\nimport { Button } from \"@/components/ui/button\";\nimport { BookOpen } from \"lucide-react\";\nimport TrainerLecturesModal from \"./TrainerLecturesModal\";\n\ninterface Teacher {\n  _id?: string;\n  name: string;\n  lostname: string;\n  fatherName: string;\n  grandfatherName: string;\n  academicRank: string;\n  rankAchievementDate: string;\n  trainerAppointmentDate: string;\n  gender: string;\n  province: string;\n  subject: string;\n  position: string;\n  hospital: string;\n  dateOfBirth: string;\n  idNumber: string;\n  dutyStartDate: string;\n  contactInfo: string;\n  whatsappNumber: string;\n  emailAddress: string;\n  postCode: string;\n  appointmentType: string;\n  department: string;\n  experience: number;\n  status: string;\n}\n\ninterface Props {\n  teachers: Teacher[];\n}\n\nexport default function TeacherReportTable({ teachers }: Props) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedPosition, setSelectedPosition] = useState(\"\");\n  const [selectedDepartment, setSelectedDepartment] = useState(\"\");\n  const [selectedLecturesTeacher, setSelectedLecturesTeacher] = useState<{id: string, name: string} | null>(null);\n  const [isLecturesModalOpen, setIsLecturesModalOpen] = useState(false);\n\n  const filteredTeachers = teachers.filter((t) => {\n    return (\n      (t.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        t.department.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        t.subject.toLowerCase().includes(searchTerm.toLowerCase())) &&\n      (selectedPosition ? t.position === selectedPosition : true) &&\n      (selectedDepartment ? t.department === selectedDepartment : true)\n    );\n  });\n\n  const handlePrint = () => {\n    const printContent = document.getElementById(\"teachers-report-table\");\n    if (printContent) {\n      const newWin = window.open(\"\", \"_blank\");\n      newWin?.document.write(\n        `<html><head><title>گزارشات استادان</title>\n        <style>\n          table{border-collapse:collapse;width:100%;font-size:12px;}\n          th,td{border:1px solid #ddd;padding:6px;text-align:left;}\n          th{background:#f3f4f6;}\n        </style>\n        </head><body>${printContent.innerHTML}</body></html>`\n      );\n      newWin?.document.close();\n      newWin?.print();\n    }\n  };\n\n  const handleExportExcel = () => {\n    const ws = XLSX.utils.json_to_sheet(filteredTeachers);\n    const wb = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, ws, \"گزارشات استادان\");\n    const wbout = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\n    saveAs(\n      new Blob([wbout], { type: \"application/octet-stream\" }),\n      \"TeachersReport.xlsx\"\n    );\n  };\n\n  return (\n    <div className=\"p-6\">\n      {/* Header / Toolbar */}\n      <div className=\"flex flex-col md:flex-row md:items-center md:justify-between mb-6 gap-4\">\n        <h2 className=\"text-xl font-bold text-slate-800\">گزارشات استادان</h2>\n\n        <div className=\"flex flex-wrap gap-3 items-center\">\n          {/* Search */}\n          <input\n            type=\"text\"\n            placeholder=\" جستجو...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"border px-3 py-2 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          />\n\n          {/* Position filter */}\n          <select\n            value={selectedPosition}\n            onChange={(e) => setSelectedPosition(e.target.value)}\n            className=\"border px-3 py-2 rounded-lg text-sm bg-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          >\n            <option value=\"\">سمت</option>\n            {[...new Set(teachers.map((t) => t.position))].map((p) => (\n              <option key={p} value={p}>\n                {p}\n              </option>\n            ))}\n          </select>\n\n          {/* Department filter */}\n          <select\n            value={selectedDepartment}\n            onChange={(e) => setSelectedDepartment(e.target.value)}\n            className=\"border px-3 py-2 rounded-lg text-sm bg-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          >\n            <option value=\"\">دپارتمنت</option>\n            {[...new Set(teachers.map((t) => t.department))].map((d) => (\n              <option key={d} value={d}>\n                {d}\n              </option>\n            ))}\n          </select>\n\n          {/* Buttons */}\n          <button\n            onClick={handlePrint}\n            className=\"bg-blue-600 text-white text-sm px-4 py-2 rounded-lg shadow hover:bg-blue-700 transition\"\n          >\n            چاپ PDF\n          </button>\n          <button\n            onClick={handleExportExcel}\n            className=\"bg-green-600 text-white text-sm px-4 py-2 rounded-lg shadow hover:bg-green-700 transition\"\n          >\n            چاپ Excel\n          </button>\n        </div>\n      </div>\n\n      {/* Table */}\n      <div\n        id=\"teachers-report-table\"\n        className=\"overflow-x-auto border rounded-lg shadow-lg\"\n      >\n        <table className=\"min-w-full bg-white text-sm\">\n          <thead className=\"bg-slate-200 text-slate-700 text-[13px]\">\n            <tr>\n              <th className=\"px-3 py-2 border\">نام</th>\n              <th className=\"px-3 py-2 border\">نام خانوادگی</th>\n              <th className=\"px-3 py-2 border\">نام پدر</th>\n              <th className=\"px-3 py-2 border\">نام پدربزرگ</th>\n              <th className=\"px-3 py-2 border\">رتبه علمی</th>\n              <th className=\"px-3 py-2 border\">تاریخ دریافت رتبه</th>\n              <th className=\"px-3 py-2 border\">تاریخ انتصاب مربی</th>\n              <th className=\"px-3 py-2 border\">سمت</th>\n              <th className=\"px-3 py-2 border\">دپارتمنت</th>\n              <th className=\"px-3 py-2 border\">موضوع</th>\n              <th className=\"px-3 py-2 border\">شفاخانه</th>\n              <th className=\"px-3 py-2 border\">تاریخ تولد</th>\n              <th className=\"px-3 py-2 border\">شماره تذکره</th>\n              <th className=\"px-3 py-2 border\">تاریخ شروع وظیفه</th>\n              <th className=\"px-3 py-2 border\">شماره تماس</th>\n              <th className=\"px-3 py-2 border\">واتساپ</th>\n              <th className=\"px-3 py-2 border\">ایمیل</th>\n              <th className=\"px-3 py-2 border\">کد پستی</th>\n              <th className=\"px-3 py-2 border\">نوع انتصاب</th>\n              {/* <th className=\"px-3 py-2\">سابقه</th> */}\n              <th className=\"px-3 py-2 border\">وضعیت</th>\n              <th className=\"px-3 py-2 border\">لکچرها</th>\n            </tr>\n          </thead>\n          <tbody>\n            {filteredTeachers.map((t) => (\n              <tr key={t.idNumber} className=\"border-b hover:bg-slate-50\">\n                <td className=\"px-3 py-2\">{t.name}</td>\n                <td className=\"px-3 py-2 border\">{t.lostname}</td>\n                <td className=\"px-3 py-2 border\">{t.fatherName}</td>\n                <td className=\"px-3 py-2 border\">{t.grandfatherName}</td>\n                <td className=\"px-3 py-2 border\">{t.academicRank}</td>\n                <td className=\"px-3 py-2 border\">\n  {new Date(t.rankAchievementDate).toLocaleDateString(\"fa-IR\")}\n</td>\n\n                <td className=\"px-3 py-2 border\">\n  {new Date(t.trainerAppointmentDate).toLocaleDateString(\"fa-IR\")}\n</td>\n                <td className=\"px-3 py-2 border\">{t.position}</td>\n                <td className=\"px-3 py-2 border\">{t.department}</td>\n                <td className=\"px-3 py-2 border\">{t.subject}</td>\n                <td className=\"px-3 py-2 border\">{t.hospital}</td>\n                <td className=\"px-3 py-2 border\">\n  {new Date(t.dateOfBirth).toLocaleDateString(\"fa-IR\")}\n</td>\n                <td className=\"px-3 py-2 border\">{t.idNumber}</td>\n                <td className=\"px-3 py-2 border\">\n  {new Date(t.dutyStartDate).toLocaleDateString(\"fa-IR\")}\n</td>\n                <td className=\"px-3 py-2 border\">{t.contactInfo}</td>\n                <td className=\"px-3 py-2 border\">{t.whatsappNumber}</td>\n                <td className=\"px-3 py-2 border\">{t.emailAddress}</td>\n                <td className=\"px-3 py-2 border\">{t.postCode}</td>\n                <td className=\"px-3 py-2 border\">{t.appointmentType}</td>\n                {/* <td className=\"px-3 py-2\">{t.experience}</td> */}\n                <td className=\"px-3 py-2 border\">\n                  <span\n                    className={\n                      t.status === \"active\"\n                        ? \"text-green-600 font-semibold\"\n                        : \"text-red-600 font-semibold\"\n                    }\n                  >\n                    {t.status}\n                  </span>\n                </td>\n                <td className=\"px-3 py-2 border text-center\">\n                  {t._id && (\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => {\n                        setSelectedLecturesTeacher({\n                          id: t._id!,\n                          name: `${t.name} ${t.lostname}`\n                        });\n                        setIsLecturesModalOpen(true);\n                      }}\n                    >\n                      <BookOpen className=\"h-4 w-4 ml-1\" />\n                      لکچرها\n                    </Button>\n                  )}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      {/* Lectures Modal */}\n      {selectedLecturesTeacher && (\n        <TrainerLecturesModal\n          trainerId={selectedLecturesTeacher.id}\n          trainerName={selectedLecturesTeacher.name}\n          isOpen={isLecturesModalOpen}\n          onClose={() => {\n            setIsLecturesModalOpen(false);\n            setSelectedLecturesTeacher(null);\n          }}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":10060},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/residents/form-details/formH-detail.tsx":{"content":"// components/forms/FormHDetails.tsx\r\nimport React, { useEffect, useState, useRef } from \"react\";\r\nimport * as XLSX from \"xlsx\";\r\n\r\ninterface FormHDetailsProps {\r\n  trainerId: string;\r\n  onClose?: () => void;\r\n}\r\n\r\ninterface TrainingYear {\r\n  year: string;\r\n  totalScore: number | string;\r\n  instructor: string;\r\n}\r\n\r\ninterface FormH {\r\n  _id: string;\r\n  trainerId: string;\r\n  trainer: string;\r\n  Name: string;\r\n  parentType: string;\r\n  department: string;\r\n  shiftDepartment: string;\r\n  programDirector: string;\r\n  trainingYears: TrainingYear[];\r\n  averageScore: number;\r\n  departmentHead?: string;\r\n  programHead?: string;\r\n  hospitalHead?: string;\r\n}\r\n\r\nexport default function FormHDetails({ trainerId, onClose }: FormHDetailsProps) {\r\n  const [data, setData] = useState<FormH | null>(null);\r\n  const [editing, setEditing] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [saving, setSaving] = useState(false);\r\n  const printRef = useRef<HTMLDivElement>(null);\r\n\r\n  const allYears = [\"سال اول\", \"سال دوم\", \"سال سوم\", \"سال چهارم\"];\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const res = await fetch(`/api/evaluationFormH?trainerId=${trainerId}`);\r\n        if (!res.ok) throw new Error(\"خطا در دریافت فرم H\");\r\n        const result = await res.json();\r\n        const formData = Array.isArray(result) ? result[0] : result;\r\n        setData({ ...formData, trainingYears: formData.trainingYears || [] });\r\n      } catch (err) {\r\n        console.error(err);\r\n        setData(null);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    if (trainerId) fetchData();\r\n  }, [trainerId]);\r\n\r\n  const handleFieldChange = (field: keyof FormH, value: string) => {\r\n    if (!data) return;\r\n    setData({ ...data, [field]: value });\r\n  };\r\n\r\n  const handleYearChange = (idx: number, field: keyof TrainingYear, value: string | number) => {\r\n    if (!data) return;\r\n    const newYears = [...data.trainingYears];\r\n    newYears[idx] = { ...newYears[idx], [field]: value };\r\n    setData({ ...data, trainingYears: newYears });\r\n  };\r\n\r\n  const calculateAverage = () => {\r\n    if (!data || data.trainingYears.length === 0) return 0;\r\n    const validScores = data.trainingYears.map(y => typeof y.totalScore === \"number\" ? y.totalScore : 0);\r\n    if (validScores.length === 0) return 0;\r\n    const sum = validScores.reduce((acc, score) => acc + score, 0);\r\n    return Math.round((sum / validScores.length) * 100) / 100;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (data && editing) {\r\n      setData({ ...data, averageScore: calculateAverage() });\r\n    }\r\n  }, [data?.trainingYears, editing]);\r\n\r\n  const handleSave = async () => {\r\n    if (!data) return;\r\n    try {\r\n      setSaving(true);\r\n      const res = await fetch(`/api/evaluationFormH/${data._id}`, {\r\n        method: \"PUT\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(data),\r\n      });\r\n      if (!res.ok) throw new Error(\"خطا در ذخیره\");\r\n      const result = await res.json();\r\n      setData(result.updated);\r\n      setEditing(false);\r\n      alert(\"✅ تغییرات ذخیره شد\");\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(\"❌ خطا در ذخیره\");\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  const handleExportExcel = () => {\r\n    if (!data) return;\r\n    const wb = XLSX.utils.book_new();\r\n    const detailsWS = XLSX.utils.json_to_sheet([\r\n      { فیلد: \"نام\", مقدار: data.Name },\r\n      { فیلد: \"نام پدر\", مقدار: data.parentType },\r\n      { فیلد: \"دیپارتمنت\", مقدار: data.department },\r\n      { فیلد: \"شف دپارتمان\", مقدار: data.shiftDepartment },\r\n      { فیلد: \"آمر برنامه آموزشی\", مقدار: data.programDirector },\r\n      { فیلد: \"اوسط نمرات\", مقدار: data.averageScore },\r\n    ]);\r\n    XLSX.utils.book_append_sheet(wb, detailsWS, \"مشخصات\");\r\n\r\n    const yearsWS = XLSX.utils.json_to_sheet(data.trainingYears.map((y, idx) => ({\r\n      \"#\": idx + 1,\r\n      \"سال آموزشی\": y.year,\r\n      \"مجموع نمرات\": y.totalScore,\r\n      \"نام استاد\": y.instructor\r\n    })));\r\n    XLSX.utils.book_append_sheet(wb, yearsWS, \"سال‌های آموزشی\");\r\n\r\n    const signWS = XLSX.utils.json_to_sheet([\r\n      { مسئول: \"رئیس دیپارتمنت\", نام: data.departmentHead || \"\" },\r\n      { مسئول: \"آمر برنامه تریننگ\", نام: data.programHead || \"\" },\r\n      { مسئول: \"رئیس شفاخانه\", نام: data.hospitalHead || \"\" }\r\n    ]);\r\n    XLSX.utils.book_append_sheet(wb, signWS, \"امضاها\");\r\n\r\n    XLSX.writeFile(wb, `FormH_${data.Name}.xlsx`);\r\n  };\r\n\r\n  const handlePrint = () => {\r\n    if (!printRef.current) return;\r\n    const printContents = printRef.current.innerHTML;\r\n    const printWindow = window.open(\"\", \"_blank\", \"width=1000,height=800\");\r\n    if (printWindow) {\r\n      printWindow.document.write(`\r\n        <html dir=\"rtl\" lang=\"fa\">\r\n        <head>\r\n          <meta charset=\"UTF-8\">\r\n          <title>فرم H - ${data?.Name}</title>\r\n          <style>\r\n            body { font-family: Tahoma, Arial; direction: rtl; margin: 20px; line-height:1.6; color:#000;}\r\n            table { width:100%; border-collapse: collapse; margin-bottom:20px; }\r\n            th, td { border:1px solid #333; padding:8px; text-align:center; }\r\n            th { background:#f5f5f5; font-weight:bold; }\r\n            .average-score { font-weight:bold; text-align:center; margin-bottom:20px; }\r\n          </style>\r\n        </head>\r\n        <body>\r\n          ${printContents}\r\n          <script>\r\n            window.onload = function() { window.print(); setTimeout(()=>window.close(),100); };\r\n          </script>\r\n        </body>\r\n        </html>\r\n      `);\r\n      printWindow.document.close();\r\n    }\r\n  };\r\n\r\n  if (loading) return <div className=\"p-4 text-center\">در حال بارگذاری...</div>;\r\n  if (!data) return <div className=\"p-4 text-center text-red-500\">فرمی موجود نیست</div>;\r\n\r\n  return (\r\n    <div className=\"p-4\">\r\n      <div className=\"mb-4 flex items-center justify-between\">\r\n        <h2 className=\"text-lg font-semibold\">Form H - فرم ارزیابی سالانه</h2>\r\n        <div className=\"space-x-2\">\r\n          {editing ? (\r\n            <>\r\n              <button onClick={handleSave} disabled={saving} className=\"bg-green-600 text-white px-3 py-1 rounded disabled:bg-gray-400\">\r\n                {saving ? \"در حال ذخیره...\" : \"ذخیره\"}\r\n              </button>\r\n              <button onClick={() => setEditing(false)} className=\"bg-red-600 text-white px-3 py-1 rounded\">لغو</button>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <button onClick={() => setEditing(true)} className=\"bg-blue-600 text-white px-3 py-1 rounded\">ویرایش</button>\r\n              <button onClick={handleExportExcel} className=\"bg-yellow-500 text-white px-3 py-1 rounded\">Excel</button>\r\n              <button onClick={handlePrint} className=\"bg-green-600 text-white px-3 py-1 rounded\">چاپ</button>\r\n            </>\r\n          )}\r\n          {onClose && <button onClick={onClose} className=\"bg-gray-500 text-white px-3 py-1 rounded\">بستن</button>}\r\n        </div>\r\n      </div>\r\n\r\n      <div ref={printRef} className=\"overflow-auto border rounded-lg max-h-[60vh] p-4 bg-white\">\r\n        {/* مشخصات فردی */}\r\n        <table className=\"min-w-full border border-slate-300 mb-6\">\r\n          <tbody>\r\n            <tr>\r\n              <td className=\"font-semibold px-3 py-2 border\">نام</td>\r\n              <td className=\"px-3 py-2 border\">{editing ? <input value={data.Name} onChange={e => handleFieldChange(\"Name\", e.target.value)} className=\"w-full border px-2 py-1 rounded\"/> : data.Name}</td>\r\n              <td className=\"font-semibold px-3 py-2 border\">نام پدر</td>\r\n              <td className=\"px-3 py-2 border\">{editing ? <input value={data.parentType} onChange={e => handleFieldChange(\"parentType\", e.target.value)} className=\"w-full border px-2 py-1 rounded\"/> : data.parentType}</td>\r\n            </tr>\r\n            <tr>\r\n              <td className=\"font-semibold px-3 py-2 border\">دیپارتمنت</td>\r\n              <td className=\"px-3 py-2 border\">{editing ? <input value={data.department} onChange={e => handleFieldChange(\"department\", e.target.value)} className=\"w-full border px-2 py-1 rounded\"/> : data.department}</td>\r\n              <td className=\"font-semibold px-3 py-2 border\">شف دپارتمان</td>\r\n              <td className=\"px-3 py-2 border\">{data.shiftDepartment}</td>\r\n            </tr>\r\n            <tr>\r\n              <td className=\"font-semibold px-3 py-2 border\">آمر برنامه آموزشی</td>\r\n              <td className=\"px-3 py-2 border\" colSpan={3}>{editing ? <input value={data.programDirector} onChange={e => handleFieldChange(\"programDirector\", e.target.value)} className=\"w-full border px-2 py-1 rounded\"/> : data.programDirector}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n\r\n        {/* جدول سال‌های آموزشی */}\r\n        <table className=\"min-w-full border border-slate-300 mb-6\">\r\n          <thead>\r\n            <tr className=\"bg-gray-50\">\r\n              <th className=\"p-2 border\">سال آموزشی</th>\r\n              <th className=\"p-2 border\">مجموع نمرات</th>\r\n              <th className=\"p-2 border\">نام استاد</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {data.trainingYears.map((year, idx) => (\r\n              <tr key={idx}>\r\n                <td className=\"p-2 border\">{year.year}</td>\r\n                <td className=\"p-2 border text-center\">{editing ? <input type=\"number\" value={year.totalScore} onChange={e => handleYearChange(idx, \"totalScore\", Number(e.target.value))} className=\"w-full border px-1 py-0.5 rounded text-center\"/> : year.totalScore}</td>\r\n                <td className=\"p-2 border\">{editing ? <input value={year.instructor} onChange={e => handleYearChange(idx, \"instructor\", e.target.value)} className=\"w-full border px-1 py-0.5 rounded\"/> : year.instructor}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n\r\n        <div className=\"average-score mb-4 text-center font-bold\">اوسط نمرات: {data.averageScore}</div>\r\n\r\n        {/* امضاها */}\r\n        <table className=\"min-w-full border border-slate-300 signature-table\">\r\n          <tbody>\r\n            <tr>\r\n              <td className=\"font-semibold px-3 py-2 border text-center\">رئیس دیپارتمنت</td>\r\n              <td className=\"font-semibold px-3 py-2 border text-center\">آمر برنامه تریننگ</td>\r\n              <td className=\"font-semibold px-3 py-2 border text-center\">رئیس شفاخانه</td>\r\n            </tr>\r\n            <tr>\r\n              <td className=\"px-3 py-2 border text-center min-h-[50px]\">{data.departmentHead || \"____________\"}</td>\r\n              <td className=\"px-3 py-2 border text-center min-h-[50px]\">{data.programHead || \"____________\"}</td>\r\n              <td className=\"px-3 py-2 border text-center min-h-[50px]\">{data.hospitalHead || \"____________\"}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","size_bytes":11403},"client/src/components/reports/TrainerFormsReport.tsx":{"content":"import React, { useEffect, useState } from \"react\";\nimport TrainerDetails from \"./TrainerDetails\"; // مسیر دقیق فایل را وارد کنید\nimport { Button } from \"@/components/ui/button\";\n\ninterface Trainer {\n  id: number;\n  name: string;\n  lastName: string;\n  parentType: string;\n  parentName: string;\n  gender: string;\n  province: string;\n  department: string;\n  specialty: string;\n  hospital: string;\n  joiningDate: string;\n  trainingYear: string;\n  supervisorName: string;\n  birthDate: string;\n  idNumber: string;\n  phoneNumber: string;\n  whatsappNumber: string;\n  email: string;\n  postNumberAndCode: string;\n  appointmentType: string;\n  status: string;\n}\n\nexport default function FormsReport() {\n  const [trainers, setTrainers] = useState<Trainer[]>([]);\n  const [selectedTrainerId, setSelectedTrainerId] = useState<string | null>(null);\n\n  useEffect(() => {\n    fetch(\"/api/trainers\")\n      .then((res) => res.json())\n      .then((data) => setTrainers(data))\n      .catch((err) => console.error(err));\n  }, []);\n\n  return (\n    <div className=\"overflow-x-auto bg-white rounded-xl shadow p-4\">\n      <h2 className=\"text-lg font-semibold mb-4\">گزارش ترینرها</h2>\n      <table className=\"min-w-full border border-gray-200 text-sm\">\n        <thead className=\"bg-gray-100\">\n          <tr>\n            <th className=\"border px-2 py-1\">ID</th>\n            <th className=\"border px-2 py-1\">نام</th>\n            <th className=\"border px-2 py-1\">تخلص</th>\n            <th className=\"border px-2 py-1\">جزییات</th>\n          </tr>\n        </thead>\n        <tbody>\n          {trainers.map((t) => (\n            <tr key={t.id} className=\"hover:bg-gray-50\">\n              <td className=\"border px-2 py-1\">{t.id}</td>\n              <td className=\"border px-2 py-1\">{t.name}</td>\n              <td className=\"border px-2 py-1\">{t.lastName}</td>\n              <td className=\"border px-2 py-1\">\n                <Button\n                  size=\"sm\"\n                  onClick={() => setSelectedTrainerId(String(t.id))}\n                >\n                  مشاهده جزییات\n                </Button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      {/* مودال TrainerDetails */}\n      {selectedTrainerId && (\n        <TrainerDetails\n          trainerId={selectedTrainerId}\n          onClose={() => setSelectedTrainerId(null)}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":2438},"client/src/components/forms/form-k.tsx":{"content":"import React, { useState, useEffect } from \"react\";\r\nimport { useTrainer } from \"@/context/TrainerContext\";\r\n\r\ninterface MonographEvaluation {\r\n  section: string;\r\n  percentage: string;\r\n  score: string;\r\n  teacherName: string;\r\n  teacherSigned: boolean;\r\n  characteristics: string;\r\n  total: string;\r\n  average: string;\r\n  notes: string;\r\n}\r\n\r\ninterface MonographEvaluationFormProps {\r\n  trainerIdProp?: string; // ✅ دریافت trainerId از props\r\n}\r\n\r\nexport default function MonographEvaluationForm({\r\n  trainerIdProp,\r\n}: MonographEvaluationFormProps) {\r\n  const [trainerId, setTrainerId] = useState<string | null>(null);\r\n  // 🔹 مشخصات شخصی\r\n  const [personalInfo, setPersonalInfo] = useState({\r\n    name: \"\",\r\n    lastName: \"\",\r\n    parentType: \"\",\r\n    idNumber: \"\",\r\n    department: \"\",\r\n    trainingYear: \"\",\r\n    startYear: \"\",\r\n    date: \"\",\r\n  });\r\n\r\n  const handleChangePersonal = (\r\n    field: keyof typeof personalInfo,\r\n    value: string\r\n  ) => {\r\n    setPersonalInfo({ ...personalInfo, [field]: value });\r\n  };\r\n\r\n  const inputClass = \"border px-2 py-1 text-center w-full\";\r\n\r\n  // 🔹 جدول ارزیابی\r\n  const [evaluations, setEvaluations] = useState<MonographEvaluation[]>([\r\n    {\r\n      section: \"شیوه تحریر و ترتیب مونوگراف\",\r\n      percentage: \"\",\r\n      score: \"\",\r\n      teacherName: \"\",\r\n      teacherSigned: false,\r\n      characteristics: \"\",\r\n      total: \"\",\r\n      average: \"\",\r\n      notes: \"\",\r\n    },\r\n    {\r\n      section: \"حاکمیت و شیوه ارائه موضوع\",\r\n      percentage: \"\",\r\n      score: \"\",\r\n      teacherName: \"\",\r\n      teacherSigned: false,\r\n      characteristics: \"\",\r\n      total: \"\",\r\n      average: \"\",\r\n      notes: \"\",\r\n    },\r\n    {\r\n      section: \"ارائه جواب به سوالات راجع به موضوع\",\r\n      percentage: \"\",\r\n      score: \"\",\r\n      teacherName: \"\",\r\n      teacherSigned: false,\r\n      characteristics: \"\",\r\n      total: \"\",\r\n      average: \"\",\r\n      notes: \"\",\r\n    },\r\n    {\r\n      section: \"دفاع از موضوع تحقیق\",\r\n      percentage: \"\",\r\n      score: \"\",\r\n      teacherName: \"\",\r\n      teacherSigned: false,\r\n      characteristics: \"\",\r\n      total: \"\",\r\n      average: \"\",\r\n      notes: \"\",\r\n    },\r\n    {\r\n      section: \"ارائه جوابات به سوالات افاقی\",\r\n      percentage: \"\",\r\n      score: \"\",\r\n      teacherName: \"\",\r\n      teacherSigned: false,\r\n      characteristics: \"\",\r\n      total: \"\",\r\n      average: \"\",\r\n      notes: \"\",\r\n    },\r\n    {\r\n      section: \"کرکترستیک\",\r\n      percentage: \"\",\r\n      score: \"\",\r\n      teacherName: \"\",\r\n      teacherSigned: false,\r\n      characteristics: \"\",\r\n      total: \"\",\r\n      average: \"\",\r\n      notes: \"\",\r\n    },\r\n  ]);\r\n  ///////////////////////////////////////\r\n  useEffect(() => {\r\n    if (!trainerIdProp) {\r\n      alert(\"هیچ ترینر فعالی یافت نشد!\");\r\n      return;\r\n    }\r\n\r\n    setTrainerId(trainerIdProp);\r\n\r\n    // 👇 دریافت داده از دیتابیس\r\n    const fetchTrainerInfo = async () => {\r\n      try {\r\n        const res = await fetch(\r\n          `http://localhost:5000/api/trainers/${trainerIdProp}`\r\n        );\r\n        const result = await res.json();\r\n\r\n        if (!res.ok) throw new Error(result.message || \"خطا در دریافت ترینر\");\r\n\r\n        // فرض می‌کنیم دیتابیس این فیلدها را دارد:\r\n        setPersonalInfo((prev) => ({\r\n          ...prev,\r\n          name: result.name || \"\",\r\n          lastName: result.lastName || \"\",\r\n          parentType: result.parentType || \"\",\r\n          trainingYear: result.trainingYear || \"\",\r\n          idNumber: result.idNumber || \"\",\r\n          department: result.department || \"\",\r\n        }));\r\n      } catch (err) {\r\n        console.error(\"خطا در دریافت ترینر:\", err);\r\n        alert(\"خطا در دریافت اطلاعات ترینر ❌\");\r\n      }\r\n    };\r\n\r\n    fetchTrainerInfo();\r\n  }, [trainerIdProp]);\r\n  //////////////////////////////////////\r\n\r\n  const handleEvalChange = (\r\n    index: number,\r\n    field: keyof MonographEvaluation,\r\n    value: string | boolean\r\n  ) => {\r\n    const updated = [...evaluations];\r\n    (updated[index] as any)[field] = value;\r\n    setEvaluations(updated);\r\n  };\r\n\r\n  // ✅ تابع ولیدیشن قبل از ارسال\r\n  const validateForm = () => {\r\n    // 🔸 بررسی trainerId\r\n    if (!trainerId) {\r\n      alert(\"❌ Trainer ID موجود نیست، فرم ذخیره نمی‌شود!\");\r\n      return false;\r\n    }\r\n\r\n    // 🔸 بررسی خالی نبودن تمام فیلدهای شخصی\r\n    for (const [key, value] of Object.entries(personalInfo)) {\r\n      if (!value.trim()) {\r\n        alert(`⚠️ لطفاً فیلد \"${key}\" را پُر کنید.`);\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // 🔸 بررسی جدول ارزیابی\r\n    for (let i = 0; i < evaluations.length; i++) {\r\n      const ev = evaluations[i];\r\n      if (!ev.percentage.trim() || !ev.score.trim() || !ev.teacherName.trim()) {\r\n        alert(`⚠️ لطفاً تمام فیلدهای ردیف \"${ev.section}\" را پُر کنید.`);\r\n        return false;\r\n      }\r\n      if (isNaN(parseFloat(ev.score))) {\r\n        alert(`⚠️ نمره در بخش \"${ev.section}\" باید عددی باشد.`);\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // 🔸 بررسی مجموع نمرات، اوسط و ملاحظات\r\n    const firstEval = evaluations[0];\r\n    if (\r\n      !firstEval.total.trim() ||\r\n      !firstEval.average.trim() ||\r\n      !firstEval.notes.trim()\r\n    ) {\r\n      alert(\"⚠️ لطفاً مجموع نمرات، اوسط و ملاحظات را پُر کنید.\");\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  // 💾 ذخیره فرم\r\n  // درون MonographEvaluationForm --> handleSubmit\r\n  const handleSubmit = async () => {\r\n    // ولیدیشن پایه (همین‌جا می‌تونید عمیق‌تر اضافه کنید)\r\n    if (!trainerId) {\r\n      alert(\"❌ هیچ ترینر فعالی یافت نشد!\");\r\n      return;\r\n    }\r\n    // مثال ولیدیشن: تمام فیلدهای شخصی باید پر شده باشند\r\n    for (const [k, v] of Object.entries(personalInfo)) {\r\n      if (!v.trim()) {\r\n        alert(`لطفاً فیلد ${k} را پر کنید.`);\r\n        return;\r\n      }\r\n    }\r\n    // ارزیابی‌ها هم کامل باشند\r\n    for (let i = 0; i < evaluations.length; i++) {\r\n      const e = evaluations[i];\r\n      if (!e.percentage.trim() || !e.score.trim() || !e.teacherName.trim()) {\r\n        alert(`ردیف \"${e.section}\" ناقص است — همه فیلدها را پر کنید.`);\r\n        return;\r\n      }\r\n    }\r\n\r\n    // **اینجا: payload سطح بالا می‌سازیم (نه personalInfo)**\r\n    const payload = {\r\n      trainer: trainerId,\r\n      name: personalInfo.name.trim(),\r\n      lastName: personalInfo.lastName.trim(),\r\n      parentType: personalInfo.parentType.trim(),\r\n      idNumber: personalInfo.idNumber.trim(),\r\n      department: personalInfo.department.trim(),\r\n      trainingYear: personalInfo.trainingYear.trim(),\r\n      startYear: personalInfo.startYear.trim(),\r\n      date: personalInfo.date.trim(),\r\n      evaluations: evaluations.map((e) => ({\r\n        section: e.section,\r\n        percentage: e.percentage.trim(),\r\n        score: e.score.trim(),\r\n        teacherName: e.teacherName.trim(),\r\n        teacherSigned: !!e.teacherSigned,\r\n        characteristics: (e.characteristics || \"\").trim(),\r\n        total: (e.total || \"\").trim(),\r\n        average: (e.average || \"\").trim(),\r\n        notes: (e.notes || \"\").trim(),\r\n      })),\r\n    };\r\n\r\n    try {\r\n      const res = await fetch(\"http://localhost:5000/api/monographEvaluation\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(payload),\r\n      });\r\n\r\n      // تلاش برای خواندن پاسخ سرور برای پیام خطا دقیق‌تر\r\n      const body = await res.json().catch(() => null);\r\n      if (!res.ok) {\r\n        console.error(\"Server responded with error:\", body);\r\n        alert(\"❌ خطا در ارسال فرم: \" + (body?.message || res.statusText));\r\n        return;\r\n      }\r\n\r\n      alert(\"✅ فرم با موفقیت ذخیره شد!\");\r\n\r\n      // ریست فرم — همان‌طور که قبلاً دارید\r\n\r\n      // 🔹 ریست کردن تمام فیلدهای شخصی\r\n      setPersonalInfo({\r\n        name: \"\",\r\n        lastName: \"\",\r\n        parentType: \"\",\r\n        idNumber: \"\",\r\n        department: \"\",\r\n        trainingYear: \"\",\r\n        startYear: \"\",\r\n        date: \"\",\r\n      });\r\n\r\n      // 🔹 ریست جدول ارزیابی به مقدار اولیه\r\n      setEvaluations([\r\n        {\r\n          section: \"شیوه تحریر و ترتیب مونوگراف\",\r\n          percentage: \"\",\r\n          score: \"\",\r\n          teacherName: \"\",\r\n          teacherSigned: false,\r\n          characteristics: \"\",\r\n          total: \"\",\r\n          average: \"\",\r\n          notes: \"\",\r\n        },\r\n        {\r\n          section: \"حاکمیت و شیوه ارائه موضوع\",\r\n          percentage: \"\",\r\n          score: \"\",\r\n          teacherName: \"\",\r\n          teacherSigned: false,\r\n          characteristics: \"\",\r\n          total: \"\",\r\n          average: \"\",\r\n          notes: \"\",\r\n        },\r\n        {\r\n          section: \"ارائه جواب به سوالات راجع به موضوع\",\r\n          percentage: \"\",\r\n          score: \"\",\r\n          teacherName: \"\",\r\n          teacherSigned: false,\r\n          characteristics: \"\",\r\n          total: \"\",\r\n          average: \"\",\r\n          notes: \"\",\r\n        },\r\n        {\r\n          section: \"دفاع از موضوع تحقیق\",\r\n          percentage: \"\",\r\n          score: \"\",\r\n          teacherName: \"\",\r\n          teacherSigned: false,\r\n          characteristics: \"\",\r\n          total: \"\",\r\n          average: \"\",\r\n          notes: \"\",\r\n        },\r\n        {\r\n          section: \"ارائه جوابات به سوالات افاقی\",\r\n          percentage: \"\",\r\n          score: \"\",\r\n          teacherName: \"\",\r\n          teacherSigned: false,\r\n          characteristics: \"\",\r\n          total: \"\",\r\n          average: \"\",\r\n          notes: \"\",\r\n        },\r\n        {\r\n          section: \"کرکترستیک\",\r\n          percentage: \"\",\r\n          score: \"\",\r\n          teacherName: \"\",\r\n          teacherSigned: false,\r\n          characteristics: \"\",\r\n          total: \"\",\r\n          average: \"\",\r\n          notes: \"\",\r\n        },\r\n      ]);\r\n    } catch (err) {\r\n      console.error(\"Network or fetch error:\", err);\r\n      alert(\"❌ خطا در ارتباط با سرور\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-6xl mx-auto bg-white shadow-lg rounded-2xl p-6 mt-6\">\r\n      <h2 className=\"text-xl font-bold text-center mb-4\">\r\n        فرم ارزیابی مونوگراف\r\n      </h2>\r\n\r\n      {!trainerId && (\r\n        <p className=\"text-center text-red-500 mb-4\">\r\n          در حال دریافت شناسه ترینر...\r\n        </p>\r\n      )}\r\n\r\n      {/* 🔹 معلومات شخصی */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\r\n        {Object.entries(personalInfo).map(([key, value]) => (\r\n          <input\r\n            key={key}\r\n            type=\"text\"\r\n            placeholder={key}\r\n            value={value}\r\n            onChange={(e) =>\r\n              handleChangePersonal(\r\n                key as keyof typeof personalInfo,\r\n                e.target.value\r\n              )\r\n            }\r\n            className={inputClass}\r\n          />\r\n        ))}\r\n      </div>\r\n\r\n      {/* 🔹 جدول ارزیابی */}\r\n      <table className=\"table-auto border-collapse border w-full text-center mb-4\">\r\n        <thead>\r\n          <tr className=\"bg-gray-100\">\r\n            <th className=\"border px-2 py-2\">بخش‌ها</th>\r\n            <th className=\"border px-2 py-2\">فیصدی</th>\r\n            <th className=\"border px-2 py-2\">نمره داده شده</th>\r\n            <th className=\"border px-2 py-2\">اسم استاد</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {evaluations.map((evalItem, idx) => (\r\n            <tr key={idx}>\r\n              <td className=\"border px-2 py-2\">{evalItem.section}</td>\r\n              <td className=\"border px-2 py-2\">\r\n                <input\r\n                  className={inputClass}\r\n                  value={evalItem.percentage}\r\n                  onChange={(e) =>\r\n                    handleEvalChange(idx, \"percentage\", e.target.value)\r\n                  }\r\n                />\r\n              </td>\r\n              <td className=\"border px-2 py-2\">\r\n                <input\r\n                  className={inputClass}\r\n                  value={evalItem.score}\r\n                  onChange={(e) =>\r\n                    handleEvalChange(idx, \"score\", e.target.value)\r\n                  }\r\n                />\r\n              </td>\r\n              <td className=\"border px-2 py-2\">\r\n                <input\r\n                  className={inputClass}\r\n                  value={evalItem.teacherName}\r\n                  onChange={(e) =>\r\n                    handleEvalChange(idx, \"teacherName\", e.target.value)\r\n                  }\r\n                />\r\n              </td>\r\n            </tr>\r\n          ))}\r\n\r\n          <tr>\r\n            <td className=\"border px-2 py-2\">مجموع نمرات</td>\r\n            <td className=\"border px-2 py-2\">\r\n              <input\r\n                className={inputClass}\r\n                value={evaluations[0].total}\r\n                onChange={(e) => handleEvalChange(0, \"total\", e.target.value)}\r\n              />\r\n            </td>\r\n            <td className=\"border px-2 py-2\">اوسط</td>\r\n            <td className=\"border px-2 py-2\">\r\n              <input\r\n                className={inputClass}\r\n                value={evaluations[0].average}\r\n                onChange={(e) => handleEvalChange(0, \"average\", e.target.value)}\r\n              />\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n\r\n      {/* 🔹 ملاحظات */}\r\n      <div className=\"mb-4\">\r\n        <label className=\"block mb-1 font-medium\">\r\n          ملاحظات / نظر هیئت اداری\r\n        </label>\r\n        <textarea\r\n          className=\"border w-full p-2 rounded\"\r\n          rows={4}\r\n          value={evaluations[0].notes}\r\n          onChange={(e) => handleEvalChange(0, \"notes\", e.target.value)}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"text-center\">\r\n        <button\r\n          onClick={handleSubmit}\r\n          disabled={!trainerId}\r\n          className=\"px-6 py-2 bg-green-600 text-white rounded-xl hover:bg-green-700 transition disabled:opacity-50\"\r\n        >\r\n          ذخیره فرم\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","size_bytes":14931},"client/src/components/residents/form-details/form-f.tsx":{"content":"// FormFViewDynamicFinal.tsx\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst months = [12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1];\r\n\r\ninterface MonthScore {\r\n  month: number;\r\n  value: number | null;\r\n}\r\n\r\ninterface Activity {\r\n  id: string;\r\n  title: string;\r\n  percent: number;\r\n  months?: MonthScore[];\r\n}\r\n\r\ninterface Section {\r\n  name: string;\r\n  percent: number;\r\n  activities: Activity[];\r\n}\r\n\r\ninterface FormFDataFromAPI {\r\n  studentName: string;\r\n  fatherName: string;\r\n  year: string;\r\n  scores: Record<string, Record<number, number>>;\r\n}\r\n\r\ninterface FormFViewDynamicProps {\r\n  studentName: string;\r\n}\r\n\r\nconst sectionsTemplate: Section[] = [\r\n  {\r\n    name: \"آغاز فعالیت\",\r\n    percent: 10,\r\n    activities: [\r\n      { id: \"uniform\", title: \"یونیفورم\", percent: 6 },\r\n      { id: \"coworkers\", title: \"برخورد با همکاران\", percent: 2 },\r\n      { id: \"patients\", title: \"برخورد با مریض\", percent: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"شیوه اخذ مشاهده\",\r\n    percent: 9,\r\n    activities: [\r\n      { id: \"cc\", title: \"شهرت مریض\", percent: 2 },\r\n      { id: \"pi\", title: \"معاینه فزیکی\", percent: 2 },\r\n      { id: \"postHistory\", title: \"تجویز معاینات لابراتواری روتین\", percent: 2 },\r\n      { id: \"diagnosis\", title: \"تجویز معاینات وصفی و ضمیموی\", percent: 3 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"انجام مشوره طبی بموقع\",\r\n    percent: 6,\r\n    activities: [\r\n      { id: \"consult\", title: \"انجام مشوره طبی بموقع\", percent: 6 }\r\n    ],\r\n  },\r\n  {\r\n    name: \"سعی در بلند بردن سطح دانش علمی و مسلکی\",\r\n    percent: 27,\r\n    activities: [\r\n      { id: \"morning\", title: \"اشتراک فعال در راپو صبحانه\", percent: 6 },\r\n      { id: \"visits\", title: \"اشتراک فعال در ویزت‌ها\", percent: 6 },\r\n      { id: \"conferences\", title: \"اشتراک فعال در کنفرانس‌ها\", percent: 12 },\r\n      { id: \"license\", title: \"تقویه یکی از لیسانس‌های معتبر خارجی\", percent: 1 },\r\n      { id: \"computer\", title: \"قدرت استفاده از کمپیوتر و انترنت\", percent: 1 },\r\n      { id: \"press\", title: \"استفاده از نشرات مطبوع\", percent: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"دسپلین\",\r\n    percent: 24,\r\n    activities: [\r\n      { id: \"attendance\", title: \"حاضر بودن\", percent: 6 },\r\n      { id: \"obedience\", title: \"اطاعت از اوامر معقول آمرمافوق\", percent: 6 },\r\n      { id: \"rules\", title: \"مراعات مقرره و لوایح تریننگ\", percent: 6 },\r\n      { id: \"duty\", title: \"اشتراک در نوکریوالی\", percent: 6 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"خصوصیات فردی\",\r\n    percent: 24,\r\n    activities: [\r\n      { id: \"expression\", title: \"افاده بیان\", percent: 2 },\r\n      { id: \"initiative\", title: \"ابتکار سالم\", percent: 2 },\r\n      { id: \"leadership\", title: \"تصمیم و رهبری\", percent: 2 },\r\n      { id: \"honesty\", title: \"راستکاری و همکاری\", percent: 2 },\r\n      { id: \"resources\", title: \"استفاده معقول از منابع\", percent: 4 },\r\n      { id: \"responsibility\", title: \"مسٔولیت‌پذیری\", percent: 2 },\r\n      { id: \"evaluation\", title: \"تحلیل و ارزیابی\", percent: 2 },\r\n      { id: \"feedback\", title: \"انتقاد و پیشنهاد سازنده\", percent: 2 },\r\n      { id: \"individual\", title: \"رسیدگی به وضع فردی\", percent: 2 },\r\n      { id: \"social\", title: \"رابطه اجتماعی\", percent: 2 },\r\n      { id: \"position\", title: \"استفاده بجا از موقف کاری\", percent: 2 },\r\n    ],\r\n  },\r\n];\r\n\r\n// تابع کمکی برای نمایش مقدار - جایگزینی صفر با خانه خالی\r\nconst displayValue = (value: number | null): string => {\r\n  return value === null || value === 0 ? \"\" : value.toString();\r\n};\r\n\r\n// تابع کمکی برای محاسبه جمع - فقط مقادیر غیرصفر و غیرنال\r\nconst calculateSum = (values: (number | null)[]): number => {\r\n  return values.reduce((sum, val) => sum + (val || 0), 0);\r\n};\r\n\r\nexport default function FormFViewDynamicFinal({ studentName }: FormFViewDynamicProps) {\r\n  const [sections, setSections] = useState<Section[]>(sectionsTemplate);\r\n  const [studentInfo, setStudentInfo] = useState({\r\n    studentName: \"\",\r\n    fatherName: \"\",\r\n    year: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        if (!studentName) return;\r\n\r\n        const res = await axios.get<FormFDataFromAPI>(\r\n          `/api/checklists/student/${encodeURIComponent(studentName)}`\r\n        );\r\n\r\n        const data = res.data;\r\n\r\n        setStudentInfo({\r\n          studentName: data.studentName,\r\n          fatherName: data.fatherName,\r\n          year: data.year,\r\n        });\r\n\r\n        const updatedSections = sectionsTemplate.map((section) => ({\r\n          ...section,\r\n          activities: section.activities.map((act) => ({\r\n            ...act,\r\n            months: months.map((m) => ({\r\n              month: m,\r\n              value: data.scores?.[act.id]?.[m] ?? null,\r\n            })),\r\n          })),\r\n        }));\r\n\r\n        setSections(updatedSections);\r\n      } catch (err) {\r\n        console.error(\"خطا در دریافت داده‌ها:\", err);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [studentName]);\r\n\r\n  const calculateActivityTotal = (activity: Activity) =>\r\n    calculateSum((activity.months || []).map(m => m.value));\r\n\r\n  const calculateSectionTotal = (section: Section) =>\r\n    calculateSum(section.activities.map(act => calculateActivityTotal(act)));\r\n\r\n  const calculateMonthTotal = (monthIndex: number) =>\r\n    calculateSum(sections.map(section => \r\n      calculateSum(section.activities.map(act => \r\n        act.months?.[monthIndex]?.value || 0\r\n      ))\r\n    ));\r\n\r\n  const calculateGrandTotal = () =>\r\n    calculateSum(sections.map(section => calculateSectionTotal(section)));\r\n\r\n  const downloadPDF = () => {\r\n    const printWindow = window.open('', '_blank');\r\n    if (!printWindow) return;\r\n\r\n    const monthTotals = months.map((_, monthIndex) => \r\n      calculateMonthTotal(monthIndex)\r\n    );\r\n\r\n    const htmlContent = `\r\n      <!DOCTYPE html>\r\n      <html dir=\"rtl\" lang=\"fa\">\r\n      <head>\r\n        <meta charset=\"UTF-8\">\r\n        <title>Form F - ${studentInfo.studentName}</title>\r\n        <style>\r\n          body { \r\n            font-family: 'Tahoma', 'Arial', sans-serif; \r\n            margin: 10px;\r\n            line-height: 1;\r\n            font-size: 11px;\r\n          }\r\n          .header { \r\n            text-align: center; \r\n            margin-bottom: 10px;\r\n          }\r\n          .header h1 {\r\n            font-size: 14px;\r\n            margin: 0;\r\n            font-weight: bold;\r\n          }\r\n          .header h2 {\r\n            font-size: 12px;\r\n            margin: 2px 0;\r\n            font-weight: bold;\r\n          }\r\n          .student-info {\r\n            text-align: center;\r\n            margin-bottom: 10px;\r\n            font-size: 11px;\r\n          }\r\n          table {\r\n            width: 100%;\r\n            border-collapse: collapse;\r\n            margin-bottom: 5px;\r\n            font-size: 9px;\r\n            border: 1px solid #000;\r\n          }\r\n          th, td {\r\n            border: 1px solid #000;\r\n            padding: 3px 2px;\r\n            text-align: center;\r\n            height: 18px;\r\n          }\r\n          .main-section {\r\n            background-color: #f0f0f0;\r\n            font-weight: bold;\r\n          }\r\n          .sub-activity {\r\n            background-color: #ffffff;\r\n          }\r\n          .empty-cell {\r\n            border: none;\r\n            background-color: transparent;\r\n          }\r\n          .signatures {\r\n            margin-top: 20px;\r\n            display: flex;\r\n            justify-content: space-between;\r\n            font-size: 10px;\r\n          }\r\n          .signature-box {\r\n            text-align: center;\r\n            width: 45%;\r\n          }\r\n          @media print {\r\n            body { margin: 8px; }\r\n            .no-print { display: none; }\r\n          }\r\n        </style>\r\n      </head>\r\n      <body>\r\n        <div class=\"header\">\r\n          <h1>( F ) فورم:</h1>\r\n          <h2>حکالست کاری و ارزیابی ماموال نزینی های ساخانه</h2>\r\n        </div>\r\n\r\n        <div class=\"student-info\">\r\n          <span><strong>اسم:</strong> ${studentInfo.studentName}</span>\r\n          <span style=\"margin: 0 15px;\"><strong>ولد:</strong> ${studentInfo.fatherName}</span>\r\n          <span><strong>سال تربننگ:</strong> ${studentInfo.year}</span>\r\n        </div>\r\n\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>محفظات</th>\r\n              <th>جمع‌ها برآن</th>\r\n              ${months.map(m => `<th>${m}</th>`).join('')}\r\n              <th>قیمت‌ها برآن</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            ${sections.map(section => `\r\n              <!-- بخش اصلی -->\r\n              <tr class=\"main-section\">\r\n                <td>${section.percent}%</td>\r\n                <td>${calculateSectionTotal(section)}</td>\r\n                ${months.map((_, idx) => {\r\n                  const monthSum = section.activities.reduce((sum, act) => {\r\n                    const value = act.months?.[idx]?.value;\r\n                    return sum + (value || 0);\r\n                  }, 0);\r\n                  return `<td>${monthSum > 0 ? monthSum : ''}</td>`;\r\n                }).join('')}\r\n                <td>${section.name}</td>\r\n              </tr>\r\n              <!-- فعالیت‌های فرعی -->\r\n              ${section.activities.map((activity, index) => `\r\n                <tr class=\"sub-activity\">\r\n                  <td class=\"empty-cell\"></td>\r\n                  <td>${calculateActivityTotal(activity) > 0 ? calculateActivityTotal(activity) : ''}</td>\r\n                  ${activity.months?.map(month => \r\n                    `<td>${displayValue(month.value)}</td>`\r\n                  ).join('')}\r\n                  <td>${activity.title} ${activity.percent}%</td>\r\n                </tr>\r\n              `).join('')}\r\n            `).join('')}\r\n\r\n            <!-- جمع کل -->\r\n            <tr class=\"main-section\" style=\"background-color: #e0e0e0;\">\r\n              <td>100%</td>\r\n              <td>${calculateGrandTotal()}</td>\r\n              ${monthTotals.map(total => \r\n                `<td>${total > 0 ? total : ''}</td>`\r\n              ).join('')}\r\n              <td>مجموع کل</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n\r\n        <div class=\"signatures\">\r\n          <div class=\"signature-box\">\r\n            <strong>رئيس شناخته</strong><br>\r\n            ________________\r\n          </div>\r\n          <div class=\"signature-box\">\r\n            <strong>امريروگرام تربننگ</strong><br>\r\n            ________________\r\n          </div>\r\n        </div>\r\n\r\n        <div style=\"text-align: center; margin-top: 5px; font-size: 10px;\">\r\n          <strong>ترينزمربوطه</strong>\r\n        </div>\r\n\r\n        <script>\r\n          window.onload = function() {\r\n            window.print();\r\n          }\r\n        </script>\r\n      </body>\r\n      </html>\r\n    `;\r\n\r\n    printWindow.document.write(htmlContent);\r\n    printWindow.document.close();\r\n  };\r\n\r\n  const downloadExcel = () => {\r\n    let csvContent = \"data:text/csv;charset=utf-8,\\uFEFF\";\r\n    \r\n    csvContent += \"( F ) فورم:\\\\n\";\r\n    csvContent += \"حکالست کاری و ارزیابی ماموال نزینی های ساخانه\\\\n\";\r\n    csvContent += `اسم: ${studentInfo.studentName},ولد: ${studentInfo.fatherName},سال تربننگ: ${studentInfo.year}\\\\n\\\\n`;\r\n\r\n    csvContent += \"محفظات,جمع‌ها برآن,\";\r\n    csvContent += months.join(\",\");\r\n    csvContent += \",قیمت‌ها برآن\\\\n\";\r\n\r\n    sections.forEach(section => {\r\n      // بخش اصلی\r\n      let sectionRow = `${section.percent}%,${calculateSectionTotal(section)},`;\r\n      months.forEach((_, idx) => {\r\n        const monthSum = section.activities.reduce((sum, act) => {\r\n          const value = act.months?.[idx]?.value;\r\n          return sum + (value || 0);\r\n        }, 0);\r\n        sectionRow += `${monthSum > 0 ? monthSum : ''},`;\r\n      });\r\n      sectionRow += `${section.name}\\\\n`;\r\n      csvContent += sectionRow;\r\n\r\n      // فعالیت‌های فرعی\r\n      section.activities.forEach(activity => {\r\n        let activityRow = `,${calculateActivityTotal(activity) > 0 ? calculateActivityTotal(activity) : ''},`;\r\n        activity.months?.forEach(month => {\r\n          activityRow += `${displayValue(month.value)},`;\r\n        });\r\n        activityRow += `${activity.title} ${activity.percent}%\\\\n`;\r\n        csvContent += activityRow;\r\n      });\r\n    });\r\n\r\n    // جمع کل\r\n    let grandTotalRow = \"100%,\";\r\n    grandTotalRow += `${calculateGrandTotal()},`;\r\n    months.forEach((_, idx) => {\r\n      const monthTotal = calculateMonthTotal(idx);\r\n      grandTotalRow += `${monthTotal > 0 ? monthTotal : ''},`;\r\n    });\r\n    grandTotalRow += \"مجموع کل\\\\n\";\r\n    csvContent += grandTotalRow;\r\n\r\n    csvContent += \"\\\\nرئيس شناخته,امريروگرام تربننگ\\\\n\";\r\n    csvContent += \"ترينزمربوطه\\\\n\";\r\n\r\n    const encodedUri = encodeURI(csvContent);\r\n    const link = document.createElement(\"a\");\r\n    link.setAttribute(\"href\", encodedUri);\r\n    link.setAttribute(\"download\", `FormF_${studentInfo.studentName}.csv`);\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-full mx-auto p-6 bg-gray-100 rounded-xl shadow-md\">\r\n      <div className=\"flex justify-between items-center mb-6\">\r\n        <h1 className=\"text-2xl font-bold text-center\">\r\n          نمایش چک لیست کاری و ارزیابی ماهوار ترینی‌ها (Form F)\r\n        </h1>\r\n        \r\n        <div className=\"flex gap-2 no-print\">\r\n          <button\r\n            onClick={downloadPDF}\r\n            className=\"bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg font-bold\"\r\n          >\r\n            دانلود PDF\r\n          </button>\r\n          <button\r\n            onClick={downloadExcel}\r\n            className=\"bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-bold\"\r\n          >\r\n            دانلود Excel\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\r\n        <div className=\"p-3 border rounded-lg bg-white\">\r\n          <strong>نام ترینی:</strong> {studentInfo.studentName}\r\n        </div>\r\n        <div className=\"p-3 border rounded-lg bg-white\">\r\n          <strong>ولد:</strong> {studentInfo.fatherName}\r\n        </div>\r\n        <div className=\"p-3 border rounded-lg bg-white\">\r\n          <strong>سال آموزشی:</strong> {studentInfo.year}\r\n        </div>\r\n      </div>\r\n\r\n      {/* نمایش با ساختار درختی */}\r\n      <div className=\"mb-8\">\r\n        <table className=\"w-full border border-gray-300 text-sm bg-white\">\r\n          <thead>\r\n            <tr className=\"bg-gray-200\">\r\n              <th className=\"p-2 border border-gray-300\">بخش اصلی</th>\r\n              <th className=\"p-2 border border-gray-300\">فیصدی بخش</th>\r\n              <th className=\"p-2 border border-gray-300\">فعالیت‌های فرعی</th>\r\n              <th className=\"p-2 border border-gray-300\">فیصدی فعالیت</th>\r\n              {months.map((m) => (\r\n                <th key={m} className=\"p-2 border border-gray-300\">{m}</th>\r\n              ))}\r\n              <th className=\"p-2 border border-gray-300\">مجموع فعالیت</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {sections.map((section, sectionIndex) => (\r\n              <React.Fragment key={sectionIndex}>\r\n                <tr className=\"bg-gray-100 font-bold\">\r\n                  <td className=\"p-2 border border-gray-300\" rowSpan={section.activities.length + 1}>\r\n                    {section.name}\r\n                  </td>\r\n                  <td className=\"p-2 border border-gray-300\" rowSpan={section.activities.length + 1}>\r\n                    {section.percent}%\r\n                  </td>\r\n                  <td className=\"p-2 border border-gray-300\" colSpan={months.length + 3}>\r\n                    جمع بخش: {calculateSectionTotal(section) > 0 ? calculateSectionTotal(section) : \"\"}\r\n                  </td>\r\n                </tr>\r\n                {section.activities.map((activity, activityIndex) => (\r\n                  <tr key={activityIndex} className=\"hover:bg-gray-50\">\r\n                    <td className=\"p-2 border border-gray-300\">{activity.title}</td>\r\n                    <td className=\"p-2 border border-gray-300\">{activity.percent}%</td>\r\n                    {months.map((monthNum) => {\r\n                      const monthData = activity.months?.find(m => m.month === monthNum);\r\n                      return (\r\n                        <td\r\n                          key={monthNum}\r\n                          className=\"p-2 border border-gray-300 text-center\"\r\n                        >\r\n                          {displayValue(monthData?.value ?? null)}\r\n                        </td>\r\n                      );\r\n                    })}\r\n                    <td className=\"p-2 border border-gray-300 font-bold\">\r\n                      {calculateActivityTotal(activity) > 0 ? calculateActivityTotal(activity) : \"\"}\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </React.Fragment>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n}","size_bytes":17943},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\nimport { fileURLToPath } from \"url\";\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\n// پلاگین‌ها را در یک آرایه مدیریت می‌کنیم\nconst plugins = [react(), runtimeErrorOverlay()];\n\n// فقط وقتی در repl باشیم cartographer اضافه شود\nif (process.env.NODE_ENV !== \"production\" && process.env.REPL_ID !== undefined) {\n  const { cartographer } = await import(\"@replit/vite-plugin-cartographer\");\n  plugins.push(cartographer());\n}\n\nexport default defineConfig({\n  plugins,\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(__dirname, \"shared\"),\n      \"@assets\": path.resolve(__dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(__dirname, \"client\"),\n  build: {\n    outDir: path.resolve(__dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    host: \"0.0.0.0\",\n    port: 5000,\n    strictPort: true,\n    hmr: {\n      clientPort: 443,\n    },\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1236},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\r\nimport { registerRoutes } from \"./routes\";\r\nimport { setupVite, serveStatic, log } from \"./vite\";\r\nimport { connectDB } from \"./db\";\r\nimport monographRoutes from \"./routes/form-C\";\r\nimport conferenceRoutes from \"./routes/form-D\";\r\nimport evaluationFormERoutes from \"./routes/form-E\";\r\nimport evaluationFormGRoutes from \"./routes/form-G\";\r\nimport formHRoutes from \"./routes/form-H\";\r\nimport monographEvaluationRoutes from \"./routes/form-k\";\r\nimport rotationFormRoutes from \"./routes/form-I\";\r\nimport { teacherActivityRoutes } from \"./routes/form-J\";\r\nimport path from \"path\";\r\nimport { fileURLToPath } from \"url\";\r\nconst app = express();\r\n\r\n\r\nconst __filename = fileURLToPath(import.meta.url);\r\nconst __dirname = path.dirname(__filename);\r\n// Parsers\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: false }));\r\n\r\n// 🟢 سرو کردن فایل‌های آپلود شده به صورت استاتیک\r\n// The import statement for 'path' has been removed as it is already imported.\r\nimport { trainerRoutes } from \"./routes/trainerRoutes\"; // مسیر روتر ترینر\r\napp.use(\"/uploads\", express.static(path.join(__dirname, \"uploads\")));\r\n\r\n\r\n// API routes\r\napp.use(\"/api/monograph\", monographRoutes);\r\napp.use(\"/api/conference\", conferenceRoutes);\r\napp.use(\"/api/evaluationFormE\", evaluationFormERoutes);\r\napp.use(\"/api/evaluationFormH\", formHRoutes);\r\napp.use(\"/api/evaluationFormG\", evaluationFormGRoutes);\r\napp.use(\"/api/monographEvaluation\", monographEvaluationRoutes);\r\napp.use(\"/api/rotation-form\", rotationFormRoutes);\r\napp.use(\"/api/teacher-activities\", teacherActivityRoutes);\r\n\r\n// اضافه کردن ترینر\r\napp.use(\"/api/trainers\", trainerRoutes);\r\napp.use(\"/uploads\", express.static(path.join(__dirname, \"uploads\")));\r\n\r\n// Logging middleware for API responses\r\napp.use((req, res, next) => {\r\n  const start = Date.now();\r\n  const path = req.path;\r\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\r\n\r\n  const originalResJson = res.json;\r\n  res.json = function (bodyJson, ...args) {\r\n    capturedJsonResponse = bodyJson;\r\n    return originalResJson.apply(res, [bodyJson, ...args]);\r\n  };\r\n\r\n  res.on(\"finish\", () => {\r\n    const duration = Date.now() - start;\r\n    if (path.startsWith(\"/api\")) {\r\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\r\n      if (capturedJsonResponse) {\r\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\r\n      }\r\n      if (logLine.length > 80) {\r\n        logLine = logLine.slice(0, 79) + \"…\";\r\n      }\r\n      log(logLine);\r\n    }\r\n  });\r\n\r\n  next();\r\n});\r\n\r\n// Error handler\r\napp.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\r\n  const status = err.status || err.statusCode || 500;\r\n  const message = err.message || \"Internal Server Error\";\r\n  res.status(status).json({ message });\r\n});\r\n\r\n// ---- Main bootstrap ----\r\n(async () => {\r\n  // DB\r\n  await connectDB();\r\n\r\n  // registerRoutes returns http.Server usually\r\n  const server = await registerRoutes(app);\r\n\r\n  // در حالت production فایل‌های استاتیک را سرو کن\r\n  if (app.get(\"env\") !== \"development\") {\r\n    serveStatic(app);\r\n  }\r\n\r\n  // Listen\r\n  const port = parseInt(process.env.PORT || \"5000\", 10);\r\n  server.listen(\r\n    { port, host: \"0.0.0.0\" },\r\n    async () => {\r\n      log(`serving on port ${port}`);\r\n\r\n      // فقط در حالت dev یک بار setupVite را اجرا کن\r\n      if (app.get(\"env\") === \"development\") {\r\n        try {\r\n          await setupVite(app, server);\r\n          log(\"Vite development server setup complete\");\r\n        } catch (error) {\r\n          console.error(\"Vite setup failed:\", error);\r\n        }\r\n      }\r\n    }\r\n  );\r\n})();\r\n","size_bytes":3796},"client/src/components/forms/form-modal.tsx":{"content":"// FormModal.tsx\r\nimport { useState } from \"react\";\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogHeader,\r\n  DialogTitle,\r\n} from \"@/components/ui/dialog\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { useAuth } from \"@/hooks/useAuth\";\r\nimport type { Form } from \"@shared/schema\";\r\n\r\n// Import your custom form components\r\nimport EvaluationFormHStyled from \"@/components/forms/form-H\";\r\nimport EvaluationFormE from \"@/components/forms/Form-E\";\r\nimport EvaluationFormD from \"@/components/forms/form-D\";\r\nimport MonographEvaluationForm from \"@/components/forms/form-k\";\r\nimport EvaluationFormG from \"@/components/forms/form-G\";\r\nimport MonographEvaluationFormC from \"@/components/forms/form-c\";\r\nimport TeacherActivityForm from \"@/components/forms/formJ\";\r\nimport ChecklistForm from \"@/components/forms/formF\";\r\nimport RotationForm from \"@/components/forms/formI\";\r\ninterface FormModalProps {\r\n  form: Form;\r\n  onClose: () => void;\r\n  trainerId?: string; // 👈 اضافه کن\r\n}\r\n\r\nconst FORM_TITLES: Record<string, string> = {\r\n  J: \"Initial Assessment & Orientation\",\r\n  F: \"Mid-Training Evaluation\",\r\n  D: \"Clinical Skills Assessment\",\r\n  I: \"Research & Academic Progress\",\r\n  G: \"Communication Skills Review\",\r\n  E: \"Ethics & Professionalism\",\r\n  C: \"Case Presentation Evaluation\",\r\n  H: \"Hands-on Procedure Assessment\",\r\n  K: \"Final Competency Evaluation\",\r\n};\r\n\r\nexport default function FormModal({\r\n  form,\r\n  onClose,\r\n  trainerId,\r\n}: FormModalProps) {\r\n  if (!form) return null; // ← اینجا اضافه کنید\r\n  const { user } = useAuth();\r\n  const [formData, setFormData] = useState((form.formData as any) || {});\r\n\r\n  const isReadOnly = user?.role !== \"admin\";\r\n  const formTitle = FORM_TITLES[form.formType] || \"Form Details\";\r\n\r\n  const handleSave = () => {\r\n    // TODO: Implement form save functionality\r\n    console.log(\"Saving form:\", formData);\r\n    onClose();\r\n  };\r\n\r\n  const renderFormContent = () => {\r\n    switch (form.formType) {\r\n      case \"J\":\r\n        return <TeacherActivityForm trainerIdProp={trainerId} />;\r\n      case \"F\":\r\n        return <ChecklistForm trainerIdProp={trainerId} />;\r\n      case \"I\":\r\n        return <RotationForm trainerIdProp={trainerId} />;\r\n      case \"H\":\r\n        return <EvaluationFormHStyled trainerIdProp={trainerId} />;\r\n      case \"E\":\r\n        return <EvaluationFormE trainerIdProp={trainerId} />;\r\n      case \"D\":\r\n        return <EvaluationFormD trainerIdProp={trainerId} />;\r\n      case \"K\":\r\n        return <MonographEvaluationForm trainerIdProp={trainerId} />;\r\n      case \"G\":\r\n        return <EvaluationFormG trainerIdProp={trainerId} />;\r\n      case \"C\":\r\n        return <MonographEvaluationFormC trainerIdProp={trainerId} />;\r\n      default:\r\n        return (\r\n          <div className=\"space-y-4\">\r\n            <div className=\"grid grid-cols-2 gap-4\">\r\n              <div>\r\n                <Label htmlFor=\"assessmentDate\">Assessment Date</Label>\r\n                <Input\r\n                  id=\"assessmentDate\"\r\n                  type=\"date\"\r\n                  value={formData.assessmentDate || \"\"}\r\n                  onChange={(e) =>\r\n                    setFormData({ ...formData, assessmentDate: e.target.value })\r\n                  }\r\n                  readOnly={isReadOnly}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Label htmlFor=\"supervisor\">Supervisor</Label>\r\n                <Select\r\n                  value={formData.supervisorId || \"\"}\r\n                  onValueChange={(value) =>\r\n                    setFormData({ ...formData, supervisorId: value })\r\n                  }\r\n                  disabled={isReadOnly}\r\n                >\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder=\"Select supervisor\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"1\">Dr. Michael Chen</SelectItem>\r\n                    <SelectItem value=\"2\">Dr. Emily Rodriguez</SelectItem>\r\n                    <SelectItem value=\"3\">Dr. Sarah Wilson</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n            </div>\r\n\r\n            <div>\r\n              <Label htmlFor=\"rating\">Overall Rating</Label>\r\n              <Select\r\n                value={formData.rating || \"\"}\r\n                onValueChange={(value) =>\r\n                  setFormData({ ...formData, rating: value })\r\n                }\r\n                disabled={isReadOnly}\r\n              >\r\n                <SelectTrigger>\r\n                  <SelectValue placeholder=\"Select rating\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"excellent\">Excellent</SelectItem>\r\n                  <SelectItem value=\"good\">Good</SelectItem>\r\n                  <SelectItem value=\"satisfactory\">Satisfactory</SelectItem>\r\n                  <SelectItem value=\"needs-improvement\">\r\n                    Needs Improvement\r\n                  </SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n\r\n            <div>\r\n              <Label htmlFor=\"strengths\">Strengths</Label>\r\n              <Textarea\r\n                id=\"strengths\"\r\n                placeholder=\"Describe the resident's strengths...\"\r\n                value={formData.strengths || \"\"}\r\n                onChange={(e) =>\r\n                  setFormData({ ...formData, strengths: e.target.value })\r\n                }\r\n                readOnly={isReadOnly}\r\n                className=\"min-h-[80px]\"\r\n              />\r\n            </div>\r\n\r\n            <div>\r\n              <Label htmlFor=\"areasForImprovement\">Areas for Improvement</Label>\r\n              <Textarea\r\n                id=\"areasForImprovement\"\r\n                placeholder=\"Describe areas that need improvement...\"\r\n                value={formData.areasForImprovement || \"\"}\r\n                onChange={(e) =>\r\n                  setFormData({\r\n                    ...formData,\r\n                    areasForImprovement: e.target.value,\r\n                  })\r\n                }\r\n                readOnly={isReadOnly}\r\n                className=\"min-h-[80px]\"\r\n              />\r\n            </div>\r\n          </div>\r\n        );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Dialog open={true} onOpenChange={onClose}>\r\n      <DialogContent className=\"max-w-3xl max-h-[80vh] overflow-y-auto\">\r\n        <DialogHeader>\r\n          <DialogTitle>\r\n            Form {form.formType} - {formTitle}\r\n          </DialogTitle>\r\n        </DialogHeader>\r\n\r\n        <div className=\"mt-4\">{renderFormContent()}</div>\r\n\r\n        <div className=\"flex items-center justify-end pt-4 border-t border-slate-200 mt-6 space-x-3\">\r\n          <Button variant=\"outline\" onClick={onClose}>\r\n            {isReadOnly ? \"Close\" : \"Cancel\"}\r\n          </Button>\r\n          {!isReadOnly && (\r\n            <Button\r\n              onClick={handleSave}\r\n              className=\"bg-hospital-green-600 hover:bg-hospital-green-700\"\r\n            >\r\n              Save Changes\r\n            </Button>\r\n          )}\r\n        </div>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}\r\n","size_bytes":7419},"server/demoAuth.ts":{"content":"import type { Express, RequestHandler } from \"express\";\nimport session from \"express-session\";\nimport MemoryStore from \"memorystore\";\nimport { storage } from \"./storage\";\nimport { DEMO_CREDENTIALS } from \"@shared/schema\";\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const MemoryStoreSession = MemoryStore(session);\n  \n  return session({\n    secret: process.env.SESSION_SECRET || 'demo-secret-key-for-hospital-system',\n    store: new MemoryStoreSession({\n      checkPeriod: 86400000, // prune expired entries every 24h\n    }),\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: false, // Set to false for development\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nexport async function setupDemoAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n\n  // Demo login endpoint\n  app.post(\"/api/login\", async (req, res) => {\n    const { username, password } = req.body;\n    \n    // Check demo credentials first\n    const isAdmin = username === DEMO_CREDENTIALS.admin.username && \n                   password === DEMO_CREDENTIALS.admin.password;\n    const isViewer = username === DEMO_CREDENTIALS.viewer.username && \n                    password === DEMO_CREDENTIALS.viewer.password;\n\n    if (isAdmin || isViewer) {\n      const credentials = isAdmin ? DEMO_CREDENTIALS.admin : DEMO_CREDENTIALS.viewer;\n      \n      // Store user in session\n      (req.session as any).user = {\n        claims: {\n          sub: credentials.id,\n          email: credentials.username,\n          first_name: credentials.firstName,\n          last_name: credentials.lastName,\n        },\n        expires_at: Math.floor(Date.now() / 1000) + (7 * 24 * 60 * 60), // 1 week from now\n      };\n\n      // Also ensure user exists in database\n      await storage.upsertUser({\n        _id: credentials.id,\n        email: credentials.username,\n        firstName: credentials.firstName,\n        lastName: credentials.lastName,\n        role: credentials.role,\n      });\n\n      res.json({ \n        success: true, \n        user: {\n          _id: credentials.id,\n          email: credentials.username,\n          firstName: credentials.firstName,\n          lastName: credentials.lastName,\n          role: credentials.role\n        }\n      });\n    } else {\n      // Check for registered users in database\n      try {\n        const user = await storage.getUserByEmail(username);\n        \n        if (user && user.password === password) {\n          // Store user in session\n          (req.session as any).user = {\n            claims: {\n              sub: user._id,\n              email: user.email,\n              first_name: user.firstName,\n              last_name: user.lastName,\n            },\n            expires_at: Math.floor(Date.now() / 1000) + (7 * 24 * 60 * 60), // 1 week from now\n          };\n\n          res.json({ \n            success: true, \n            user: {\n              _id: user._id,\n              email: user.email,\n              firstName: user.firstName,\n              lastName: user.lastName,\n              role: user.role\n            }\n          });\n        } else {\n          res.status(401).json({ message: \"Invalid credentials\" });\n        }\n      } catch (error) {\n        console.error('Error checking user credentials:', error);\n        res.status(401).json({ message: \"Invalid credentials\" });\n      }\n    }\n  });\n\n  // Demo logout endpoint\n  app.get(\"/api/logout\", (req, res) => {\n    req.session.destroy(() => {\n      res.redirect(\"/\");\n    });\n  });\n\n  // Get current demo user\n  app.get(\"/api/demo-info\", (req, res) => {\n    res.json({\n      admin: {\n        username: DEMO_CREDENTIALS.admin.username,\n        password: DEMO_CREDENTIALS.admin.password,\n      },\n      viewer: {\n        username: DEMO_CREDENTIALS.viewer.username,  \n        password: DEMO_CREDENTIALS.viewer.password,\n      }\n    });\n  });\n}\n\nexport const isDemoAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = (req.session as any)?.user;\n\n  if (!user || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now > user.expires_at) {\n    return res.status(401).json({ message: \"Session expired\" });\n  }\n\n  // Add user to request for compatibility\n  (req as any).user = user;\n  return next();\n};","size_bytes":4364},"client/src/index.css":{"content":"/* Dari/Farsi Font Support */\r\n@import url('https://fonts.googleapis.com/css2?family=Vazirmatn:wght@100;200;300;400;500;600;700;800;900&display=swap');\r\n\r\n@tailwind base;\r\n@tailwind components;\r\n@tailwind utilities;\r\n\r\n/* RTL Support */\r\nhtml[dir=\"rtl\"] * {\r\n  direction: rtl;\r\n}\r\n\r\nhtml[dir=\"rtl\"] .ltr {\r\n  direction: ltr;\r\n}\r\n\r\n:root {\r\n  --background: hsl(0 0% 100%);\r\n  --foreground: hsl(210 25% 7.8431%);\r\n  --card: hsl(180 6.6667% 97.0588%);\r\n  --card-foreground: hsl(210 25% 7.8431%);\r\n  --popover: hsl(0 0% 100%);\r\n  --popover-foreground: hsl(210 25% 7.8431%);\r\n  --primary: hsl(203.8863 88.2845% 53.1373%);\r\n  --primary-foreground: hsl(0 0% 100%);\r\n  --secondary: hsl(210 25% 7.8431%);\r\n  --secondary-foreground: hsl(0 0% 100%);\r\n  --muted: hsl(240 1.9608% 90%);\r\n  --muted-foreground: hsl(210 25% 7.8431%);\r\n  --accent: hsl(211.5789 51.3514% 92.7451%);\r\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\r\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\r\n  --destructive-foreground: hsl(0 0% 100%);\r\n  --border: hsl(201.4286 30.4348% 90.9804%);\r\n  --input: hsl(200 23.0769% 97.4510%);\r\n  --ring: hsl(202.8169 89.1213% 53.1373%);\r\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\r\n  --chart-2: hsl(159.7826 100% 36.0784%);\r\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\r\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\r\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\r\n  --sidebar: hsl(180 6.6667% 97.0588%);\r\n  --sidebar-foreground: hsl(210 25% 7.8431%);\r\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\r\n  --sidebar-primary-foreground: hsl(0 0% 100%);\r\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\r\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\r\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\r\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\r\n  --font-sans: Inter, sans-serif;\r\n  --font-serif: Georgia, serif;\r\n  --font-mono: Menlo, monospace;\r\n  --radius: 1.3rem;\r\n  --hospital-green-50: hsl(152 76% 96%);\r\n  --hospital-green-100: hsl(148 79% 90%);\r\n  --hospital-green-200: hsl(149 75% 80%);\r\n  --hospital-green-300: hsl(147 71% 67%);\r\n  --hospital-green-400: hsl(142 69% 58%);\r\n  --hospital-green-500: hsl(142 71% 45%);\r\n  --hospital-green-600: hsl(142 76% 36%);\r\n  --hospital-green-700: hsl(142 72% 29%);\r\n  --hospital-green-800: hsl(143 64% 24%);\r\n  --hospital-green-900: hsl(144 61% 20%);\r\n}\r\n\r\n.dark {\r\n  --background: hsl(0 0% 0%);\r\n  --foreground: hsl(200 6.6667% 91.1765%);\r\n  --card: hsl(228 9.8039% 10%);\r\n  --card-foreground: hsl(0 0% 85.0980%);\r\n  --popover: hsl(0 0% 0%);\r\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\r\n  --primary: hsl(203.7736 87.6033% 52.5490%);\r\n  --primary-foreground: hsl(0 0% 100%);\r\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\r\n  --secondary-foreground: hsl(210 25% 7.8431%);\r\n  --muted: hsl(0 0% 9.4118%);\r\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\r\n  --accent: hsl(205.7143 70% 7.8431%);\r\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\r\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\r\n  --destructive-foreground: hsl(0 0% 100%);\r\n  --border: hsl(210 5.2632% 14.9020%);\r\n  --input: hsl(207.6923 27.6596% 18.4314%);\r\n  --ring: hsl(202.8169 89.1213% 53.1373%);\r\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\r\n  --chart-2: hsl(159.7826 100% 36.0784%);\r\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\r\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\r\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\r\n  --sidebar: hsl(228 9.8039% 10%);\r\n  --sidebar-foreground: hsl(0 0% 85.0980%);\r\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\r\n  --sidebar-primary-foreground: hsl(0 0% 100%);\r\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\r\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\r\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\r\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\r\n  --font-sans: Inter, sans-serif;\r\n  --font-serif: Georgia, serif;\r\n  --font-mono: Menlo, monospace;\r\n  --radius: 1.3rem;\r\n}\r\n\r\n@layer base {\r\n  * {\r\n    @apply border-border;\r\n  }\r\n\r\n  body {\r\n    @apply font-sans antialiased bg-background text-foreground;\r\n    font-family: 'Vazirmatn', 'Inter', sans-serif;\r\n  }\r\n}\r\n\r\n@layer utilities {\r\n  .bg-hospital-green-50 {\r\n    background-color: var(--hospital-green-50);\r\n  }\r\n  .bg-hospital-green-100 {\r\n    background-color: var(--hospital-green-100);\r\n  }\r\n  .bg-hospital-green-200 {\r\n    background-color: var(--hospital-green-200);\r\n  }\r\n  .bg-hospital-green-300 {\r\n    background-color: var(--hospital-green-300);\r\n  }\r\n  .bg-hospital-green-400 {\r\n    background-color: var(--hospital-green-400);\r\n  }\r\n  .bg-hospital-green-500 {\r\n    background-color: var(--hospital-green-500);\r\n  }\r\n  .bg-hospital-green-600 {\r\n    background-color: var(--hospital-green-600);\r\n  }\r\n  .bg-hospital-green-700 {\r\n    background-color: var(--hospital-green-700);\r\n  }\r\n  .bg-hospital-green-800 {\r\n    background-color: var(--hospital-green-800);\r\n  }\r\n  .bg-hospital-green-900 {\r\n    background-color: var(--hospital-green-900);\r\n  }\r\n  \r\n  .text-hospital-green-50 {\r\n    color: var(--hospital-green-50);\r\n  }\r\n  .text-hospital-green-100 {\r\n    color: var(--hospital-green-100);\r\n  }\r\n  .text-hospital-green-200 {\r\n    color: var(--hospital-green-200);\r\n  }\r\n  .text-hospital-green-300 {\r\n    color: var(--hospital-green-300);\r\n  }\r\n  .text-hospital-green-400 {\r\n    color: var(--hospital-green-400);\r\n  }\r\n  .text-hospital-green-500 {\r\n    color: var(--hospital-green-500);\r\n  }\r\n  .text-hospital-green-600 {\r\n    color: var(--hospital-green-600);\r\n  }\r\n  .text-hospital-green-700 {\r\n    color: var(--hospital-green-700);\r\n  }\r\n  .text-hospital-green-800 {\r\n    color: var(--hospital-green-800);\r\n  }\r\n  .text-hospital-green-900 {\r\n    color: var(--hospital-green-900);\r\n  }\r\n  \r\n  .border-hospital-green-50 {\r\n    border-color: var(--hospital-green-50);\r\n  }\r\n  .border-hospital-green-100 {\r\n    border-color: var(--hospital-green-100);\r\n  }\r\n  .border-hospital-green-200 {\r\n    border-color: var(--hospital-green-200);\r\n  }\r\n  .border-hospital-green-300 {\r\n    border-color: var(--hospital-green-300);\r\n  }\r\n  .border-hospital-green-400 {\r\n    border-color: var(--hospital-green-400);\r\n  }\r\n  .border-hospital-green-500 {\r\n    border-color: var(--hospital-green-500);\r\n  }\r\n  .border-hospital-green-600 {\r\n    border-color: var(--hospital-green-600);\r\n  }\r\n  .border-hospital-green-700 {\r\n    border-color: var(--hospital-green-700);\r\n  }\r\n  .border-hospital-green-800 {\r\n    border-color: var(--hospital-green-800);\r\n  }\r\n  .border-hospital-green-900 {\r\n    border-color: var(--hospital-green-900);\r\n  }\r\n\r\n  .hover\\:bg-hospital-green-50:hover {\r\n    background-color: var(--hospital-green-50);\r\n  }\r\n  .hover\\:bg-hospital-green-100:hover {\r\n    background-color: var(--hospital-green-100);\r\n  }\r\n  .hover\\:bg-hospital-green-200:hover {\r\n    background-color: var(--hospital-green-200);\r\n  }\r\n  .hover\\:bg-hospital-green-300:hover {\r\n    background-color: var(--hospital-green-300);\r\n  }\r\n  .hover\\:bg-hospital-green-400:hover {\r\n    background-color: var(--hospital-green-400);\r\n  }\r\n  .hover\\:bg-hospital-green-500:hover {\r\n    background-color: var(--hospital-green-500);\r\n  }\r\n  .hover\\:bg-hospital-green-600:hover {\r\n    background-color: var(--hospital-green-600);\r\n  }\r\n  .hover\\:bg-hospital-green-700:hover {\r\n    background-color: var(--hospital-green-700);\r\n  }\r\n  .hover\\:bg-hospital-green-800:hover {\r\n    background-color: var(--hospital-green-800);\r\n  }\r\n  .hover\\:bg-hospital-green-900:hover {\r\n    background-color: var(--hospital-green-900);\r\n  }\r\n\r\n  .hover\\:text-hospital-green-50:hover {\r\n    color: var(--hospital-green-50);\r\n  }\r\n  .hover\\:text-hospital-green-100:hover {\r\n    color: var(--hospital-green-100);\r\n  }\r\n  .hover\\:text-hospital-green-200:hover {\r\n    color: var(--hospital-green-200);\r\n  }\r\n  .hover\\:text-hospital-green-300:hover {\r\n    color: var(--hospital-green-300);\r\n  }\r\n  .hover\\:text-hospital-green-400:hover {\r\n    color: var(--hospital-green-400);\r\n  }\r\n  .hover\\:text-hospital-green-500:hover {\r\n    color: var(--hospital-green-500);\r\n  }\r\n  .hover\\:text-hospital-green-600:hover {\r\n    color: var(--hospital-green-600);\r\n  }\r\n  .hover\\:text-hospital-green-700:hover {\r\n    color: var(--hospital-green-700);\r\n  }\r\n  .hover\\:text-hospital-green-800:hover {\r\n    color: var(--hospital-green-800);\r\n  }\r\n  .hover\\:text-hospital-green-900:hover {\r\n    color: var(--hospital-green-900);\r\n  }\r\n\r\n  .hover\\:border-hospital-green-300:hover {\r\n    border-color: var(--hospital-green-300);\r\n  }\r\n}\r\n","size_bytes":8488},"client/src/components/forms/form-D.tsx":{"content":"import React, { useState, useEffect } from \"react\";\r\ninterface ConferenceRow {\r\n  id: number;\r\n  conferenceTitle: string;\r\n  score: string;\r\n  date: string;\r\n  teacherName: string;\r\n}\r\n\r\ninterface EvaluationFormDProps {\r\n  trainerIdProp?: string; // ✅ گرفتن trainerId از والد (در صورت وجود)\r\n}\r\n\r\nexport default function EvaluationFormD({\r\n  trainerIdProp,\r\n}: EvaluationFormDProps) {\r\nconst [trainerId, setTrainerId] = useState<string | null>(null);\r\n  // 🧾 state‌های فرم\r\n  const [year, setYear] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [parentType, setparentType] = useState(\"\");\r\n  const [department, setDepartment] = useState(\"\");\r\n  const [trainingYear, setTrainingYear] = useState(\"\");\r\n\r\n  const [rows, setRows] = useState<ConferenceRow[]>([\r\n    { id: 1, conferenceTitle: \"\", score: \"\", date: \"\", teacherName: \"\" },\r\n    { id: 2, conferenceTitle: \"\", score: \"\", date: \"\", teacherName: \"\" },\r\n    { id: 3, conferenceTitle: \"\", score: \"\", date: \"\", teacherName: \"\" },\r\n    { id: 4, conferenceTitle: \"\", score: \"\", date: \"\", teacherName: \"\" },\r\n  ]);\r\n\r\n  const inputClass = \"border px-2 py-1 w-full text-center\";\r\n\r\n  // 🧩 تابع برای تغییر ردیف‌های جدول\r\n  const handleChangeRow = <K extends keyof ConferenceRow>(\r\n    index: number,\r\n    field: K,\r\n    value: ConferenceRow[K]\r\n  ) => {\r\n    setRows((prev) =>\r\n      prev.map((row, i) => (i === index ? { ...row, [field]: value } : row))\r\n    );\r\n  };\r\n///////////////////////////////////\r\n useEffect(() => {\r\n    if (!trainerIdProp) {\r\n      alert(\"هیچ ترینر فعالی یافت نشد!\");\r\n      return;\r\n    }\r\n\r\n    setTrainerId(trainerIdProp);\r\n\r\n    // 👇 دریافت داده از دیتابیس\r\n    const fetchTrainerInfo = async () => {\r\n      try {\r\n        const res = await fetch(\r\n          `http://localhost:5000/api/trainers/${trainerIdProp}`\r\n        );\r\n        const result = await res.json();\r\n\r\n        if (!res.ok) throw new Error(result.message || \"خطا در دریافت ترینر\");\r\n\r\n        // فرض می‌کنیم دیتابیس این فیلدها را دارد:\r\n        // name, fatherName, trainingYear\r\n        setName(result.name || \"\");\r\n        setparentType(result.parentType || \"\");\r\n        setTrainingYear(result.trainingYear || \"\");\r\n        setDepartment(result.department||\"\");\r\n      } catch (err) {\r\n        console.error(\"خطا در دریافت ترینر:\", err);\r\n        alert(\"خطا در دریافت اطلاعات ترینر ❌\");\r\n      }\r\n    };\r\n\r\n    fetchTrainerInfo();\r\n  }, [trainerIdProp]);\r\n///////////////////////////////\r\n  // 💾 ارسال داده به سرور\r\n  // 💾 ارسال داده به سرور با ولیدیشن کامل\r\n  const handleSubmit = async () => {\r\n    if (!trainerId) {\r\n      alert(\"❌ Trainer ID خالی است و نمی‌توان فرم را ذخیره کرد.\");\r\n      return;\r\n    }\r\n\r\n    // 🔹 بررسی فیلدهای عمومی (اطلاعات فردی)\r\n    const requiredFields = {\r\n      year,\r\n      name,\r\n      parentType,\r\n      department,\r\n      trainingYear,\r\n    };\r\n\r\n    for (const [key, value] of Object.entries(requiredFields)) {\r\n      if (!value.trim()) {\r\n        alert(\"⚠️ لطفاً تمام فیلدهای اطلاعات عمومی را پُر کنید.\");\r\n        return;\r\n      }\r\n    }\r\n\r\n    // 🔹 بررسی تمام ردیف‌های جدول کنفرانس‌ها\r\n    for (let i = 0; i < rows.length; i++) {\r\n      const row = rows[i];\r\n      if (\r\n        !row.conferenceTitle.trim() ||\r\n        !row.score.trim() ||\r\n        !row.date.trim() ||\r\n        !row.teacherName.trim()\r\n      ) {\r\n        alert(`⚠️ لطفاً تمام خانه‌های ردیف شماره ${i + 1} را پُر کنید.`);\r\n        return;\r\n      }\r\n    }\r\n\r\n    // ✅ اگر همه‌چیز پُر است، payload بساز و ارسال کن\r\n    const conferences = rows.map(\r\n      ({ conferenceTitle, score, date, teacherName }) => ({\r\n        conferenceTitle,\r\n        score,\r\n        date,\r\n        teacherName,\r\n      })\r\n    );\r\n\r\n    const payload = {\r\n      trainer: trainerId,\r\n      year,\r\n      name,\r\n      parentType,\r\n      department,\r\n      trainingYear,\r\n      conferences,\r\n    };\r\n\r\n    console.log(\"📤 ارسال داده:\", payload);\r\n\r\n    try {\r\n      const res = await fetch(\"http://localhost:5000/api/conference\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(payload),\r\n      });\r\n\r\n      const data = await res.json();\r\n\r\n      if (!res.ok) {\r\n        alert(\"❌ خطا در ذخیره: \" + (data.message || \"Unknown error\"));\r\n        console.error(\"Server error:\", data);\r\n        return;\r\n      }\r\n\r\n      alert(\"✅ فرم با موفقیت ذخیره شد!\");\r\n\r\n      // 🧹 ریست فرم بعد از ذخیره موفق\r\n      setYear(\"\");\r\n      setName(\"\");\r\n      setparentType(\"\");\r\n      setDepartment(\"\");\r\n      setTrainingYear(\"\");\r\n      setRows([\r\n        { id: 1, conferenceTitle: \"\", score: \"\", date: \"\", teacherName: \"\" },\r\n        { id: 2, conferenceTitle: \"\", score: \"\", date: \"\", teacherName: \"\" },\r\n        { id: 3, conferenceTitle: \"\", score: \"\", date: \"\", teacherName: \"\" },\r\n        { id: 4, conferenceTitle: \"\", score: \"\", date: \"\", teacherName: \"\" },\r\n      ]);\r\n    } catch (err) {\r\n      console.error(\"❌ خطا در ارسال:\", err);\r\n      alert(\"❌ مشکل در ارتباط با سرور\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-6xl mx-auto bg-white shadow-lg rounded-2xl p-6 mt-6\">\r\n      <h2 className=\"text-xl font-bold text-center mb-4\">\r\n        فرم ارزشیابی کنفرانس\r\n      </h2>\r\n\r\n      {/* پیام وضعیت trainer */}\r\n      {!trainerId && (\r\n        <p className=\"text-red-500 text-center mb-4\">\r\n          در حال دریافت شناسه ترینر...\r\n        </p>\r\n      )}\r\n\r\n      {/* اطلاعات عمومی */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4 mb-6\">\r\n        <div>\r\n          <label>سال</label>\r\n          <input\r\n            type=\"text\"\r\n            value={year}\r\n            onChange={(e) => setYear(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>اسم</label>\r\n          <input\r\n            type=\"text\"\r\n            value={name}\r\n            onChange={(e) => setName(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>ولد</label>\r\n          <input\r\n            type=\"text\"\r\n            value={parentType}\r\n            onChange={(e) => setparentType(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>دیپارتمنت</label>\r\n          <input\r\n            type=\"text\"\r\n            value={department}\r\n            onChange={(e) => setDepartment(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>سال تریننگ</label>\r\n          <input\r\n            type=\"text\"\r\n            value={trainingYear}\r\n            onChange={(e) => setTrainingYear(e.target.value)}\r\n            className={inputClass}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* جدول کنفرانس‌ها */}\r\n      <div className=\"overflow-x-auto\">\r\n        <table className=\"table-auto w-full border-collapse border text-center\">\r\n          <thead>\r\n            <tr className=\"bg-gray-100\">\r\n              <th className=\"border px-2 py-2\">شماره</th>\r\n              <th className=\"border px-2 py-2\">موضوع کنفرانس</th>\r\n              <th className=\"border px-2 py-2\">نمره داده شده</th>\r\n              <th className=\"border px-2 py-2\">تاریخ ارائه</th>\r\n              <th className=\"border px-2 py-2\">اسم و امضا استاد</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {rows.map((row, index) => (\r\n              <tr key={row.id}>\r\n                <td className=\"border px-2 py-2\">{row.id}</td>\r\n                <td className=\"border px-2 py-2\">\r\n                  <input\r\n                    type=\"text\"\r\n                    value={row.conferenceTitle}\r\n                    onChange={(e) =>\r\n                      handleChangeRow(index, \"conferenceTitle\", e.target.value)\r\n                    }\r\n                    className={inputClass}\r\n                  />\r\n                </td>\r\n                <td className=\"border px-2 py-2\">\r\n                  <input\r\n                    type=\"number\"\r\n                    value={row.score}\r\n                    onChange={(e) =>\r\n                      handleChangeRow(index, \"score\", e.target.value)\r\n                    }\r\n                    className={inputClass}\r\n                  />\r\n                </td>\r\n                <td className=\"border px-2 py-2\">\r\n                  <input\r\n                    type=\"text\"\r\n                    placeholder=\"تاریخ\"\r\n                    value={row.date}\r\n                    onChange={(e) =>\r\n                      handleChangeRow(index, \"date\", e.target.value)\r\n                    }\r\n                    className={inputClass}\r\n                  />\r\n                </td>\r\n                <td className=\"border px-2 py-2\">\r\n                  <input\r\n                    type=\"text\"\r\n                    placeholder=\"نام استاد / امضا\"\r\n                    value={row.teacherName}\r\n                    onChange={(e) =>\r\n                      handleChangeRow(index, \"teacherName\", e.target.value)\r\n                    }\r\n                    className={inputClass}\r\n                  />\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      {/* دکمه ذخیره */}\r\n      <div className=\"text-center mt-6\">\r\n        <button\r\n          onClick={handleSubmit}\r\n          disabled={!trainerId}\r\n          className=\"px-6 py-2 bg-green-600 text-white rounded-xl hover:bg-green-700 transition disabled:opacity-50\"\r\n        >\r\n          ذخیره فرم\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","size_bytes":10244},"server/routes/form-C.ts":{"content":"// routes/monographRoutes.ts\r\nimport express from \"express\";\r\nimport { MonographController } from \"../controllers/form-C\";\r\n\r\nconst router = express.Router();\r\n\r\n// 🔹 ایجاد فرم جدید\r\nrouter.post(\"/\", MonographController.create);\r\n\r\n// 🔹 دریافت همه فرم‌ها یا فیلتر بر اساس trainerId\r\nrouter.get(\"/\", MonographController.getAll);\r\n\r\n// 🔹 دریافت فرم بر اساس ID\r\nrouter.get(\"/:id\", MonographController.getById);\r\n\r\n// 🔹 بروزرسانی فرم بر اساس ID\r\nrouter.put(\"/:id\", MonographController.update);\r\n\r\n// 🔹 حذف فرم بر اساس ID\r\nrouter.delete(\"/:id\", MonographController.delete);\r\n\r\nexport default router;\r\n","size_bytes":697},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight text-white px-4 py-2 rounded-lg\",\n    \"bg-hospital-green-600 text-center\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3921},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"server/models/Teacher.ts":{"content":"import mongoose, { Document, Schema } from \"mongoose\";\n\nexport interface ITeacher extends Document {\n  _id: string;\n  name: string;\n  lostname:string;\n  fatherName: string;\n  grandfatherName: string;\n  academicRank: string;\n  rankAchievementDate: Date;\n  trainerAppointmentDate: Date;\n  gender: string;\n  province: string;\n  subject: string;\n  position: string;\n  hospital: string;\n  dateOfBirth: Date;\n  idNumber: string;\n  dutyStartDate: Date;\n  contactInfo: string;\n  whatsappNumber: string;\n  emailAddress: string;\n  postCode: string;\n  appointmentType: string;\n  // department: string;\n  // experience: number;\n  status: string;\n  profileImageUrl?: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nconst teacherSchema = new Schema<ITeacher>({\n  name: { type: String, required: true },\n  lostname: { type: String, required: true },\n  fatherName: { type: String, required: true },\n  grandfatherName: { type: String, required: true },\n  academicRank: { type: String, required: true },\n  rankAchievementDate: { type: Date, required: true },\n  trainerAppointmentDate: { type: Date, required: true },\n  gender: { type: String, required: true },\n  province: { type: String, required: true },\n  subject: { type: String, required: true },\n  position: { type: String, required: true },\n  hospital: { type: String, required: true },\n  dateOfBirth: { type: Date, required: true },\n  idNumber: { type: String, required: true, unique: true },\n  dutyStartDate: { type: Date, required: true },\n  contactInfo: { type: String, required: true },\n  whatsappNumber: { type: String, required: true },\n  emailAddress: { type: String, required: true },\n  postCode: { type: String, required: true },\n  appointmentType: { type: String, required: true },\n  // department: { type: String, required: true },\n  // experience: { type: Number, required: true },\n  status: { type: String, required: true, default: \"active\" },\n  profileImageUrl: String,\n  createdAt: { type: Date, default: Date.now },\n  updatedAt: { type: Date, default: Date.now },\n});\n\nexport const TeacherModel = mongoose.model<ITeacher>(\"Teacher\", teacherSchema);","size_bytes":2105},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"server/models/index.ts":{"content":"export * from './User';\nexport * from './Resident';\nexport * from './Teacher';\nexport * from './Lecture';\nexport * from './Vacancy';","size_bytes":132},"server/routes/form-D.ts":{"content":"// routes/conferenceEvaluationRoutes.ts\r\nimport express from \"express\";\r\nimport { ConferenceEvaluationController } from \"../controllers/form-D\";\r\n\r\nconst router = express.Router();\r\n\r\n// 🔹 ایجاد فرم جدید\r\nrouter.post(\"/\", ConferenceEvaluationController.create);\r\n\r\n// 🔹 دریافت همه فرم‌ها یا فیلتر بر اساس trainerId\r\nrouter.get(\"/\", ConferenceEvaluationController.getAll);\r\n\r\n// 🔹 دریافت فرم بر اساس ID\r\nrouter.get(\"/:id\", ConferenceEvaluationController.getById);\r\n\r\n// 🔹 بروزرسانی فرم بر اساس ID\r\nrouter.put(\"/:id\", ConferenceEvaluationController.update);\r\n\r\n// 🔹 حذف فرم بر اساس ID\r\nrouter.delete(\"/:id\", ConferenceEvaluationController.delete);\r\n\r\nexport default router;\r\n","size_bytes":774},"server/controllers/form-C.ts":{"content":"import { Request, Response } from \"express\";\r\nimport mongoose from \"mongoose\";\r\nimport { MonographEvaluationForm } from \"../models/form-C\";\r\n\r\nexport class MonographController {\r\n  // 🟢 ایجاد فرم جدید\r\n  static async create(req: Request, res: Response) {\r\n    try {\r\n      const {\r\n        trainer,\r\n        evaluations,\r\n        name,\r\n        lastName,\r\n        parentType,\r\n        idNumber,\r\n        department,\r\n        trainingYear,\r\n        startYear,\r\n        date,\r\n        chef,\r\n        departmentHead,\r\n        hospitalHead,\r\n      } = req.body;\r\n\r\n      // 🔹 بررسی شناسه ترینر\r\n      if (!trainer) {\r\n        return res\r\n          .status(400)\r\n          .json({ message: \"Trainer ID الزامی است و فرم ذخیره نمی‌شود.\" });\r\n      }\r\n\r\n      // 🔹 بررسی مقادیر اجباری\r\n      const requiredFields = {\r\n        name,\r\n        lastName,\r\n        parentType,\r\n        idNumber,\r\n        department,\r\n        trainingYear,\r\n        startYear,\r\n        date,\r\n        chef,\r\n        departmentHead,\r\n        hospitalHead,\r\n      };\r\n\r\n      for (const [key, value] of Object.entries(requiredFields)) {\r\n        if (!value || value.toString().trim() === \"\") {\r\n          return res.status(400).json({\r\n            message: `فیلد \"${key}\" الزامی است و نمی‌تواند خالی باشد.`,\r\n          });\r\n        }\r\n      }\r\n\r\n      // 🔹 بررسی آرایه ارزیابی‌ها\r\n      if (!Array.isArray(evaluations) || evaluations.length === 0) {\r\n        return res\r\n          .status(400)\r\n          .json({ message: \"لیست ارزیابی‌ها خالی است یا ساختار اشتباه دارد.\" });\r\n      }\r\n\r\n      // 🔹 بررسی ObjectId معتبر\r\n      if (!mongoose.Types.ObjectId.isValid(trainer)) {\r\n        return res.status(400).json({ message: \"شناسه Trainer نامعتبر است.\" });\r\n      }\r\n\r\n      // 🔹 جلوگیری از ثبت فرم تکراری (بر اساس چندین مشخصه)\r\n      const existingForm = await MonographEvaluationForm.findOne({\r\n        trainer: new mongoose.Types.ObjectId(trainer),\r\n        name: name.trim(),\r\n        lastName: lastName.trim(),\r\n        parentType: parentType.trim(),\r\n        idNumber: idNumber.trim(),\r\n        department: department.trim(),\r\n        trainingYear: trainingYear.toString().trim(),\r\n        startYear: startYear.toString().trim(),\r\n      });\r\n\r\n      if (existingForm) {\r\n        return res.status(400).json({\r\n          message:\r\n            \"⚠️ فرم با همین مشخصات قبلاً ثبت شده و امکان ثبت مجدد وجود ندارد.\",\r\n          formId: existingForm._id,\r\n        });\r\n      }\r\n\r\n      // ✅ ایجاد فرم جدید\r\n      const newForm = new MonographEvaluationForm({\r\n        trainer: new mongoose.Types.ObjectId(trainer),\r\n        name,\r\n        lastName,\r\n        parentType,\r\n        idNumber,\r\n        department,\r\n        trainingYear,\r\n        startYear,\r\n        date,\r\n        chef,\r\n        departmentHead,\r\n        hospitalHead,\r\n        evaluations,\r\n      });\r\n\r\n      await newForm.save();\r\n      return res.status(201).json({\r\n        message: \"✅ فرم با موفقیت ذخیره شد.\",\r\n        id: newForm._id,\r\n      });\r\n    } catch (err) {\r\n      console.error(\"❌ خطا در ذخیره فرم مونوگراف:\", err);\r\n      return res.status(500).json({\r\n        message: \"خطا در ذخیره فرم. لطفاً بعداً دوباره تلاش کنید.\",\r\n        error: err instanceof Error ? err.message : err,\r\n      });\r\n    }\r\n  }\r\n\r\n  // 🟢 دریافت همه فرم‌ها (با فیلتر trainerId)\r\n  static async getAll(req: Request, res: Response) {\r\n    try {\r\n      const { trainerId } = req.query;\r\n      const filter = trainerId\r\n        ? { trainer: new mongoose.Types.ObjectId(trainerId as string) }\r\n        : {};\r\n\r\n      const forms = await MonographEvaluationForm.find(filter)\r\n        .populate(\"trainer\")\r\n        .sort({ createdAt: -1 });\r\n\r\n      res.status(200).json(forms);\r\n    } catch (err) {\r\n      console.error(\"❌ خطا در دریافت لیست فرم‌ها:\", err);\r\n      res.status(500).json({\r\n        message: \"خطا در دریافت داده‌ها\",\r\n        error: err instanceof Error ? err.message : err,\r\n      });\r\n    }\r\n  }\r\n\r\n  // 🟢 دریافت فرم بر اساس ID\r\n  static async getById(req: Request, res: Response) {\r\n    try {\r\n      const form = await MonographEvaluationForm.findById(\r\n        req.params.id\r\n      ).populate(\"trainer\");\r\n      if (!form)\r\n        return res.status(404).json({ message: \"فرم مورد نظر پیدا نشد.\" });\r\n      res.json(form);\r\n    } catch (err) {\r\n      console.error(\"❌ خطا در دریافت فرم:\", err);\r\n      res.status(500).json({\r\n        message: \"خطا در دریافت فرم\",\r\n        error: err instanceof Error ? err.message : err,\r\n      });\r\n    }\r\n  }\r\n\r\n  // 🟢 بروزرسانی فرم بر اساس ID\r\n  static async update(req: Request, res: Response) {\r\n    try {\r\n      const updated = await MonographEvaluationForm.findByIdAndUpdate(\r\n        req.params.id,\r\n        req.body,\r\n        { new: true }\r\n      );\r\n      if (!updated) return res.status(404).json({ message: \"فرم پیدا نشد.\" });\r\n\r\n      res.json({\r\n        message: \"✅ فرم با موفقیت بروزرسانی شد.\",\r\n        updated,\r\n      });\r\n    } catch (err) {\r\n      console.error(\"❌ خطا در بروزرسانی فرم:\", err);\r\n      res.status(500).json({\r\n        message: \"خطا در بروزرسانی فرم\",\r\n        error: err instanceof Error ? err.message : err,\r\n      });\r\n    }\r\n  }\r\n\r\n  // 🟢 حذف فرم بر اساس ID\r\n  static async delete(req: Request, res: Response) {\r\n    try {\r\n      const deleted = await MonographEvaluationForm.findByIdAndDelete(\r\n        req.params.id\r\n      );\r\n      if (!deleted) return res.status(404).json({ message: \"فرم پیدا نشد.\" });\r\n      res.json({ message: \"✅ فرم با موفقیت حذف شد.\" });\r\n    } catch (err) {\r\n      console.error(\"❌ خطا در حذف فرم:\", err);\r\n      res.status(500).json({\r\n        message: \"خطا در حذف فرم\",\r\n        error: err instanceof Error ? err.message : err,\r\n      });\r\n    }\r\n  }\r\n}\r\n","size_bytes":6370},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/forms/form-G.tsx":{"content":"import React, { useState, useEffect } from \"react\";\r\nimport { useTrainer } from \"@/context/TrainerContext\";\r\n\r\ntype Row = {\r\n  exam1Written: string;\r\n  exam1Practical: string;\r\n  exam2Written: string;\r\n  exam2Practical: string;\r\n  finalWritten: string;\r\n  finalPractical: string;\r\n  total: string;\r\n  teacherName: string;\r\n};\r\n\r\ntype RowField = keyof Row;\r\n\r\ninterface EvaluationFormGProps {\r\n  trainerIdProp?: string; // ✅ برای استفاده از prop یا context\r\n}\r\n\r\nexport default function EvaluationFormG({\r\n  trainerIdProp,\r\n}: EvaluationFormGProps) {\r\n  const [trainerId, setTrainerId] = useState<string | null>(null);\r\n  // 🔹 معلومات شخصی\r\n  const [personalInfo, setPersonalInfo] = useState({\r\n    Name: \"\",\r\n    parentType: \"\",\r\n    trainingYear: \"\",\r\n    year: \"\",\r\n    department: \"\",\r\n  });\r\n\r\n  // 🔹 جدول نمرات\r\n  const [rows, setRows] = useState<Row[]>(\r\n    Array.from({ length: 6 }, () => ({\r\n      exam1Written: \"\",\r\n      exam1Practical: \"\",\r\n      exam2Written: \"\",\r\n      exam2Practical: \"\",\r\n      finalWritten: \"\",\r\n      finalPractical: \"\",\r\n      total: \"\",\r\n      teacherName: \"\",\r\n    }))\r\n  );\r\n\r\n  //////////////////////////////////\r\n   useEffect(() => {\r\n        if (!trainerIdProp) {\r\n          alert(\"هیچ ترینر فعالی یافت نشد!\");\r\n          return;\r\n        }\r\n    \r\n        setTrainerId(trainerIdProp);\r\n    \r\n        // 👇 دریافت داده از دیتابیس\r\n        const fetchTrainerInfo = async () => {\r\n          try {\r\n            const res = await fetch(\r\n              `http://localhost:5000/api/trainers/${trainerIdProp}`\r\n            );\r\n            const result = await res.json();\r\n    \r\n            if (!res.ok) throw new Error(result.message || \"خطا در دریافت ترینر\");\r\n    \r\n            // فرض می‌کنیم دیتابیس این فیلدها را دارد:\r\n          setPersonalInfo({\r\n          Name: result.name || \"\",\r\n          parentType: result.fatherName || result.parentType || \"\",\r\n          trainingYear: result.trainingYear || \"\",\r\n          year: new Date().getFullYear().toString(), // یا اگر در DB داری، از result.year بگیر\r\n          department: result.department || \"\",\r\n          });\r\n          } catch (err) {\r\n            console.error(\"خطا در دریافت ترینر:\", err);\r\n            alert(\"خطا در دریافت اطلاعات ترینر ❌\");\r\n          }\r\n        };\r\n    \r\n        fetchTrainerInfo();\r\n      }, [trainerIdProp]);\r\n  /////////////////////////////////////\r\n  const inputClass = \"border px-2 py-2 w-full text-center\";\r\n\r\n  // 📊 تغییر هر خانه جدول\r\n  const handleChangeRow = (index: number, field: RowField, value: string) => {\r\n    const newRows = [...rows];\r\n    newRows[index][field] = value;\r\n\r\n    // محاسبه مجموع (total) برای ردیف‌های ۱ تا ۵\r\n    if (index < 5) {\r\n      const total =\r\n        (Number(newRows[index].exam1Written) || 0) +\r\n        (Number(newRows[index].exam1Practical) || 0) +\r\n        (Number(newRows[index].exam2Written) || 0) +\r\n        (Number(newRows[index].exam2Practical) || 0) +\r\n        (Number(newRows[index].finalWritten) || 0) +\r\n        (Number(newRows[index].finalPractical) || 0);\r\n      newRows[index].total = total.toString();\r\n    }\r\n\r\n    setRows(newRows);\r\n  };\r\n\r\n  // 🧩 تغییر اطلاعات شخصی\r\n  const handleChangePersonal = (\r\n    field: keyof typeof personalInfo,\r\n    value: string\r\n  ) => {\r\n    setPersonalInfo({ ...personalInfo, [field]: value });\r\n  };\r\n\r\n  // 🔹 محاسبه خودکار اوسط نمرات (ردیف ۶)\r\n  const averageRow = (() => {\r\n    const filledRows = rows.slice(0, 5);\r\n\r\n    const avg = (col1: keyof Row, col2: keyof Row) => {\r\n      const vals = filledRows.map(\r\n        (r) => (Number(r[col1]) || 0) + (Number(r[col2]) || 0)\r\n      );\r\n      return (vals.reduce((a, b) => a + b, 0) / filledRows.length).toFixed(2);\r\n    };\r\n\r\n    return {\r\n      exam1Combined: avg(\"exam1Written\", \"exam1Practical\"),\r\n      exam2Combined: avg(\"exam2Written\", \"exam2Practical\"),\r\n      finalCombined: avg(\"finalWritten\", \"finalPractical\"),\r\n      total: (\r\n        filledRows.reduce(\r\n          (sum, r) =>\r\n            sum +\r\n            (Number(r.exam1Written) || 0) +\r\n            (Number(r.exam1Practical) || 0) +\r\n            (Number(r.exam2Written) || 0) +\r\n            (Number(r.exam2Practical) || 0) +\r\n            (Number(r.finalWritten) || 0) +\r\n            (Number(r.finalPractical) || 0),\r\n          0\r\n        ) / filledRows.length\r\n      ).toFixed(2),\r\n    };\r\n  })();\r\n\r\n  // 💾 ذخیره فرم\r\n  const handleSubmit = async () => {\r\n    if (!trainerId) {\r\n      alert(\"❌ Trainer ID موجود نیست، فرم ذخیره نمی‌شود!\");\r\n      return;\r\n    }\r\n\r\n    // ✅ بررسی خالی نبودن تمام فیلدهای personalInfo\r\n    for (const [key, value] of Object.entries(personalInfo)) {\r\n      if (!value.trim()) {\r\n        alert(\"لطفاً تمام معلومات شخصی را وارد کنید.\");\r\n        return;\r\n      }\r\n    }\r\n\r\n    // ✅ بررسی اینکه تمام ردیف‌های 1 تا 5 پر شده باشند\r\n    for (let i = 0; i < 5; i++) {\r\n      const row = rows[i];\r\n      for (const key of [\r\n        \"exam1Written\",\r\n        \"exam1Practical\",\r\n        \"exam2Written\",\r\n        \"exam2Practical\",\r\n        \"finalWritten\",\r\n        \"finalPractical\",\r\n        \"teacherName\",\r\n      ] as (keyof Row)[]) {\r\n        const val = row[key];\r\n        if (!val.toString().trim()) {\r\n          alert(\r\n            `تمام خانه‌های نمره و نام استاد در ردیف ${i + 1} باید پُر شود.`\r\n          );\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    // ✅ تبدیل رشته‌ها به عدد برای ارسال مطمئن\r\n    const numericScores = rows.map((r) => ({\r\n      exam1Written: Number(r.exam1Written) || 0,\r\n      exam1Practical: Number(r.exam1Practical) || 0,\r\n      exam2Written: Number(r.exam2Written) || 0,\r\n      exam2Practical: Number(r.exam2Practical) || 0,\r\n      finalWritten: Number(r.finalWritten) || 0,\r\n      finalPractical: Number(r.finalPractical) || 0,\r\n      total: Number(r.total) || 0,\r\n      teacherName: r.teacherName || \"\",\r\n    }));\r\n\r\n    const payload = {\r\n      trainer: trainerId,\r\n      personalInfo,\r\n      scores: numericScores,\r\n    };\r\n\r\n    try {\r\n      const res = await fetch(\"http://localhost:5000/api/evaluationFormG\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(payload),\r\n      });\r\n\r\n      if (!res.ok) {\r\n        const errBody = await res.json().catch(() => null);\r\n        alert(\"❌ خطا در ذخیره فرم: \" + (errBody?.message || res.statusText));\r\n        console.error(\"Server error:\", errBody);\r\n        return;\r\n      }\r\n\r\n      alert(\"✅ فرم با موفقیت ذخیره شد!\");\r\n\r\n      // 🧹 پاک‌سازی فرم بعد از ذخیره\r\n      setPersonalInfo({\r\n        Name: \"\",\r\n        parentType: \"\",\r\n        trainingYear: \"\",\r\n        year: \"\",\r\n        department: \"\",\r\n      });\r\n      setRows(\r\n        Array.from({ length: 6 }, () => ({\r\n          exam1Written: \"\",\r\n          exam1Practical: \"\",\r\n          exam2Written: \"\",\r\n          exam2Practical: \"\",\r\n          finalWritten: \"\",\r\n          finalPractical: \"\",\r\n          total: \"\",\r\n          teacherName: \"\",\r\n        }))\r\n      );\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(\"❌ خطا در ذخیره فرم\");\r\n    }\r\n  };\r\n\r\n  // 🧱 UI\r\n  return (\r\n    <div className=\"max-w-6xl mx-auto bg-white shadow-lg rounded-2xl p-6 mt-6\">\r\n      <h2 className=\"text-xl font-bold text-center mb-4\">\r\n        فورم ارزیابی دستیار\r\n      </h2>\r\n\r\n      {!trainerId && (\r\n        <p className=\"text-center text-red-500 mb-4\">\r\n          در حال دریافت شناسه ترینر...\r\n        </p>\r\n      )}\r\n\r\n      {/* 📋 معلومات شخصی */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4 mb-6\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"نام\"\r\n          value={personalInfo.Name}\r\n          onChange={(e) => handleChangePersonal(\"Name\", e.target.value)}\r\n          className={inputClass}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"ولد\"\r\n          value={personalInfo.parentType}\r\n          onChange={(e) => handleChangePersonal(\"parentType\", e.target.value)}\r\n          className={inputClass}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"سال تریننگ\"\r\n          value={personalInfo.trainingYear}\r\n          onChange={(e) => handleChangePersonal(\"trainingYear\", e.target.value)}\r\n          className={inputClass}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"سال\"\r\n          value={personalInfo.year}\r\n          onChange={(e) => handleChangePersonal(\"year\", e.target.value)}\r\n          className={inputClass}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"دیپارتمنت\"\r\n          value={personalInfo.department}\r\n          onChange={(e) => handleChangePersonal(\"department\", e.target.value)}\r\n          className={inputClass}\r\n        />\r\n      </div>\r\n\r\n      {/* 📊 جدول نمرات */}\r\n      <table className=\"table-auto border-collapse border w-full text-center\">\r\n        <thead>\r\n          <tr>\r\n            <th rowSpan={2} className=\"border px-2 py-4\">\r\n              شماره\r\n            </th>\r\n            <th colSpan={2} className=\"border px-2 py-2\">\r\n              امتحان چهار ماه اول\r\n            </th>\r\n            <th colSpan={2} className=\"border px-2 py-2\">\r\n              امتحان چهار ماه دوم\r\n            </th>\r\n            <th colSpan={2} className=\"border px-2 py-2\">\r\n              امتحان نهایی\r\n            </th>\r\n            <th rowSpan={2} className=\"border px-2 py-4\">\r\n              مجموع\r\n            </th>\r\n            <th rowSpan={2} className=\"border px-2 py-4\">\r\n              نام استاد\r\n            </th>\r\n          </tr>\r\n          <tr>\r\n            <th className=\"border px-2 py-2\">تحریری</th>\r\n            <th className=\"border px-2 py-2\">عملی</th>\r\n            <th className=\"border px-2 py-2\">تحریری</th>\r\n            <th className=\"border px-2 py-2\">عملی</th>\r\n            <th className=\"border px-2 py-2\">تحریری</th>\r\n            <th className=\"border px-2 py-2\">عملی</th>\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          {rows.slice(0, 5).map((row, idx) => (\r\n            <tr key={idx}>\r\n              <td className=\"border px-2 py-4\">{idx + 1}</td>\r\n              {(\r\n                [\r\n                  \"exam1Written\",\r\n                  \"exam1Practical\",\r\n                  \"exam2Written\",\r\n                  \"exam2Practical\",\r\n                  \"finalWritten\",\r\n                  \"finalPractical\",\r\n                ] as RowField[]\r\n              ).map((field) => (\r\n                <td key={field}>\r\n                  <input\r\n                    type=\"number\"\r\n                    value={row[field]}\r\n                    onChange={(e) =>\r\n                      handleChangeRow(idx, field, e.target.value)\r\n                    }\r\n                    className={inputClass}\r\n                  />\r\n                </td>\r\n              ))}\r\n              <td>\r\n                <input\r\n                  type=\"text\"\r\n                  value={row.total}\r\n                  readOnly\r\n                  className={inputClass + \" bg-gray-100\"}\r\n                />\r\n              </td>\r\n              <td>\r\n                <input\r\n                  type=\"text\"\r\n                  value={row.teacherName}\r\n                  onChange={(e) =>\r\n                    handleChangeRow(idx, \"teacherName\", e.target.value)\r\n                  }\r\n                  className={inputClass}\r\n                />\r\n              </td>\r\n            </tr>\r\n          ))}\r\n\r\n          {/* ردیف اوسط نمرات */}\r\n          {/* ردیف اوسط نمرات */}\r\n          <tr className=\"bg-gray-100 font-bold\">\r\n            <td className=\"border px-2 py-2\">6</td>\r\n            <td colSpan={2} className=\"border px-2 py-2\">\r\n              {averageRow.exam1Combined}\r\n            </td>\r\n            <td colSpan={2} className=\"border px-2 py-2\">\r\n              {averageRow.exam2Combined}\r\n            </td>\r\n            <td colSpan={2} className=\"border px-2 py-2\">\r\n              {averageRow.finalCombined}\r\n            </td>\r\n            <td className=\"border px-2 py-2\">{averageRow.total}</td>\r\n            <td className=\"border px-2 py-2\"></td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n\r\n      <div className=\"text-center mt-6\">\r\n        <button\r\n          onClick={handleSubmit}\r\n          disabled={!trainerId}\r\n          className=\"px-6 py-2 bg-green-600 text-white rounded-xl hover:bg-green-700 transition disabled:opacity-50\"\r\n        >\r\n          ذخیره فرم\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","size_bytes":13143},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"server/controllers/teacherController.ts":{"content":"import { Request, Response } from 'express';\nimport { storage } from '../storage';\nimport { z } from 'zod';\n\nconst createTeacherSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  lostname: z.string().min(1, \"Last name is required\"),\n  fatherName: z.string().min(1, \"Father name is required\"),\n  grandfatherName: z.string().min(1, \"Grandfather name is required\"),\n  academicRank: z.string().min(1, \"Academic rank is required\"),\n  rankAchievementDate: z.string().transform((str) => new Date(str)),\n  trainerAppointmentDate: z.string().transform((str) => new Date(str)),\n  gender: z.string().min(1, \"Gender is required\"),\n  province: z.string().min(1, \"Province is required\"),\n  subject: z.string().min(1, \"Subject is required\"),\n  position: z.string().min(1, \"Position is required\"),\n  hospital: z.string().min(1, \"Hospital is required\"),\n  dateOfBirth: z.string().transform((str) => new Date(str)),\n  idNumber: z.string().min(1, \"ID number is required\"),\n  dutyStartDate: z.string().transform((str) => new Date(str)),\n  contactInfo: z.string().min(1, \"Contact info is required\"),\n  whatsappNumber: z.string().min(1, \"WhatsApp number is required\"),\n  emailAddress: z.string().email(\"Valid email is required\"),\n  postCode: z.string().min(1, \"Post code is required\"),\n  appointmentType: z.string().min(1, \"Appointment type is required\"),\n  // department: z.string().min(1, \"Department is required\"),\n  // experience: z.number().min(0, \"Experience must be non-negative\"),\n  status: z.string().optional().default(\"active\"),\n  profileImageUrl: z.string().optional(),\n});\n\nexport class TeacherController {\n  static async getAllTeachers(req: Request, res: Response) {\n    try {\n      const teachers = await storage.getAllTeachers();\n      res.json(teachers);\n    } catch (error) {\n      console.error('Error fetching teachers:', error);\n      res.status(500).json({ message: 'Failed to fetch teachers' });\n    }\n  }\n\n  static async getTeacherById(req: Request, res: Response) {\n    try {\n      const teacher = await storage.getTeacher(req.params.id);\n      if (!teacher) {\n        return res.status(404).json({ message: 'Teacher not found' });\n      }\n      res.json(teacher);\n    } catch (error) {\n      console.error('Error fetching teacher:', error);\n      res.status(500).json({ message: 'Failed to fetch teacher' });\n    }\n  }\n\n  static async createTeacher(req: any, res: Response) {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const validatedData = createTeacherSchema.parse(req.body);\n      const savedTeacher = await storage.createTeacher(validatedData);\n      \n      console.log('Teacher saved successfully:', savedTeacher._id);\n      res.status(201).json(savedTeacher);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        console.error('Validation error creating teacher:', error.errors);\n        return res.status(400).json({ \n          message: 'Validation error', \n          errors: error.errors \n        });\n      }\n      console.error(\"Error creating teacher:\", error);\n      res.status(500).json({ message: \"Failed to create teacher\" });\n    }\n  }\n\n  static async updateTeacher(req: any, res: Response) {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const validatedData = createTeacherSchema.partial().parse(req.body);\n      const teacher = await storage.updateTeacher(req.params.id, validatedData);\n      \n      res.json(teacher);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: 'Validation error', \n          errors: error.errors \n        });\n      }\n      console.error(\"Error updating teacher:\", error);\n      res.status(500).json({ message: \"Failed to update teacher\" });\n    }\n  }\n\n  static async deleteTeacher(req: any, res: Response) {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      await storage.deleteTeacher(req.params.id);\n      res.json({ message: \"Teacher deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting teacher:\", error);\n      res.status(500).json({ message: \"Failed to delete teacher\" });\n    }\n  }\n}","size_bytes":4531},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"server/controllers/userController.ts":{"content":"import { Request, Response } from 'express';\nimport { storage } from '../storage';\n\nexport class UserController {\n  static async getAllUsers(req: Request, res: Response) {\n    try {\n      // Since there's no getAllUsers in the storage interface, return empty array for now\n      res.json([]);\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      res.status(500).json({ message: 'Failed to fetch users' });\n    }\n  }\n\n  static async getUserById(req: Request, res: Response) {\n    try {\n      const user = await storage.getUser(req.params.id);\n      if (!user) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n      res.json(user);\n    } catch (error) {\n      console.error('Error fetching user:', error);\n      res.status(500).json({ message: 'Failed to fetch user' });\n    }\n  }\n\n  static async getCurrentUser(req: any, res: Response) {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (user) {\n        res.json({\n          _id: user._id,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          role: user.role\n        });\n      } else {\n        res.status(404).json({ message: \"User not found\" });\n      }\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  }\n}","size_bytes":1431},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"server/models/form-D.ts":{"content":"import mongoose, { Schema, Document, Types } from \"mongoose\";\r\n\r\n/**\r\n * هر ردیف کنفرانس\r\n */\r\nexport interface IConferenceItem {\r\n  conferenceTitle: string;\r\n  score: string;\r\n  date: string;\r\n  teacherName: string;\r\n  teacherSigned?: boolean;\r\n}\r\n\r\n/**\r\n * فرم ارزیابی کنفرانس\r\n */\r\nexport interface IConferenceEvaluation extends Document {\r\n  trainer: Types.ObjectId;\r\n  year: string;\r\n  name: string;\r\n  parentType: string;\r\n  department: string;\r\n  trainingYear: string;\r\n  conferences: IConferenceItem[];\r\n  notes?: boolean;\r\n  departmentHead?: string;\r\n  programHead?: string;\r\n  hospitalHead?: string;\r\n}\r\n\r\nconst ConferenceItemSchema = new Schema<IConferenceItem>({\r\n  conferenceTitle: { type: String, required: true },\r\n  score: { type: String, required: true },\r\n  date: { type: String, required: true },\r\n  teacherName: { type: String, required: true },\r\n  teacherSigned: { type: Boolean, default: false },\r\n});\r\n\r\nconst ConferenceEvaluationSchema = new Schema<IConferenceEvaluation>(\r\n  {\r\n    trainer: { type: Schema.Types.ObjectId, ref: \"Trainer\", required: true },\r\n    year: { type: String, required: true },\r\n    name: { type: String, required: true },\r\n    parentType: { type: String, required: true },\r\n    department: { type: String, required: true },\r\n    trainingYear: { type: String, required: true },\r\n    conferences: [ConferenceItemSchema],\r\n    notes: { type: Boolean, default: false },\r\n    departmentHead: { type: String, default: \"\" },\r\n    programHead: { type: String, default: \"\" },\r\n    hospitalHead: { type: String, default: \"\" },\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\nexport const ConferenceEvaluation = mongoose.model<IConferenceEvaluation>(\r\n  \"ConferenceEvaluation\",\r\n  ConferenceEvaluationSchema\r\n);\r\n","size_bytes":1770},"client/src/components/reports/TrainerDetails.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { X, Download } from \"lucide-react\";\nimport { useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\nimport FormCDetails from \"@/components/residents/form-details/formC-detail\";\nimport FormDDetails from \"@/components/residents/form-details/formD-detail\";\nimport FormEDetails from \"@/components/residents/form-details/formE-detail\";\nimport FormGDetails from \"@/components/residents/form-details/formG-detail\";\nimport FormHDetails from \"@/components/residents/form-details/formH-detail\";\nimport FormKDetails from \"@/components/residents/form-details/formK-detail\";\n\nconst FORM_TYPES = [\n  { type: \"J\", name: \"Initial Assessment\" },\n  { type: \"F\", name: \"Mid-Training Evaluation\" },\n  { type: \"D\", name: \"Clinical Skills\" },\n  { type: \"I\", name: \"Research Progress\" },\n  { type: \"G\", name: \"Communication Skills\" },\n  { type: \"E\", name: \"Ethics & Professionalism\" },\n  { type: \"C\", name: \"Case Presentation\" },\n  { type: \"H\", name: \"Hands-on Procedure\" },\n  { type: \"K\", name: \"Final Competency\" },\n];\n\ninterface TrainerDetailsProps {\n  trainerId: string;\n  onClose: () => void;\n}\n\nexport default function TrainerDetails({\n  trainerId,\n  onClose,\n}: TrainerDetailsProps) {\n  const [selectedForm, setSelectedForm] = useState<string | null>(null);\n  const [showActionsSection, setShowActionsSection] = useState(false);\n\n  const { data: trainer, isLoading, error } = useQuery({\n    queryKey: [\"trainer\", trainerId],\n    queryFn: () =>\n      fetch(`/api/trainers/${trainerId}`).then((res) => res.json()),\n  });\n\n  const { data: actions = [] } = useQuery({\n    queryKey: [\"trainer-actions\", trainerId],\n    queryFn: async () => {\n      const res = await fetch(`/api/trainer-actions/${trainerId}`);\n      if (!res.ok) return [];\n      return res.json();\n    },\n  });\n\n  const { data: rewardPunishments = [] } = useQuery({\n    queryKey: [\"trainer-reward-punishment\", trainerId],\n    queryFn: async () => {\n      const res = await fetch(`/api/trainer-reward-punishment/${trainerId}`);\n      if (!res.ok) return [];\n      return res.json();\n    },\n  });\n\n  if (isLoading) return <div>در حال بارگذاری...</div>;\n  if (error) return <div>خطا در بارگذاری ترینر</div>;\n  if (!trainer) return <div>ترینر پیدا نشد.</div>;\n\n  // دیباگ دیتا\n  console.log(\"Trainer data:\", trainer);\n\n  return (\n    <Dialog open={true} onOpenChange={onClose}>\n      <DialogContent\n        className=\"w-[60%] max-w-none max-h-[90vh] overflow-y-auto p-4 bg-white rounded-lg\"\n      >\n        {/* دکمه بستن */}\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          className=\"absolute top-4 right-4\"\n          onClick={onClose}\n        >\n          <X className=\"h-4 w-4\" />\n        </Button>\n\n        {/* Header */}\n        <DialogHeader>\n          <DialogTitle>\n            جزییات ترینر: {trainer.name} {trainer.lastName}\n          </DialogTitle>\n        </DialogHeader>\n\n        {/* ردیف عکس و فرم‌ها */}\n        <div className=\"flex items-center justify-between mb-4 w-full mt-6\">\n          <div className=\"flex-shrink-0 w-24 h-24 rounded-full border border-slate-300 overflow-hidden\">\n            {trainer.profileImageUrl ? (\n              <img\n                src={trainer.profileImageUrl}\n                alt={`${trainer.name} ${trainer.lastName}`}\n                className=\"w-full h-full object-cover\"\n              />\n            ) : (\n              <div className=\"w-full h-full flex items-center justify-center bg-slate-200 text-slate-500\">\n                عکس\n              </div>\n            )}\n          </div>\n\n          <div className=\"flex-1 flex justify-center space-x-4 overflow-x-auto mx-4\">\n            {FORM_TYPES.map((ft) => (\n              <Button\n                key={ft.type}\n                onClick={() => setSelectedForm(ft.type)}\n                className={`w-16 h-16 rounded-full flex items-center justify-center text-sm font-semibold\n                ${\n                  selectedForm === ft.type\n                    ? \"bg-blue-500 text-white\"\n                    : \"bg-slate-100 text-slate-700\"\n                }\n                hover:bg-slate-200 transition`}\n                title={ft.name}\n              >\n                {ft.type}\n              </Button>\n            ))}\n          </div>\n\n          <div className=\"flex-shrink-0 flex gap-2\">\n            <Button \n              size=\"sm\" \n              className=\"bg-hospital-green-600 text-white hover:bg-hospital-green-700\"\n              onClick={() => setShowActionsSection(!showActionsSection)}\n            >\n              اکشن‌ها و مجازات/مکافات ({actions.length + rewardPunishments.length})\n            </Button>\n          </div>\n        </div>\n\n        {/* اطلاعات ترینر */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 border-t border-slate-200 pt-4 mt-4\">\n          <div>\n            <h4 className=\"font-medium text-slate-900 mb-2\">اطلاعات شخصی</h4>\n            <ul className=\"text-sm text-slate-700 space-y-1\">\n              <li>\n                <strong>نام کامل:</strong> {trainer.name} {trainer.lastName}\n              </li>\n              <li>\n                <strong>جنسیت:</strong> {trainer.gender}\n              </li>\n              <li>\n                <strong>شماره تماس:</strong> {trainer.phoneNumber}\n              </li>\n            </ul>\n          </div>\n          <div>\n            <h4 className=\"font-medium text-slate-900 mb-2\">اطلاعات آموزشی</h4>\n            <ul className=\"text-sm text-slate-700 space-y-1\">\n              <li>\n                <strong>دیپارتمنت:</strong> {trainer.department}\n              </li>\n              <li>\n                <strong>تاریخ شروع:</strong> {trainer.joiningDate}\n              </li>\n              <li>\n                <strong>سال آموزشی:</strong> {trainer.trainingYear}\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        {/* بخش اکشن‌ها و مجازات/مکافات */}\n        {showActionsSection && (\n          <div className=\"mt-6 border-t border-slate-200 pt-4\">\n            <Tabs defaultValue=\"actions\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"actions\">\n                  اکشن‌ها ({actions.length})\n                </TabsTrigger>\n                <TabsTrigger value=\"rewards\">\n                  مجازات/مکافات ({rewardPunishments.length})\n                </TabsTrigger>\n              </TabsList>\n\n              {/* تب اکشن‌ها */}\n              <TabsContent value=\"actions\" className=\"mt-4\">\n                {actions.length === 0 ? (\n                  <div className=\"text-center py-8 text-slate-500\">\n                    هیچ اکشنی ثبت نشده است\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {actions.map((action: any) => (\n                      <div\n                        key={action._id}\n                        className=\"border rounded-lg p-4 bg-slate-50 hover:shadow-md transition-shadow\"\n                      >\n                        <div className=\"flex justify-between items-start mb-3\">\n                          <div className=\"flex-1\">\n                            <p className=\"text-sm text-slate-600 mb-2\">\n                              تاریخ:{\" \"}\n                              {new Date(action.createdAt).toLocaleDateString(\"fa-IR\")}\n                            </p>\n                            <p className=\"text-base font-medium\">{action.description}</p>\n                          </div>\n                        </div>\n\n                        {action.selectedForms && action.selectedForms.length > 0 && (\n                          <div className=\"mt-3 pt-3 border-t border-slate-300\">\n                            <p className=\"text-sm font-semibold text-slate-600 mb-2\">\n                              فرم‌های مرتبط:\n                            </p>\n                            <div className=\"flex flex-wrap gap-2\">\n                              {action.selectedForms.map((formType: string) => {\n                                const form = FORM_TYPES.find((f) => f.type === formType);\n                                return (\n                                  <span\n                                    key={formType}\n                                    className=\"inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-hospital-green-100 text-hospital-green-800\"\n                                  >\n                                    فرم {formType}\n                                    {form && ` - ${form.name}`}\n                                  </span>\n                                );\n                              })}\n                            </div>\n                          </div>\n                        )}\n\n                        {action.files && action.files.length > 0 && (\n                          <div className=\"mt-3 pt-3 border-t border-slate-300\">\n                            <p className=\"text-sm font-semibold text-slate-600 mb-2\">\n                              فایل‌های پیوست:\n                            </p>\n                            <div className=\"flex flex-wrap gap-2\">\n                              {action.files.map((file: any, index: number) => (\n                                <Button\n                                  key={index}\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  className=\"gap-2\"\n                                  onClick={() => {\n                                    const link = document.createElement(\"a\");\n                                    link.href = `/api/trainer-actions/download/${file.filename}`;\n                                    link.download = file.originalName;\n                                    link.click();\n                                  }}\n                                >\n                                  <Download className=\"h-3 w-3\" />\n                                  {file.originalName}\n                                </Button>\n                              ))}\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </TabsContent>\n\n              {/* تب مجازات/مکافات */}\n              <TabsContent value=\"rewards\" className=\"mt-4\">\n                {rewardPunishments.length === 0 ? (\n                  <div className=\"text-center py-8 text-slate-500\">\n                    هیچ رکوردی ثبت نشده است\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {rewardPunishments.map((record: any) => (\n                      <div\n                        key={record._id}\n                        className={`border rounded-lg p-4 hover:shadow-md transition-shadow ${\n                          record.type === \"reward\" \n                            ? \"bg-green-50 border-green-200\" \n                            : \"bg-red-50 border-red-200\"\n                        }`}\n                      >\n                        <div className=\"flex justify-between items-start mb-3\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center gap-2 mb-2\">\n                              <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-semibold ${\n                                record.type === \"reward\" \n                                  ? \"bg-green-100 text-green-800\" \n                                  : \"bg-red-100 text-red-800\"\n                              }`}>\n                                {record.type === \"reward\" ? \"مکافات\" : \"مجازات\"}\n                              </span>\n                              <p className=\"text-sm text-slate-600\">\n                                تاریخ: {new Date(record.createdAt).toLocaleDateString(\"fa-IR\")}\n                              </p>\n                            </div>\n                            <p className=\"text-base font-medium\">{record.description}</p>\n                          </div>\n                        </div>\n\n                        {record.files && record.files.length > 0 && (\n                          <div className=\"mt-3 pt-3 border-t border-slate-300\">\n                            <p className=\"text-sm font-semibold text-slate-600 mb-2\">\n                              فایل‌های پیوست:\n                            </p>\n                            <div className=\"flex flex-wrap gap-2\">\n                              {record.files.map((file: any, index: number) => (\n                                <Button\n                                  key={index}\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  className=\"gap-2\"\n                                  onClick={() => {\n                                    const link = document.createElement(\"a\");\n                                    link.href = `/api/trainer-reward-punishment/download/${file.filename}`;\n                                    link.download = file.originalName;\n                                    link.click();\n                                  }}\n                                >\n                                  <Download className=\"h-3 w-3\" />\n                                  {file.originalName}\n                                </Button>\n                              ))}\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </TabsContent>\n            </Tabs>\n          </div>\n        )}\n\n        {/* فرم‌ها */}\n        {selectedForm && (\n          <div className=\"mt-6\">\n            <h4 className=\"font-medium text-slate-900 mb-2\">\n              جزئیات فرم {selectedForm}\n            </h4>\n\n            {selectedForm === \"C\" && (\n              <FormCDetails trainerId={trainerId} onClose={() => setSelectedForm(null)} />\n            )}\n            {selectedForm === \"D\" && (\n              <FormDDetails trainerId={trainerId} onClose={() => setSelectedForm(null)} />\n            )}\n            {selectedForm === \"E\" && (\n              <FormEDetails trainerId={trainerId} onClose={() => setSelectedForm(null)} />\n            )}\n            {selectedForm === \"G\" && (\n              <FormGDetails trainerId={trainerId} onClose={() => setSelectedForm(null)} />\n            )}\n            {selectedForm === \"H\" && (\n              <FormHDetails trainerId={trainerId} onClose={() => setSelectedForm(null)} />\n            )}\n            {selectedForm === \"K\" && (\n              <FormKDetails trainerId={trainerId} onClose={() => setSelectedForm(null)} />\n            )}\n          </div>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":15426},"client/src/components/forms/form-c.tsx":{"content":"import React, { useState, useEffect } from \"react\";\r\ninterface MonographEvaluation {\r\n  section: string;\r\n  percentage: string;\r\n  score: string;\r\n  teacherName: string;\r\n}\r\ninterface MonographEvaluationFormCProps {\r\n  trainerIdProp?: string; // ✅ امکان گرفتن trainerId مستقیماً از والد\r\n}\r\n\r\nexport default function MonographEvaluationFormC({\r\n  trainerIdProp,\r\n}: MonographEvaluationFormCProps) {\r\n  const [name, setName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const [parentType, setparentType] = useState(\"\");\r\n  const [idNumber, setIdNumber] = useState(\"\");\r\n  const [department, setDepartment] = useState(\"\");\r\n  const [trainingYear, setTrainingYear] = useState(\"\");\r\n  const [startYear, setStartYear] = useState(\"\");\r\n  const [date, setDate] = useState(\"\");\r\n  const [trainerId, setTrainerId] = useState<string | null>(null);\r\n  const [chef, setChef] = useState(\"\");\r\n  const [departmentHead, setDepartmentHead] = useState(\"\");\r\n  const [hospitalHead, setHospitalHead] = useState(\"\");\r\n  // ✅ گرفتن trainerId از Context\r\n  // ✅ وقتی trainerIdProp آماده شد، trainerId تنظیم می‌شود و داده از دیتابیس گرفته می‌شود\r\n  useEffect(() => {\r\n    if (!trainerIdProp) {\r\n      alert(\"هیچ ترینر فعالی یافت نشد!\");\r\n      return;\r\n    }\r\n\r\n    setTrainerId(trainerIdProp);\r\n\r\n    // 👇 دریافت داده از دیتابیس\r\n    const fetchTrainerInfo = async () => {\r\n      try {\r\n        const res = await fetch(\r\n          `http://localhost:5000/api/trainers/${trainerIdProp}`\r\n        );\r\n        const result = await res.json();\r\n\r\n        if (!res.ok) throw new Error(result.message || \"خطا در دریافت ترینر\");\r\n\r\n        // فرض می‌کنیم دیتابیس این فیلدها را دارد:\r\n        // name, fatherName, trainingYear\r\n        setName(result.name || \"\");\r\n        setparentType(result.parentType || \"\");\r\n        setTrainingYear(result.trainingYear || \"\");\r\n        setIdNumber(result.idNumber||\"\");\r\n        setLastName(result.lastName||\"\");\r\n        setDepartment(result.department||\"\");\r\n      } catch (err) {\r\n        console.error(\"خطا در دریافت ترینر:\", err);\r\n        alert(\"خطا در دریافت اطلاعات ترینر ❌\");\r\n      }\r\n    };\r\n\r\n    fetchTrainerInfo();\r\n  }, [trainerIdProp]);\r\n \r\n  // بخش‌های ثابت فرم + سه بخش جدید\r\n  const sections = [\r\n    \"نمره کنفرانسهای طول سال\",\r\n    \"نمره امتحان نهایی عملی و تقرری\",\r\n    \"نمره تست های چهار ماهه\",\r\n    \"نمره case presentation\",\r\n    \"نمره سیکل\",\r\n    \"مجموع نمرات\",\r\n    \"نتیجه نهایی\",\r\n  ];\r\n\r\n  const [evaluations, setEvaluations] = useState<MonographEvaluation[]>(\r\n    sections.map((s) => ({\r\n      section: s,\r\n      percentage: \"\",\r\n      score: \"\",\r\n      teacherName: \"\",\r\n    }))\r\n  );\r\n\r\n  const handleEvalChange = (\r\n    index: number,\r\n    fieldName: keyof MonographEvaluation,\r\n    value: string\r\n  ) => {\r\n    const updated = [...evaluations];\r\n    (updated[index] as any)[fieldName] = value;\r\n    setEvaluations(updated);\r\n  };\r\n\r\n  const inputClass = \"border rounded px-2 py-2 w-full text-center\";\r\n\r\n  const handleSubmit = async () => {\r\n    // 🔹 بررسی شناسه ترینر\r\n    if (!trainerId) {\r\n      alert(\"❌ هیچ ترینر فعالی یافت نشد!\");\r\n      return;\r\n    }\r\n\r\n    // 🔹 بررسی فیلدهای اطلاعات شخصی\r\n    const personalFields = {\r\n      name,\r\n      lastName,  \r\n      parentType,\r\n      idNumber,\r\n      department,\r\n      trainingYear,\r\n      startYear,\r\n      date,\r\n    };\r\n\r\n    for (const [key, value] of Object.entries(personalFields)) {\r\n      if (!value.trim()) {\r\n        alert(\"⚠️ لطفاً تمام معلومات شخصی را وارد کنید.\");\r\n        return;\r\n      }\r\n    }\r\n\r\n    // 🔹 بررسی پر بودن تمام ردیف‌های ارزیابی\r\n    for (let i = 0; i < evaluations.length; i++) {\r\n      const ev = evaluations[i];\r\n      if (!ev.percentage.trim() || !ev.score.trim() || !ev.teacherName.trim()) {\r\n        alert(`⚠️ تمام خانه‌های ردیف \"${ev.section}\" باید پُر شود.`);\r\n        return;\r\n      }\r\n    }\r\n\r\n    // 🔹 بررسی پر بودن بخش‌های آخر فرم\r\n    if (!chef.trim() || !departmentHead.trim() || !hospitalHead.trim()) {\r\n      alert(\"⚠️ لطفاً نام شف، آمر پروگرام و رئیس شفاخانه را وارد کنید.\");\r\n      return;\r\n    }\r\n\r\n    // ✅ ساخت payload نهایی\r\n    const payload = {\r\n      trainer: trainerId,\r\n      name,\r\n      lastName,\r\n      parentType,\r\n      idNumber,\r\n      department,\r\n      trainingYear,\r\n      startYear,\r\n      date,\r\n      chef,\r\n      departmentHead,\r\n      hospitalHead,\r\n      evaluations,\r\n    };\r\n\r\n    try {\r\n      const res = await fetch(\"http://localhost:5000/api/monograph\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(payload),\r\n      });\r\n\r\n      if (!res.ok) {\r\n        const errBody = await res.json().catch(() => null);\r\n        alert(\"❌ خطا در ارسال فرم: \" + (errBody?.message || res.statusText));\r\n        console.error(\"Server error:\", errBody);\r\n        return;\r\n      }\r\n\r\n      alert(\"✅ فرم با موفقیت ثبت شد!\");\r\n\r\n      // 🧹 پاک‌سازی فرم بعد از ثبت موفق\r\n      setName(\"\");\r\n      setLastName(\"\");\r\n      setparentType(\"\");\r\n      setIdNumber(\"\");\r\n      setDepartment(\"\");\r\n      setTrainingYear(\"\");\r\n      setStartYear(\"\");\r\n      setDate(\"\");\r\n      setChef(\"\");\r\n      setDepartmentHead(\"\");\r\n      setHospitalHead(\"\");\r\n      setEvaluations(\r\n        sections.map((s) => ({\r\n          section: s,\r\n          percentage: \"\",\r\n          score: \"\",\r\n          teacherName: \"\",\r\n        }))\r\n      );\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(\"❌ خطا در برقراری ارتباط با سرور\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-6xl mx-auto bg-white shadow-lg rounded-2xl p-6 mt-6\">\r\n      <h2 className=\"text-xl font-bold text-center mb-6\">\r\n        فرم ارزیابی مونوگراف\r\n      </h2>\r\n\r\n      {/* کل فرم در یک گرید یکنواخت */}\r\n      <div className=\"grid grid-cols-4 gap-4\">\r\n        {/* اطلاعات فردی */}\r\n        <input\r\n          className={inputClass}\r\n          placeholder=\"اسم\"\r\n          value={name}\r\n          onChange={(e) => setName(e.target.value)}\r\n        />\r\n        <input\r\n          className={inputClass}\r\n          placeholder=\"تخلص\"\r\n          value={lastName}\r\n          onChange={(e) => setLastName(e.target.value)}\r\n        />\r\n        <input\r\n          className={inputClass}\r\n          placeholder=\"ولد\"\r\n          value={parentType}\r\n          onChange={(e) => setparentType(e.target.value)}\r\n        />\r\n        <input\r\n          className={inputClass}\r\n          placeholder=\"نمبر تذکره\"\r\n          value={idNumber}\r\n          onChange={(e) => setIdNumber(e.target.value)}\r\n        />\r\n        <input\r\n          className={inputClass}\r\n          placeholder=\"رشته\"\r\n          value={department}\r\n          onChange={(e) => setDepartment(e.target.value)}\r\n        />\r\n        <input\r\n          className={inputClass}\r\n          placeholder=\"سال تریننگ\"\r\n          value={trainingYear}\r\n          onChange={(e) => setTrainingYear(e.target.value)}\r\n        />\r\n        <input\r\n          className={inputClass}\r\n          placeholder=\"سال شمول\"\r\n          value={startYear}\r\n          onChange={(e) => setStartYear(e.target.value)}\r\n        />\r\n        <input\r\n          className={inputClass}\r\n          placeholder=\"تاریخ\"\r\n          value={date}\r\n          onChange={(e) => setDate(e.target.value)}\r\n        />\r\n        {/* ارزیابی بخش‌ها */}\r\n        {evaluations.map((ev, i) => (\r\n          <React.Fragment key={i}>\r\n            <div className={inputClass}>{ev.section}</div>\r\n            <input\r\n              className={inputClass}\r\n              placeholder=\"فیصدی\"\r\n              value={ev.percentage}\r\n              onChange={(e) =>\r\n                handleEvalChange(i, \"percentage\", e.target.value)\r\n              }\r\n            />\r\n            <input\r\n              className={inputClass}\r\n              placeholder=\"نمره داده شده\"\r\n              value={ev.score}\r\n              onChange={(e) => handleEvalChange(i, \"score\", e.target.value)}\r\n            />\r\n            <input\r\n              className={inputClass}\r\n              placeholder=\"نام استاد\"\r\n              value={ev.teacherName}\r\n              onChange={(e) =>\r\n                handleEvalChange(i, \"teacherName\", e.target.value)\r\n              }\r\n            />\r\n          </React.Fragment>\r\n        ))}\r\n        {/* فیلدهای اضافی */}\r\n        <input\r\n          className={inputClass}\r\n          placeholder=\"شف\"\r\n          value={chef}\r\n          onChange={(e) => setChef(e.target.value)}\r\n        />\r\n        <input\r\n          className={inputClass}\r\n          placeholder=\"آمر پروگرام تریننگ\"\r\n          value={departmentHead}\r\n          onChange={(e) => setDepartmentHead(e.target.value)}\r\n        />\r\n        <input\r\n          className={inputClass}\r\n          placeholder=\"ریس شفاخانه\"\r\n          value={hospitalHead}\r\n          onChange={(e) => setHospitalHead(e.target.value)}\r\n        />\r\n        <div></div> {/* تکمیل ردیف */}\r\n      </div>\r\n\r\n      <div className=\"text-center mt-6\">\r\n        <button\r\n          onClick={handleSubmit}\r\n          className=\"px-6 py-2 bg-green-600 text-white rounded-xl hover:bg-green-700 transition\"\r\n        >\r\n          ذخیره فرم\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","size_bytes":9976},"replit.md":{"content":"# Hospital Resident Management System\n\n## Overview\n\nThis web-based Hospital Resident Management System tracks and manages medical residents (specialist trainees) throughout their training. It provides comprehensive resident profiles, mandatory training forms, performance evaluations, disciplinary actions, and faculty supervision. The system features role-based access control (admin and viewer permissions) and reporting capabilities for institutional oversight. Its business vision is to streamline resident management, improve oversight, and provide robust reporting for medical training institutions.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **React 18** with TypeScript\n- **Vite** for fast development and build\n- **Wouter** for client-side routing\n- **TailwindCSS** for styling with a custom hospital theme\n- **shadcn/ui** (built on Radix UI) for accessible components\n- **TanStack Query** for server state management\n- **React Hook Form** with Zod for form handling\n\n### Backend Architecture\n- **Express.js** server with TypeScript\n- **RESTful API design**\n- **Session-based authentication** using MongoDB session store\n- **Replit Auth integration** for OAuth\n- **Role-based access control** (admin/viewer)\n- **Middleware pattern** for logging and error handling\n- **MVC pattern** for code organization\n\n### Data Layer\n- **MongoDB** for document-based storage, with fallback to in-memory storage\n- **Mongoose ODM** for schema modeling\n- **Collections**: users, residents, teachers, forms, disciplinary actions, rewards, sessions, vacancies\n- **Schema validation** using Zod\n- **Document-based data modeling**\n- **Comprehensive seeding system** with 36 teachers across 12 departments and 14 residents.\n- **Department-based organization** for various medical specialties.\n\n### Key Features\n- **Resident Management**: CRUD operations for resident profiles, department assignment, and status tracking.\n- **Training Forms System**: Nine mandatory forms with completion tracking and data storage.\n- **Teacher Management**: Comprehensive teacher profiles with academic rank, contact details, and department assignment (replaces former faculty system).\n- **Vacancies Management**: Dynamic job posting system with database persistence, CRUD operations for vacant positions.\n- **Disciplinary Actions & Rewards**: Tracking system for resident performance incidents and achievements, with file upload support.\n- **Trainer Actions & Reward/Punishment**: Unified tabbed interface in reports showing trainer actions and reward/punishment records with file download capabilities.\n- **Reports Module**: Detailed reporting for residents, forms, disciplinary actions, rewards, and teachers with tabbed navigation.\n- **Authentication**: Secure OAuth integration with Replit Auth and demo fallback.\n- **Authorization**: Role-based permissions (admin for full access, viewer for read-only).\n- **File Upload/Download**: Secure file handling for lectures, trainer actions, rewards, and punishments.\n- **Mobile Responsiveness**: Mobile-first design with collapsible sidebar and responsive layouts.\n- **Sidebar Enhancement**: Header component integrated into sidebar for consistent branding across desktop view.\n\n### Design Patterns\n- **Repository Pattern**: Abstraction for data access.\n- **Component Composition**: Reusable UI components.\n- **Hooks Pattern**: Custom React hooks for authentication and mobile detection.\n- **Error Boundary**: Centralized error handling.\n- **Loading States**: Skeleton components and loading indicators.\n\n## External Dependencies\n\n### Database & ODM\n- **MongoDB**\n- **Mongoose**\n\n### Authentication\n- **Replit Auth** (OAuth provider)\n- **OpenID Connect**\n- **Passport.js**\n- **connect-mongo**\n\n### UI Framework\n- **Radix UI**\n- **Lucide React** (icons)\n- **Class Variance Authority**\n- **TailwindCSS**\n\n### Development Tools\n- **TypeScript**\n- **ESBuild** (backend bundling)\n- **Vite plugins**\n- **TSX**\n\n### Utilities\n- **date-fns**\n- **nanoid**\n- **memoizee**\n- **clsx**\n- **tailwind-merge**\n- **Multer** (file uploads)","size_bytes":4129},"server/routes.ts":{"content":"import type { Express } from \"express\";\r\nimport { createServer, type Server } from \"http\";\r\nimport { setupDemoAuth, isDemoAuthenticated } from \"./demoAuth\";\r\nimport { UserController, ResidentController, TeacherController } from \"./controllers\";\r\nimport { trainerRoutes } from \"./routes/trainerRoutes\";\r\nimport { trainerActionRoutes } from \"./routes/trainerActionRoutes\";\nimport { trainerRewardPunishmentRoutes } from \"./routes/trainerRewardPunishmentRoutes\";\nimport { userRoutes } from \"./routes/userRoutes\";\nimport { lectureRoutes } from \"./routes/lectureRoutes\";\nimport { TeacherModel } from \"./models\";\r\nimport { teacherActivityRoutes } from \"./routes/form-J\";\r\nimport checklistRoutes from \"./routes/form-F\";\nimport { vacancyRoutes } from \"./routes/vacancyRoutes\";\r\n\r\n\r\n\r\n\r\nexport async function registerRoutes(app: Express): Promise<Server> {\r\n  // Demo Auth middleware\r\n  await setupDemoAuth(app);\r\n//////////////////////////////////////\r\n  \r\n  //tranerRoters\r\n  app.use('/api/trainer-actions', isDemoAuthenticated, trainerActionRoutes);\n  app.use('/api/trainer-reward-punishment', isDemoAuthenticated, trainerRewardPunishmentRoutes);\n  app.use('/api/trainers', trainerRoutes);\r\n  \r\n  ///////////////////////////////////////////\r\n  // Checklist routes\r\n  // استفاده از روتر\r\napp.use(\"/api/checklists\", checklistRoutes);\r\n\r\n  ///////////////////////////////////////////\r\n\r\n  // Teacher Activity routes\r\n  //////////////////////////////////////////////\r\n\r\n  app.use(\"/api/teacher-activities\", teacherActivityRoutes);\r\n\r\n  //////////////////////////////////////////////\r\n\r\n\r\n  // Auth routes\r\n  app.get('/api/auth/user', isDemoAuthenticated, UserController.getCurrentUser);\r\n\r\n  // User routes\n  app.use(\"/api/users\", isDemoAuthenticated, userRoutes);\n\r\n  // Resident routes\r\n  app.get(\"/api/residents\", isDemoAuthenticated, ResidentController.getAllResidents);\r\n  app.get(\"/api/residents/:id\", isDemoAuthenticated, ResidentController.getResidentById);\r\n  app.post(\"/api/residents\", isDemoAuthenticated, ResidentController.createResident);\r\n  app.put(\"/api/residents/:id\", isDemoAuthenticated, ResidentController.updateResident);\r\n  app.delete(\"/api/residents/:id\", isDemoAuthenticated, ResidentController.deleteResident);\r\n\r\n  // Teacher routes\r\n  app.get(\"/api/teachers\", isDemoAuthenticated, TeacherController.getAllTeachers);\r\n  app.get(\"/api/teachers/:id\", isDemoAuthenticated, TeacherController.getTeacherById);\r\n  app.post(\"/api/teachers\", isDemoAuthenticated, TeacherController.createTeacher);\r\n  app.put(\"/api/teachers/:id\", isDemoAuthenticated, TeacherController.updateTeacher);\r\n  app.delete(\"/api/teachers/:id\", isDemoAuthenticated, TeacherController.deleteTeacher);\r\n  // Lecture routes\n  app.use(\"/api/lectures\", isDemoAuthenticated, lectureRoutes);\n\n  // Vacancy routes\n  app.use(\"/api/vacancies\", isDemoAuthenticated, vacancyRoutes);\n\n\r\n  // Forms\r\n  app.get(\"/api/forms\", isDemoAuthenticated, async (req, res) => {\r\n    try {\r\n      // Return form types for the forms system\r\n      const formTypes = [\r\n        { id: 'J', name: 'Form J - Initial Assessment' },\r\n        { id: 'F', name: 'Form F - Monthly Evaluation' },\r\n        { id: 'D', name: 'Form D - Skills Assessment' },\r\n        { id: 'I', name: 'Form I - Clinical Performance' },\r\n        { id: 'G', name: 'Form G - Research Progress' },\r\n        { id: 'E', name: 'Form E - Professional Development' },\r\n        { id: 'C', name: 'Form C - Case Study Review' },\r\n        { id: 'H', name: 'Form H - Final Evaluation' },\r\n        { id: 'K', name: 'Form K - Competency Review' }\r\n      ];\r\n      res.json(formTypes);\r\n    } catch (error) {\r\n      console.error(\"Error fetching forms:\", error);\r\n      res.status(500).json({ message: \"Failed to fetch forms\" });\r\n    }\r\n  });\r\n\r\n  // Disciplinary actions\r\n  app.get(\"/api/disciplinary\", isDemoAuthenticated, async (req, res) => {\r\n    try {\r\n      // Placeholder for disciplinary actions\r\n      res.json([]);\r\n    } catch (error) {\r\n      console.error(\"Error fetching disciplinary actions:\", error);\r\n      res.status(500).json({ message: \"Failed to fetch disciplinary actions\" });\r\n    }\r\n  });\r\n\r\n  // Rewards\r\n  app.get(\"/api/rewards\", isDemoAuthenticated, async (req, res) => {\r\n    try {\r\n      // Placeholder for rewards\r\n      res.json([]);\r\n    } catch (error) {\r\n      console.error(\"Error fetching rewards:\", error);\r\n      res.status(500).json({ message: \"Failed to fetch rewards\" });\r\n    }\r\n  });\r\n\r\n  // Reports\r\n  app.get(\"/api/reports\", isDemoAuthenticated, async (req, res) => {\r\n    try {\r\n      const { ResidentModel } = await import(\"./models\");\r\n      const reports = {\r\n        residents: await ResidentModel.countDocuments(),\r\n        teachers: await TeacherModel.countDocuments(),\r\n        forms: 9, // Number of form types\r\n        activeResidents: await ResidentModel.countDocuments({ status: 'active' }),\r\n        inactiveResidents: await ResidentModel.countDocuments({ status: 'inactive' }),\r\n        activeTeachers: await TeacherModel.countDocuments({ status: 'active' }),\r\n        inactiveTeachers: await TeacherModel.countDocuments({ status: 'inactive' })\r\n      };\r\n      res.json(reports);\r\n    } catch (error) {\r\n      console.error(\"Error generating reports:\", error);\r\n      res.status(500).json({ message: \"Failed to generate reports\" });\r\n    }\r\n  });\r\n\r\n  return createServer(app);\r\n}","size_bytes":5360},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Users, BarChart3, LogOut, SettingsIcon, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\n\nconst navigation = [\n  { name: 'ترینری', href: '/residents', icon: Users },\n  { name: 'استادان', href: '/teachers', icon: Users },\n  { name: 'گزارشات', href: '/reports', icon: BarChart3 },\n  // { name: 'فورم ها', href: '/forms', icon: FormInputIcon },\n  { name: 'تنظیمات', href: '/setting', icon: SettingsIcon },\n  { name: 'وظایف', href: '/jobs', icon: SettingsIcon },\n  // { name: 'درباره ما', href: '/about', icon: InfoIcon },\n];\n\ninterface SidebarProps {\n  isOpen?: boolean;\n  onClose?: () => void;\n}\n\nexport default function Sidebar({ isOpen = true, onClose }: SidebarProps) {\n  const [location] = useLocation();\n  const { user } = useAuth();\n  const isMobile = useIsMobile();\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  const handleLinkClick = () => {\n    if (isMobile && onClose) {\n      onClose();\n    }\n  };\n\n  return (\n    <>\n      {/* Backdrop overlay for mobile */}\n      {isMobile && isOpen && (\n        <div \n          className=\"fixed inset-0 bg-black/50 z-40\"\n          onClick={() => onClose?.()}\n        />\n      )}\n      \n      {/* Sidebar */}\n      <div className={cn(\n        \"fixed inset-y-0 right-0 z-50 w-64 bg-white shadow-lg transition-transform duration-300 ease-in-out\",\n        isMobile && !isOpen && \"translate-x-full\"\n      )}>\n        <div className=\"flex flex-col h-full\" onClick={(e) => e.stopPropagation()}>\n        {/* Header - برای sidebar */}\n        {!isMobile ? (\n          <div className=\"border-b border-slate-200 bg-green-600 text-white px-4 py-3\">\n            <div className=\"flex items-center justify-center gap-2\">\n              <img\n                src=\"/logo.svg\"\n                alt=\"Logo\"\n                className=\"h-10 w-10\"\n              />\n              <h2 className=\"text-base font-bold text-center\">\n                سیستم مدیریتی ترینری شفاخانه چشم نور\n              </h2>\n            </div>\n          </div>\n        ) : (\n          <div className=\"flex items-center justify-between px-4 py-3 bg-green-600 text-white border-b border-slate-200\">\n            <div className=\"flex items-center gap-2 flex-1\">\n              <img\n                src=\"/logo.svg\"\n                alt=\"Logo\"\n                className=\"h-8 w-8\"\n              />\n              <h2 className=\"text-sm font-bold\">\n                سیستم مدیریتی ترینری\n              </h2>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => onClose?.()}\n              className=\"text-white hover:bg-green-700\"\n              aria-label=\"بستن منوی ناوبری\"\n            >\n              <X className=\"h-5 w-5\" />\n            </Button>\n          </div>\n        )}\n        \n        {/* User Info */}\n        <div className=\"px-4 py-4 border-b border-slate-200\">\n          <div className=\"flex items-center\">\n            <Avatar className=\"h-10 w-10\">\n              <AvatarImage src={user?.profileImageUrl || ''} alt=\"User profile\" />\n              <AvatarFallback className=\"bg-hospital-green-100 text-hospital-green-600\">\n                {user?.firstName?.[0] || user?.email?.[0] || 'U'}\n              </AvatarFallback>\n            </Avatar>\n            <div className=\"mr-3\">\n              <p className=\"text-sm font-medium text-slate-900\" data-testid=\"text-user-name\">\n                {user?.firstName || user?.email || 'User'}\n              </p>\n              <p className=\"text-xs text-slate-500 capitalize\" data-testid=\"text-user-role\">\n                {user?.role || 'User'}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Navigation */}\n        <nav className=\"flex-1 px-4 py-4 space-y-2\">\n          {navigation.map((item) => {\n            const Icon = item.icon;\n            const isActive = location === item.href || location.startsWith(item.href + '/');\n            \n            // Hide Settings/Users section for viewers\n            if (item.href === '/setting' && user?.role !== 'admin') {\n              return null;\n            }\n            \n            return (\n              <Link key={item.name} href={item.href}>\n                <div \n                  onClick={handleLinkClick}\n                  className={cn(\n                    \"flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors cursor-pointer\",\n                    isActive\n                      ? \"bg-hospital-green-50 text-hospital-green-700\"\n                      : \"text-slate-600 hover:bg-slate-50 hover:text-slate-900\"\n                  )} \n                  data-testid={`link-${item.name.toLowerCase()}`}\n                >\n                  <Icon className=\"ml-3 h-5 w-5\" />\n                  {item.name}\n                </div>\n              </Link>\n            );\n          })}\n        </nav>\n\n        {/* Footer */}\n        <div className=\"px-4 py-4 border-t border-slate-200\">\n          <Button\n            onClick={handleLogout}\n            variant=\"ghost\"\n            className=\"w-full flex items-center justify-start px-3 py-2 text-sm font-medium text-slate-600 hover:bg-slate-50 hover:text-slate-900\"\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"ml-3 h-5 w-5\" />\n            خروج\n          </Button>\n        </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\n\n\n\n","size_bytes":5754},"client/src/pages/about.tsx":{"content":"// AboutUs.tsx\nimport React from \"react\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { FaGlobe, FaTwitter, FaLinkedin, FaInstagram, FaFacebook, FaLeaf } from \"react-icons/fa\";\n\nexport default function AboutUs() {\n  const companies = [\n    {\n      name: \"WinSoft Technology\",\n      description: \"فناوری اطلاعات و خدمات نرم‌افزاری\",\n      details:\n        \"شرکت تکنالوژی وین سافت با بیش از ۱۰ سال تجربه در ارائه راهکارهای نرم‌افزاری و خدمات IT، پروژه‌های متعددی را با موفقیت انجام داده است.\",\n      website: \"https://companyA.com\",\n      logo: \"/logos/companyA.png\",\n      color: \"bg-gradient-to-br from-emerald-50 to-green-50\",\n      buttonColor: \"bg-emerald-600 hover:bg-emerald-700 text-white\",\n      socialMedia: [\n        { platform: \"twitter\", url: \"https://twitter.com/companyA\", icon: <FaTwitter className=\"text-emerald-600\" /> },\n        { platform: \"linkedin\", url: \"https://linkedin.com/company/companyA\", icon: <FaLinkedin className=\"text-emerald-700\" /> },\n        { platform: \"instagram\", url: \"https://instagram.com/companyA\", icon: <FaInstagram className=\"text-emerald-800\" /> },\n      ]\n    },\n    {\n      name: \"CodeA Software Development Team\",\n      description: \"طراحی و توسعه وب و اپلیکیشن\",\n      details:\n        \"شرکت تکنالوژی وین سافت با تیم حرفه‌ای خود خدمات طراحی و توسعه وب‌سایت و اپلیکیشن‌های موبایل را ارائه می‌دهد.\",\n      website: \"https://companyB.com\",\n      logo: \"/logos/companyB.png\",\n      color: \"bg-gradient-to-br from-lime-50 to-green-100\",\n      buttonColor: \"bg-lime-600 hover:bg-lime-700 text-white\",\n      socialMedia: [\n        { platform: \"website\", url: \"https://companyB.com\", icon: <FaGlobe className=\"text-lime-600\" /> },\n        { platform: \"twitter\", url: \"https://twitter.com/companyB\", icon: <FaTwitter className=\"text-lime-700\" /> },\n        { platform: \"facebook\", url: \"https://facebook.com/companyB\", icon: <FaFacebook className=\"text-lime-800\" /> },\n      ]\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <Header />\n      <Sidebar />\n      <div className=\"mr-0 md:mr-64 pt-16 md:pt-20 p-4 md:p-6 space-y-4 md:space-y-6\">\n        {/* Header */}\n        <div className=\"text-center mb-6 md:mb-8\">\n          <h1 className=\"text-xl md:text-3xl font-bold tracking-tight bg-gradient-to-r from-emerald-700 to-green-600 bg-clip-text text-transparent\">\n            درباره ما\n          </h1>\n          <p className=\"text-slate-600 mt-2 text-xs md:text-sm max-w-2xl mx-auto\">\n            معرفی شرکت‌های گروه و خدمات متنوعی که ارائه می‌دهیم\n          </p>\n        </div>\n\n        {/* Grid شرکت‌ها */}\n        <div className=\"grid gap-6 md:grid-cols-2\">\n          {companies.map((company) => (\n            <Card\n              key={company.name}\n              className={`hover:shadow-lg transition-all duration-300 transform hover:-translate-y-0.5 ${company.color} rounded-lg overflow-hidden border-0 shadow-md`}\n            >\n              <CardHeader className=\"flex flex-row items-center gap-4 pb-3 border-b border-emerald-100/50\">\n                {company.logo && (\n                  <div className=\"relative\">\n                    <img\n                      src={company.logo}\n                      alt={company.name}\n                      className=\"w-14 h-14 rounded-full border-2 border-white shadow-sm\"\n                    />\n                    <div className=\"absolute -bottom-1 -right-1 w-4 h-4 rounded-full bg-white flex items-center justify-center shadow-xs\">\n                      <div className=\"w-3 h-3 rounded-full bg-emerald-400\"></div>\n                    </div>\n                  </div>\n                )}\n                <div className=\"flex-1\">\n                  <CardTitle className=\"text-lg font-bold text-emerald-900\">{company.name}</CardTitle>\n                  <CardDescription className=\"text-emerald-700 mt-1 text-xs\">\n                    {company.description}\n                  </CardDescription>\n                </div>\n              </CardHeader>\n              <CardContent className=\"pt-4\">\n                <p className=\"text-slate-700 mb-4 leading-relaxed text-justify text-sm\">{company.details}</p>\n                \n                <div className=\"mb-4\">\n                  <h3 className=\"text-xs font-semibold text-emerald-600 mb-2\">شبکه‌های اجتماعی</h3>\n                  <div className=\"flex gap-2\">\n                    {company.socialMedia.map((social, index) => (\n                      <a\n                        key={index}\n                        href={social.url}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        className=\"w-8 h-8 rounded-full bg-white flex items-center justify-center shadow-xs hover:shadow-sm transition-shadow border border-emerald-100 hover:border-emerald-200\"\n                        aria-label={`${social.platform} ${company.name}`}\n                      >\n                        {social.icon}\n                      </a>\n                    ))}\n                  </div>\n                </div>\n                \n                <div className=\"flex justify-between items-center pt-3 border-t border-emerald-100/50\">\n                  <div className=\"flex gap-1\">\n                    <span className=\"text-xs py-1 px-2 rounded-full bg-emerald-100 text-emerald-700\">فناوری</span>\n                    <span className=\"text-xs py-1 px-2 rounded-full bg-emerald-100 text-emerald-700\">نوآوری</span>\n                  </div>\n                  <a\n                    href={company.website}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className={`flex items-center gap-1 px-3 py-1.5 rounded-full ${company.buttonColor} shadow-xs hover:shadow-sm transition-shadow text-xs`}\n                  >\n                    <FaGlobe className=\"text-xs\" />\n                    <span>وب‌سایت</span>\n                  </a>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* بخش اضافی برای اطلاعات تماس */}\n        <Card className=\"rounded-lg bg-gradient-to-r from-emerald-50 to-green-50 border-0 shadow-md mt-8\">\n          <CardHeader className=\"text-center pb-3\">\n            <CardTitle className=\"text-lg font-bold text-emerald-900\">با ما در ارتباط باشید</CardTitle>\n            <CardDescription className=\"text-slate-600 text-xs\">\n              برای کسب اطلاعات بیشتر درباره خدمات ما، با ما تماس بگیرید\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"text-center pt-1\">\n            <div className=\"flex justify-center gap-4 mb-4\">\n              <a href=\"tel:+982112345678\" className=\"flex items-center gap-1 text-slate-700 hover:text-emerald-600 transition-colors text-xs\">\n                <span className=\"w-8 h-8 rounded-full bg-white flex items-center justify-center shadow-xs\">\n                  📞\n                </span>\n                <span>+98 21 1234 5678</span>\n              </a>\n              <a href=\"mailto:info@example.com\" className=\"flex items-center gap-1 text-slate-700 hover:text-emerald-600 transition-colors text-xs\">\n                <span className=\"w-8 h-8 rounded-full bg-white flex items-center justify-center shadow-xs\">\n                  ✉️\n                </span>\n                <span>info@example.com</span>\n              </a>\n            </div>\n            <Button className=\"rounded-full bg-gradient-to-r from-emerald-600 to-green-600 hover:from-emerald-700 hover:to-green-700 border-0 shadow-xs text-xs py-1.5 px-4\">\n              <FaLeaf className=\"ml-1 text-xs\" />\n              درخواست مشاوره\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":8338},"client/src/components/residents/resident-details.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { X } from \"lucide-react\";\r\nimport { useState } from \"react\";\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogHeader,\r\n  DialogTitle,\r\n} from \"@/components/ui/dialog\";\r\n// فرم‌های شما همان قبلی می‌مانند:\r\nimport FormCDetails from \"@/components/residents/form-details/formC-detail\";\r\nimport FormDDetails from \"@/components/residents/form-details/formD-detail\";\r\nimport FormEDetails from \"@/components/residents/form-details/formE-detail\";\r\nimport FormGDetails from \"@/components/residents/form-details/formG-detail\";\r\nimport FormHDetails from \"@/components/residents/form-details/formH-detail\";\r\nimport FormKDetails from \"@/components/residents/form-details/formK-detail\";\r\nimport RotationForm from \"@/components/residents/form-details/formI-detail\";\r\nimport TeacherActivityForm from \"@/components/residents/form-details/formJ-detail\";\r\nimport ChecklistDisplay from \"./form-details/formF-detail\";\r\n\r\n// تعریف انواع فرم‌ها\r\nconst FORM_TYPES = [\r\n  { type: \"J\", name: \"Initial Assessment\" },\r\n  { type: \"F\", name: \"Mid-Training Evaluation\" },\r\n  { type: \"D\", name: \"Clinical Skills\" },\r\n  { type: \"I\", name: \"Research Progress\" },\r\n  { type: \"G\", name: \"Communication Skills\" },\r\n  { type: \"E\", name: \"Ethics & Professionalism\" },\r\n  { type: \"C\", name: \"Case Presentation\" },\r\n  { type: \"H\", name: \"Hands-on Procedure\" },\r\n  { type: \"K\", name: \"Final Competency\" },\r\n];\r\n\r\ninterface TrainerDetailsProps {\r\n  trainerId: string;\r\n  onClose: () => void;\r\n}\r\n\r\n// این همان ResidentDetails ولی برای Trainer\r\nexport default function TrainerDetails({\r\n  trainerId,\r\n  onClose,\r\n}: TrainerDetailsProps) {\r\n  const [selectedForm, setSelectedForm] = useState<string | null>(null);\r\n\r\n  // اینجا از API ترینر استفاده می‌کنیم\r\n  const { data: trainer, isLoading } = useQuery({\r\n    queryKey: [\"/api/trainers\", trainerId],\r\n    queryFn: () => fetch(`/api/trainers/${trainerId}`).then((r) => r.json()),\r\n  });\r\n\r\n  if (isLoading) return <div>در حال بارگذاری...</div>;\r\n  if (!trainer) return <div>ترینر پیدا نشد.</div>;\r\n\r\n  return (\r\n    <div className=\"relative bg-white rounded-lg shadow-lg border border-slate-200 p-6\">\r\n      {/* ردیف بالا: عکس + دکمه فرم‌ها + اکشن */}\r\n      <div className=\"flex items-center justify-between mb-4 w-full\">\r\n        <div className=\"flex-shrink-0 w-24 h-24 rounded-full border border-slate-300 overflow-hidden\">\r\n          {trainer.profileImageUrl ? (\r\n            <img\r\n              src={\r\n                trainer.photo\r\n                  ? `http://localhost:5000${trainer.photo}`\r\n                  : \"/assets/img/default-avatar.png\"\r\n              }\r\n              className=\"w-12 h-12 rounded-full mx-auto\"\r\n            />\r\n          ) : (\r\n            <div className=\"w-full h-full flex items-center justify-center bg-slate-200 text-slate-500\">\r\n              عکس\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"flex-1 flex justify-center space-x-4 overflow-x-auto mx-4\">\r\n          {FORM_TYPES.map((ft) => (\r\n            <Button\r\n              key={ft.type}\r\n              onClick={() => setSelectedForm(ft.type)}\r\n              className={`w-16 h-16 rounded-full flex items-center justify-center text-sm font-semibold\r\n                ${\r\n                  selectedForm === ft.type\r\n                    ? \"bg-blue-500 text-white\"\r\n                    : \"bg-slate-100 text-slate-700\"\r\n                }\r\n                hover:bg-slate-200 transition`}\r\n              title={ft.name}\r\n            >\r\n              {ft.type}\r\n            </Button>\r\n          ))}\r\n        </div>\r\n\r\n        <div className=\"flex-shrink-0\">\r\n          <Button size=\"sm\" className=\"bg-red-500 text-white hover:bg-red-600\">\r\n            Disciplinary Actions\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* اطلاعات ترینر */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 border-t border-slate-200 pt-4 mt-4\">\r\n        <div>\r\n          <h4 className=\"font-medium text-slate-900 mb-2\">اطلاعات شخصی</h4>\r\n          <ul className=\"text-sm text-slate-700 space-y-1\">\r\n            <li>\r\n              <strong>نام کامل:</strong> {trainer.name} {trainer.lastName}\r\n            </li>\r\n            <li>\r\n              <strong>جنسیت:</strong> {trainer.gender}\r\n            </li>\r\n            <li>\r\n              <strong>شماره تماس:</strong> {trainer.phoneNumber}\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div>\r\n          <h4 className=\"font-medium text-slate-900 mb-2\">اطلاعات آموزشی</h4>\r\n          <ul className=\"text-sm text-slate-700 space-y-1\">\r\n            <li>\r\n              <strong>دیپارتمنت:</strong> {trainer.department}\r\n            </li>\r\n            <li>\r\n              <strong>تاریخ شروع:</strong> {trainer.joiningDate}\r\n            </li>\r\n            <li>\r\n              <strong>سال آموزشی:</strong> {trainer.trainingYear}\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n\r\n      {/* دیالوگ برای فرم */}\r\n      <Dialog open={!!selectedForm} onOpenChange={() => setSelectedForm(null)}>\r\n        <DialogContent\r\n          className=\"w-[60%] max-w-none \r\n                  max-h-[90vh] overflow-y-auto \r\n                  mt-10 mx-auto\r\n                  p-4 bg-white rounded-lg\"\r\n        >\r\n          <DialogHeader>\r\n            <DialogTitle>جزئیات فرم {selectedForm}</DialogTitle>\r\n          </DialogHeader>\r\n\r\n          {selectedForm === \"C\" && (\r\n            <FormCDetails\r\n              trainerId={trainerId}\r\n              onClose={() => setSelectedForm(null)}\r\n            />\r\n          )}\r\n          {selectedForm === \"I\" && <RotationForm trainerId={trainerId} />}\r\n          {selectedForm === \"J\" && (\r\n            <TeacherActivityForm trainerId={trainerId} />\r\n          )}\r\n\r\n          {selectedForm === \"F\" && <ChecklistDisplay trainerId={trainerId} />}\r\n          {selectedForm === \"D\" && (\r\n            <FormDDetails\r\n              trainerId={trainerId}\r\n              onClose={() => setSelectedForm(null)}\r\n            />\r\n          )}\r\n          {selectedForm === \"E\" && (\r\n            <FormEDetails\r\n              trainerId={trainerId}\r\n              onClose={() => setSelectedForm(null)}\r\n            />\r\n          )}\r\n          {selectedForm === \"G\" && (\r\n            <FormGDetails\r\n              trainerId={trainerId}\r\n              onClose={() => setSelectedForm(null)}\r\n            />\r\n          )}\r\n          {selectedForm === \"H\" && (\r\n            <FormHDetails\r\n              trainerId={trainerId}\r\n              onClose={() => setSelectedForm(null)}\r\n            />\r\n          )}\r\n\r\n          {selectedForm === \"K\" && (\r\n            <FormKDetails\r\n              trainerId={trainerId} // یا trainerId\r\n              onClose={() => setSelectedForm(null)}\r\n            />\r\n          )}\r\n          {/* بقیه فرم‌ها را هم مشابه اضافه کنید */}\r\n        </DialogContent>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","size_bytes":7217},"server/models/form-I.ts":{"content":"// models/RotationForm.ts\nimport mongoose, { Schema, Document } from \"mongoose\";\n\ninterface IWeek {\n  cases: number;\n  level: string; // مثل \"1\", \"2\", \"1-2\"\n}\n\ninterface IEnglishRow {\n  weeks: IWeek[];\n  total: number;\n}\n\ninterface IPersianRow {\n  mark: number; // تغییر از string به number\n  teacherName: string;\n  teacherSign: string;\n  note: string;\n}\n\nexport interface IRotationForm extends Document {\n  trainerId: mongoose.Schema.Types.ObjectId;\n  header: {\n    name: string;\n    parentType: string;\n    parentName: string;\n    department: string;\n    trainingYear: string;\n    rotationName: string;\n    rotationFrom: string;\n    rotationTo: string;\n    date: string;\n  };\n  persianRows: IPersianRow[];\n  persianNote: string;\n  rows: IEnglishRow[];\n  createdAt: Date;\n}\n\nconst WeekSchema = new Schema<IWeek>({\n  cases: { type: Number, default: 0 },\n  level: { type: String, default: \"\" },\n});\n\nconst EnglishRowSchema = new Schema<IEnglishRow>({\n  weeks: { type: [WeekSchema], default: [] },\n  total: { type: Number, default: 0 },\n});\n\nconst PersianRowSchema = new Schema<IPersianRow>({\n  mark: { type: Number, default: 0 }, // تغییر\n  teacherName: { type: String, default: \"\" },\n  teacherSign: { type: String, default: \"\" },\n  note: { type: String, default: \"\" },\n});\n\nconst RotationFormSchema = new Schema<IRotationForm>({\n  trainerId: { type: mongoose.Schema.Types.ObjectId, ref: \"Trainer\", required: true },\n  header: {\n    name: { type: String, required: true },\n    parentType: { type: String, default: \"\" },\n    parentName: { type: String, default: \"\" },\n    department: { type: String, default: \"\" },\n    trainingYear: { type: String, required: true },\n    rotationName: { type: String, required: true }, // فقط اینجا\n    rotationFrom: { type: String, default: \"\" },\n    rotationTo: { type: String, default: \"\" },\n    date: { type: String, default: \"\" },\n  },\n  persianRows: [PersianRowSchema],\n  persianNote: { type: String, default: \"\" },\n  rows: [EnglishRowSchema],\n  createdAt: { type: Date, default: Date.now },\n});\n// ✅ محدود کردن یک فرم برای هر ترینر\nRotationFormSchema.index({ trainerId: 1 }, { unique: true });\n\nexport default mongoose.model<IRotationForm>(\"RotationForm\", RotationFormSchema);\n","size_bytes":2267},"server/routes/teacherRoutes.ts":{"content":"import express from 'express';\nimport { TeacherModel } from '../models';\nimport { z } from 'zod';\n\nconst router = express.Router();\n\n// Teacher validation schema\nconst createTeacherSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  lostname: z.string().min(1, \"Last Name is required\"),\n  fatherName: z.string().min(1, \"Father name is required\"),\n  grandfatherName: z.string().min(1, \"Grandfather name is required\"),\n  academicRank: z.string().min(1, \"Academic rank is required\"),\n  rankAchievementDate: z.string().transform((str) => new Date(str)),\n  trainerAppointmentDate: z.string().transform((str) => new Date(str)),\n  gender: z.enum([\"Male\", \"Female\"]),\n  province: z.string().min(1, \"Province is required\"),\n  subject: z.string().min(1, \"Subject is required\"),\n  position: z.string().min(1, \"Position is required\"),\n  hospital: z.string().min(1, \"Hospital is required\"),\n  dateOfBirth: z.string().transform((str) => new Date(str)),\n  idNumber: z.string().min(1, \"ID number is required\"),\n  dutyStartDate: z.string().transform((str) => new Date(str)),\n  contactInfo: z.string().min(1, \"Contact info is required\"),\n  whatsappNumber: z.string().min(1, \"WhatsApp number is required\"),\n  emailAddress: z.string().email(\"Valid email is required\"),\n  postCode: z.string().min(1, \"Post code is required\"),\n  appointmentType: z.string().min(1, \"Appointment type is required\"),\n  // department: z.string().min(1, \"Department is required\"),\n  // experience: z.number().min(0, \"Experience must be non-negative\"),\n  status: z.string().optional().default(\"active\"),\n  profileImageUrl: z.string().optional(),\n});\n\nconst updateTeacherSchema = createTeacherSchema.partial();\n\n// Get all teachers\nrouter.get('/', async (req, res) => {\n  try {\n    const teachers = await TeacherModel.find().sort({ createdAt: -1 });\n    res.json(teachers);\n  } catch (error) {\n    console.error('Error fetching teachers:', error);\n    res.status(500).json({ message: 'Failed to fetch teachers' });\n  }\n});\n\n// Get teacher by ID\nrouter.get('/:id', async (req, res) => {\n  try {\n    const teacher = await TeacherModel.findById(req.params.id);\n    if (!teacher) {\n      return res.status(404).json({ message: 'Teacher not found' });\n    }\n    res.json(teacher);\n  } catch (error) {\n    console.error('Error fetching teacher:', error);\n    res.status(500).json({ message: 'Failed to fetch teacher' });\n  }\n});\n\n// Create new teacher\nrouter.post('/', async (req, res) => {\n  try {\n    const validatedData = createTeacherSchema.parse(req.body);\n    const teacher = new TeacherModel(validatedData);\n    const savedTeacher = await teacher.save();\n    res.status(201).json(savedTeacher);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ \n        message: 'Validation error', \n        errors: error.errors \n      });\n    }\n    console.error('Error creating teacher:', error);\n    res.status(500).json({ message: 'Failed to create teacher' });\n  }\n});\n\n// Update teacher\nrouter.put('/:id', async (req, res) => {\n  try {\n    const validatedData = updateTeacherSchema.parse(req.body);\n    const teacher = await TeacherModel.findByIdAndUpdate(\n      req.params.id,\n      { ...validatedData, updatedAt: new Date() },\n      { new: true, runValidators: true }\n    );\n    \n    if (!teacher) {\n      return res.status(404).json({ message: 'Teacher not found' });\n    }\n    \n    res.json(teacher);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ \n        message: 'Validation error', \n        errors: error.errors \n      });\n    }\n    console.error('Error updating teacher:', error);\n    res.status(500).json({ message: 'Failed to update teacher' });\n  }\n});\n\n// Delete teacher\nrouter.delete('/:id', async (req, res) => {\n  try {\n    const teacher = await TeacherModel.findByIdAndDelete(req.params.id);\n    if (!teacher) {\n      return res.status(404).json({ message: 'Teacher not found' });\n    }\n    res.json({ message: 'Teacher deleted successfully' });\n  } catch (error) {\n    console.error('Error deleting teacher:', error);\n    res.status(500).json({ message: 'Failed to delete teacher' });\n  }\n});\n\nexport { router as teacherRoutes };","size_bytes":4202},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/residents/form-details/formE-detail.tsx":{"content":"// components/forms/FormEDetailsTable.tsx\r\nimport React, { useEffect, useState, useRef } from \"react\";\r\nimport * as XLSX from \"xlsx\";\r\n\r\ninterface FormEDetailsProps {\r\n  trainerId: string;\r\n  onClose?: () => void;\r\n}\r\n\r\ninterface Score {\r\n  score: number;\r\n  teacherName: string;\r\n}\r\n\r\ninterface FormE {\r\n  _id: string;\r\n  trainerId: string;\r\n  trainer: string;\r\n  Name: string;\r\n  parentType: string;\r\n  trainingYear: string;\r\n  incidentTitle: string;\r\n  date: string;\r\n  scores: Score[];\r\n  averageScore: number;\r\n}\r\n\r\nexport default function FormEDetails({ trainerId, onClose }: FormEDetailsProps) {\r\n  const [data, setData] = useState<FormE | null>(null);\r\n  const [editing, setEditing] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const printRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const res = await fetch(`/api/evaluationFormE?trainerId=${trainerId}`);\r\n        if (!res.ok) throw new Error(\"خطا در دریافت داده‌ها\");\r\n        const result = await res.json();\r\n        const form = Array.isArray(result) ? result[0] : result;\r\n        setData({ ...form, scores: form.scores || [] });\r\n      } catch (err) {\r\n        console.error(err);\r\n        setData(null);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    if (trainerId) fetchData();\r\n  }, [trainerId]);\r\n\r\n  const handleChangeMainField = (field: keyof FormE, value: string | number) => {\r\n    if (!data) return;\r\n    setData({ ...data, [field]: value });\r\n  };\r\n\r\n  const handleChangeScore = (idx: number, field: keyof Score, value: string | number) => {\r\n    if (!data) return;\r\n    const newScores = [...data.scores];\r\n    newScores[idx] = { ...newScores[idx], [field]: value };\r\n    setData({ ...data, scores: newScores });\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    if (!data) return;\r\n    try {\r\n      const res = await fetch(`/api/evaluationFormE/${data._id}`, {\r\n        method: \"PUT\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(data),\r\n      });\r\n      if (!res.ok) throw new Error(\"خطا در ذخیره تغییرات\");\r\n      const result = await res.json();\r\n      setData(result.updated);\r\n      setEditing(false);\r\n      alert(\"✅ تغییرات با موفقیت ذخیره شد\");\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(\"❌ خطا در ذخیره تغییرات\");\r\n    }\r\n  };\r\n\r\n  const handlePrint = () => {\r\n    if (!printRef.current) return;\r\n    const printContents = printRef.current.innerHTML;\r\n    const printWindow = window.open(\"\", \"_blank\", \"width=1000,height=600\");\r\n    if (printWindow) {\r\n      printWindow.document.write(`\r\n        <html>\r\n          <head>\r\n            <title>Form E</title>\r\n            <style>\r\n              body { font-family:sans-serif; direction:rtl; margin:20px; }\r\n              .personal-info { display: flex; justify-content: space-between; margin-bottom:24px; }\r\n              .personal-info > div { flex: 1; text-align:center; }\r\n              table { width:100%; border-collapse:collapse; margin-top:16px; }\r\n              th, td { border:1px solid #000; padding:8px; text-align:center; }\r\n              th { background:#f0f0f0; }\r\n            </style>\r\n          </head>\r\n          <body>\r\n            ${printContents}\r\n            <script>\r\n              window.onload = function() { window.print(); window.close(); }\r\n            </script>\r\n          </body>\r\n        </html>\r\n      `);\r\n      printWindow.document.close();\r\n    }\r\n  };\r\n\r\n  const handleExportExcel = () => {\r\n    if (!data) return;\r\n    const wb = XLSX.utils.book_new();\r\n\r\n    const detailsWS = XLSX.utils.json_to_sheet([\r\n      { فیلد: \"نام\", مقدار: data.Name },\r\n      { فیلد: \"نام پدر\", مقدار: data.parentType },\r\n      { فیلد: \"سال تریننگ\", مقدار: data.trainingYear },\r\n      { فیلد: \"تاریخ\", مقدار: data.date },\r\n    ]);\r\n    XLSX.utils.book_append_sheet(wb, detailsWS, \"مشخصات\");\r\n\r\n    const scoresWS = XLSX.utils.json_to_sheet(\r\n      Array.from({ length: 6 }).map((_, idx) => ({\r\n        \"عنوان واقعه\": idx === 0 ? data.incidentTitle : \"\",\r\n        \"نمره داده شده\": data.scores[idx]?.score ?? \"\",\r\n        \"نام استاد\": data.scores[idx]?.teacherName ?? \"\",\r\n        \"امضای استاد\": \"\",\r\n        \"ملاحظات\": \"\",\r\n      }))\r\n    );\r\n    XLSX.utils.book_append_sheet(wb, scoresWS, \"FormE\");\r\n    XLSX.writeFile(wb, `FormE_${data.Name}.xlsx`);\r\n  };\r\n\r\n  if (loading) return <div className=\"p-4 text-center\">در حال بارگذاری...</div>;\r\n  if (!data) return <div className=\"p-4 text-center\">فرمی برای این ترینر موجود نیست</div>;\r\n\r\n  return (\r\n    <div className=\"p-4\">\r\n      <div className=\"mb-4 flex items-center justify-between\">\r\n        <h2 className=\"text-lg font-semibold\">Form E - فرم ارزشیابی سالانه دستیار</h2>\r\n        <div className=\"space-x-2\">\r\n          {editing ? (\r\n            <button onClick={handleSave} className=\"bg-green-600 text-white px-3 py-1 rounded\">ذخیره</button>\r\n          ) : (\r\n            <>\r\n              <button onClick={() => setEditing(true)} className=\"bg-blue-600 text-white px-3 py-1 rounded\">ویرایش</button>\r\n              <button onClick={handlePrint} className=\"bg-green-600 text-white px-3 py-1 rounded\">چاپ</button>\r\n              <button onClick={handleExportExcel} className=\"bg-yellow-500 text-white px-3 py-1 rounded\">Excel</button>\r\n            </>\r\n          )}\r\n          {onClose && <button onClick={onClose} className=\"bg-gray-500 text-white px-3 py-1 rounded\">بستن</button>}\r\n        </div>\r\n      </div>\r\n\r\n      <div ref={printRef} className=\"overflow-auto border rounded-lg p-4 bg-white\">\r\n        {/* اطلاعات شخصی در یک ردیف */}\r\n        <div className=\"personal-info\">\r\n          <div>\r\n            <label className=\"font-medium\">نام</label>\r\n            {editing ? (\r\n              <input type=\"text\" value={data.Name} onChange={(e) => handleChangeMainField(\"Name\", e.target.value)} className=\"w-full border px-2 py-1 rounded\" />\r\n            ) : <div>{data.Name}</div>}\r\n          </div>\r\n          <div>\r\n            <label className=\"font-medium\">نام پدر</label>\r\n            {editing ? (\r\n              <input type=\"text\" value={data.parentType} onChange={(e) => handleChangeMainField(\"parentType\", e.target.value)} className=\"w-full border px-2 py-1 rounded\" />\r\n            ) : <div>{data.parentType}</div>}\r\n          </div>\r\n          <div>\r\n            <label className=\"font-medium\">سال تریننگ</label>\r\n            {editing ? (\r\n              <input type=\"text\" value={data.trainingYear} onChange={(e) => handleChangeMainField(\"trainingYear\", e.target.value)} className=\"w-full border px-2 py-1 rounded\" />\r\n            ) : <div>{data.trainingYear}</div>}\r\n          </div>\r\n          <div>\r\n            <label className=\"font-medium\">تاریخ</label>\r\n            {editing ? (\r\n              <input type=\"date\" value={data.date} onChange={(e) => handleChangeMainField(\"date\", e.target.value)} className=\"w-full border px-2 py-1 rounded\" />\r\n            ) : <div>{data.date}</div>}\r\n          </div>\r\n        </div>\r\n\r\n        {/* جدول نمرات */}\r\n        <table className=\"w-full border-collapse border border-gray-400 text-center\">\r\n          <thead>\r\n            <tr className=\"bg-gray-200\">\r\n              <th className=\"border p-2\">عنوان واقعه</th>\r\n              <th className=\"border p-2\">نمره داده شده</th>\r\n              <th className=\"border p-2\">نام استاد</th>\r\n              <th className=\"border p-2\">امضای استاد</th>\r\n              <th className=\"border p-2\">ملاحظات</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {Array.from({ length: 6 }).map((_, idx) => (\r\n              <tr key={idx}>\r\n                {idx === 0 && (\r\n                  <td rowSpan={6} className=\"border p-2 align-top\">{data.incidentTitle}</td>\r\n                )}\r\n                <td className=\"border p-2\">\r\n                  {editing ? (\r\n                    <input type=\"number\" min={0} max={100} value={data.scores[idx]?.score ?? \"\"} onChange={(e) => handleChangeScore(idx, \"score\", Number(e.target.value))} className=\"w-full border px-2 py-1 rounded\" />\r\n                  ) : data.scores[idx]?.score ?? \"\"}\r\n                </td>\r\n                <td className=\"border p-2\">\r\n                  {editing ? (\r\n                    <input type=\"text\" value={data.scores[idx]?.teacherName ?? \"\"} onChange={(e) => handleChangeScore(idx, \"teacherName\", e.target.value)} className=\"w-full border px-2 py-1 rounded\" />\r\n                  ) : data.scores[idx]?.teacherName ?? \"\"}\r\n                </td>\r\n                <td className=\"border p-2\"></td>\r\n                <td className=\"border p-2\"></td>\r\n              </tr>\r\n            ))}\r\n            <tr>\r\n              <td className=\"border p-2 font-semibold\">اوسط نمرات</td>\r\n              <td className=\"border p-2\" colSpan={3}>{data.averageScore}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","size_bytes":9321},"server/routes/form-I.ts":{"content":"import express, { Request, Response } from \"express\";\nimport mongoose from \"mongoose\";\nimport {\n  createRotationForm,\n  getRotationForms,\n  getRotationFormById,\n  updateRotationForm,\n} from \"../controllers/form-I\";\n\nconst router = express.Router();\n\n// ✅ ایجاد فرم جدید\nrouter.post(\"/\", createRotationForm);\n\n// ✅ گرفتن فرم‌های یک ترینر خاص\nrouter.get(\"/:trainerId\", getRotationForms);\n\n// ✅ گرفتن فرم خاص با ID\nrouter.get(\"/form/:id\", getRotationFormById);\n\n// ✅ ویرایش فرم خاص با ID\nrouter.put(\"/form/:id\", updateRotationForm);\n\nexport default router;\n","size_bytes":624},"server/routes/form-k.ts":{"content":"// routes/monographEvaluationRoutes.ts\r\nimport { Router } from \"express\";\r\nimport { MonographEvaluationController } from \"../controllers/form-K\";\r\n\r\nconst router = Router();\r\n\r\n// 🔹 ایجاد فرم جدید\r\nrouter.post(\"/\", MonographEvaluationController.create);\r\n\r\n// 🔹 دریافت همه فرم‌ها یا فیلتر بر اساس trainerId\r\nrouter.get(\"/\", MonographEvaluationController.getAll);\r\n\r\n// 🔹 دریافت فرم بر اساس ID\r\nrouter.get(\"/:id\", MonographEvaluationController.getById);\r\n\r\n// 🔹 بروزرسانی فرم بر اساس ID\r\nrouter.put(\"/:id\", MonographEvaluationController.update);\r\n\r\n// 🔹 حذف فرم بر اساس ID\r\nrouter.delete(\"/:id\", MonographEvaluationController.delete);\r\n\r\nexport default router;\r\n","size_bytes":762},"client/src/components/forms/add-form-dialog.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\ninterface AddFormDialogProps {\n  residentId: string;\n  onClose: () => void;\n  availableFormTypes: string[];\n}\n\nconst FORM_TYPES = {\n  J: 'Initial Assessment & Orientation',\n  F: 'Mid-Training Evaluation',\n  D: 'Clinical Skills Assessment',\n  I: 'Research & Academic Progress',\n  G: 'Communication Skills Review',\n  E: 'Ethics & Professionalism',\n  C: 'Case Presentation Evaluation',\n  H: 'Hands-on Procedure Assessment',\n  K: 'Final Competency Evaluation',\n};\n\nexport default function AddFormDialog({ residentId, onClose, availableFormTypes }: AddFormDialogProps) {\n  const [selectedFormType, setSelectedFormType] = useState<string>('');\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const createFormMutation = useMutation({\n    mutationFn: async (formData: any) => {\n      await apiRequest('POST', '/api/forms', formData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/residents', residentId, 'forms'] });\n      toast({\n        title: \"Success\",\n        description: \"Form created successfully.\",\n      });\n      onClose();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create form. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreate = () => {\n    if (!selectedFormType) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a form type.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createFormMutation.mutate({\n      residentId,\n      formType: selectedFormType,\n      formData: {},\n      status: 'draft',\n    });\n  };\n\n  return (\n    <Dialog open={true} onOpenChange={onClose}>\n      <DialogContent data-testid=\"dialog-add-form\">\n        <DialogHeader>\n          <DialogTitle data-testid=\"text-add-form-title\">Add New Form</DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4 mt-4\">\n          <div>\n            <Label htmlFor=\"formType\">Form Type</Label>\n            <Select value={selectedFormType} onValueChange={setSelectedFormType}>\n              <SelectTrigger data-testid=\"select-form-type\">\n                <SelectValue placeholder=\"Select form type\" />\n              </SelectTrigger>\n              <SelectContent>\n                {availableFormTypes.map((formType) => (\n                  <SelectItem key={formType} value={formType}>\n                    Form {formType} - {FORM_TYPES[formType as keyof typeof FORM_TYPES]}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        <div className=\"flex items-center justify-end pt-4 border-t border-slate-200 mt-6 space-x-3\">\n          <Button variant=\"outline\" onClick={onClose} data-testid=\"button-cancel-add-form\">\n            Cancel\n          </Button>\n          <Button\n            onClick={handleCreate}\n            disabled={createFormMutation.isPending}\n            className=\"bg-hospital-green-600 hover:bg-hospital-green-700\"\n            data-testid=\"button-create-form\"\n          >\n            {createFormMutation.isPending ? 'Creating...' : 'Create Form'}\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":4089},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"server/db.ts":{"content":"import mongoose from 'mongoose';\n\n// MongoDB connection string - prioritize environment variable first\nlet MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/hospital-residents';\n\n// If DATABASE_URL is set and looks like MongoDB, use it\nif (process.env.DATABASE_URL && process.env.DATABASE_URL.includes('mongodb')) {\n  MONGODB_URI = process.env.DATABASE_URL;\n} else if (process.env.DATABASE_URL && process.env.DATABASE_URL.includes('postgresql')) {\n  console.log('PostgreSQL DATABASE_URL detected, using MongoDB URI for hospital data');\n}\n\nlet isConnected = false;\n\n// Connect to MongoDB with retry logic\nexport async function connectDB() {\n  if (isConnected) {\n    return;\n  }\n  \n  try {\n    await mongoose.connect(MONGODB_URI, {\n      serverSelectionTimeoutMS: 5000, // 5 second timeout\n      socketTimeoutMS: 45000,\n    });\n    isConnected = true;\n    console.log('Connected to MongoDB successfully at:', MONGODB_URI);\n    await seedDatabase();\n  } catch (error) {\n    console.warn('MongoDB connection failed, using in-memory fallback:', (error as Error).message);\n    console.log('To connect to MongoDB Atlas, set MONGODB_URI environment variable');\n    // Initialize in-memory data for demo\n    await initializeInMemoryData();\n    // Re-throw the error so storage.ts knows MongoDB failed\n    throw error;\n  }\n}\n\n// Seed database with sample data\nasync function seedDatabase() {\n  // Only seed if actually connected to MongoDB\n  if (!isConnected || mongoose.connection.readyState !== 1) {\n    console.log('Skipping database seeding - MongoDB not connected');\n    return;\n  }\n  \n  try {\n    const { ResidentModel, TeacherModel } = await import('./models');\n    \n    // Check if data already exists\n    const residentCount = await ResidentModel.countDocuments();\n    const teacherCount = await TeacherModel.countDocuments();\n    \n    if (residentCount === 0) {\n      // Seed residents\n      const residents = [\n        {\n          fullName: \"Dr. Sarah Johnson\",\n          age: 28,\n          gender: \"Female\",\n          department: \"Internal Medicine\",\n          startDate: new Date(\"2024-01-15\"),\n          status: \"active\"\n        },\n        {\n          fullName: \"Dr. Michael Chen\",\n          age: 29,\n          gender: \"Male\", \n          department: \"Surgery\",\n          startDate: new Date(\"2024-02-01\"),\n          status: \"active\"\n        },\n        {\n          fullName: \"Dr. Emily Rodriguez\",\n          age: 27,\n          gender: \"Female\",\n          department: \"Pediatrics\", \n          startDate: new Date(\"2024-03-10\"),\n          status: \"active\"\n        }\n      ];\n      \n      await ResidentModel.insertMany(residents);\n      console.log('Sample residents data seeded successfully');\n    }\n    \n    if (teacherCount === 0) {\n      // Seed teachers\n      const teachers = [\n        {\n          fullName: \"Dr. Robert Williams\",\n          email: \"r.williams@hospital.com\",\n          phone: \"555-0101\",\n          department: \"Internal Medicine\",\n          academicRank: \"Professor\",\n          appointmentDate: new Date(\"2015-08-01\"),\n          status: \"active\"\n        },\n        {\n          fullName: \"Dr. Lisa Anderson\",\n          email: \"l.anderson@hospital.com\", \n          phone: \"555-0102\",\n          department: \"Surgery\",\n          academicRank: \"Associate Professor\",\n          appointmentDate: new Date(\"2018-09-15\"),\n          status: \"active\"\n        }\n      ];\n      \n      await TeacherModel.insertMany(teachers);\n      console.log('Sample teachers data seeded successfully');\n    }\n  } catch (error) {\n    console.error('Error seeding database:', error);\n  }\n}\n\n// Initialize in-memory data when MongoDB is not available\nasync function initializeInMemoryData() {\n  console.log('MongoDB initialization failed, using in-memory storage');\n  // Create test Form F data for demonstration (skip database check in in-memory mode)\n  try {\n    const Checklist = (await import('./models/form-F')).default;\n    \n    // In in-memory mode, just create the data without checking if it exists\n    if (true) {\n      const testFormF = new Checklist({\n        studentName: \"احمد رسولی\",\n        fatherName: \"محمد\",\n        year: \"1403\",\n        sections: [\n          {\n            name: \"آغاز فعالیت (10%)\",\n            activities: [\n              {\n                id: \"uniform\",\n                title: \"یونیفورم\",\n                percent: 6,\n                months: [\n                  { month: 1, value: 5 }, { month: 2, value: 6 }, { month: 3, value: 5 },\n                  { month: 4, value: 6 }, { month: 5, value: 5 }, { month: 6, value: 6 },\n                  { month: 7, value: 5 }, { month: 8, value: 6 }, { month: 9, value: 5 },\n                  { month: 10, value: 6 }, { month: 11, value: 5 }, { month: 12, value: 6 }\n                ],\n                total: 66\n              },\n              {\n                id: \"coworkers\",\n                title: \"برخورد با همکاران\",\n                percent: 2,\n                months: [\n                  { month: 1, value: 2 }, { month: 2, value: 2 }, { month: 3, value: 1 },\n                  { month: 4, value: 2 }, { month: 5, value: 2 }, { month: 6, value: 2 },\n                  { month: 7, value: 1 }, { month: 8, value: 2 }, { month: 9, value: 2 },\n                  { month: 10, value: 2 }, { month: 11, value: 1 }, { month: 12, value: 2 }\n                ],\n                total: 21\n              },\n              {\n                id: \"patients\",\n                title: \"برخورد با مریض\",\n                percent: 2,\n                months: [\n                  { month: 1, value: 2 }, { month: 2, value: 2 }, { month: 3, value: 2 },\n                  { month: 4, value: 1 }, { month: 5, value: 2 }, { month: 6, value: 2 },\n                  { month: 7, value: 2 }, { month: 8, value: 1 }, { month: 9, value: 2 },\n                  { month: 10, value: 2 }, { month: 11, value: 2 }, { month: 12, value: 1 }\n                ],\n                total: 21\n              }\n            ]\n          },\n          {\n            name: \"دسپلین (24%)\",\n            activities: [\n              {\n                id: \"attendance\",\n                title: \"حاضر بودن\",\n                percent: 6,\n                months: [\n                  { month: 1, value: 6 }, { month: 2, value: 5 }, { month: 3, value: 6 },\n                  { month: 4, value: 6 }, { month: 5, value: 5 }, { month: 6, value: 6 },\n                  { month: 7, value: 6 }, { month: 8, value: 5 }, { month: 9, value: 6 },\n                  { month: 10, value: 6 }, { month: 11, value: 5 }, { month: 12, value: 6 }\n                ],\n                total: 68\n              }\n            ]\n          }\n        ]\n      });\n      \n      await testFormF.save();\n      console.log('Test Form F data created for student: احمد رسولی');\n    }\n  } catch (error) {\n    console.log('Could not create test Form F data:', error);\n  }\n}\n\n// Check if MongoDB is connected\nexport function isMongoConnected() {\n  return isConnected && mongoose.connection.readyState === 1;\n}\n\n// Export mongoose for direct use if needed\nexport { mongoose };","size_bytes":7145},"server/routes/form-J.ts":{"content":"// routes/teacherActivityRoutes.ts\nimport express from \"express\";\nimport {\n  createTeacherActivity,\n  getSingleTeacherActivityByTrainer,\n  getTeacherActivityById,\n  updateTeacherActivity,\n  deleteTeacherActivity,\n} from \"../controllers/form-J\";\n\nconst router = express.Router();\n\n// ✅ ایجاد فرم جدید\nrouter.post(\"/\", createTeacherActivity);\n\n\n// مسیر جدید برای گرفتن یک فرم از روی trainerId\nrouter.get(\"/:trainerId\", getSingleTeacherActivityByTrainer);\n\n// ✅ دریافت فرم با ID خاص\nrouter.get(\"/:id\", getTeacherActivityById);\n\n// ✅ بروزرسانی فرم با ID\nrouter.put(\"/:id\", updateTeacherActivity);\n\n// ✅ حذف فرم با ID\nrouter.delete(\"/:id\", deleteTeacherActivity);\n\nexport { router as teacherActivityRoutes };\n","size_bytes":787},"server/models/Resident.ts":{"content":"import mongoose, { Document, Schema } from \"mongoose\";\n\nexport interface IResident extends Document {\n  _id: string;\n  fullName: string;\n  age: number;\n  gender: string;\n  department: string;\n  startDate: Date;\n  endDate?: Date;\n  status: string;\n  profileImageUrl?: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nconst residentSchema = new Schema<IResident>({\n  fullName: { type: String, required: true },\n  age: { type: Number, required: true },\n  gender: { type: String, required: true },\n  department: { type: String, required: true },\n  startDate: { type: Date, required: true },\n  endDate: Date,\n  status: { type: String, required: true, default: \"active\" },\n  profileImageUrl: String,\n  createdAt: { type: Date, default: Date.now },\n  updatedAt: { type: Date, default: Date.now },\n});\n\nexport const ResidentModel = mongoose.model<IResident>(\"Resident\", residentSchema);","size_bytes":878},"client/src/components/residents/form-details/formK-detail.tsx":{"content":"// components/forms/FormKDetails.tsx\nimport React, { useEffect, useState, useRef } from \"react\";\nimport * as XLSX from \"xlsx\";\n\ninterface FormKDetailsProps {\n  trainerId: string;\n  onClose?: () => void;\n}\n\ninterface Evaluation {\n  section: string;\n  percentage: number | string;\n  score: number | string;\n  teacherName: string;\n  teacherSigned: boolean;\n  characteristics?: string;\n  total?: number | string;\n  average?: number | string;\n  notes?: string;\n}\n\ninterface FormK {\n  _id: string;\n  trainer: string;\n  name: string;\n  lastName: string;\n  parentType: string;\n  idNumber: string;\n  department: string;\n  trainingYear: string;\n  startYear: string;\n  date: string;\n  evaluations: Evaluation[];\n  supervisor?: string;\n  departmentHead?: string;\n  programHead?: string;\n}\n\nexport default function FormKDetails({ trainerId, onClose }: FormKDetailsProps) {\n  const [data, setData] = useState<FormK | null>(null);\n  const [editing, setEditing] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [saving, setSaving] = useState(false);\n  const printRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        const res = await fetch(`/api/monographEvaluation?trainerId=${trainerId}`);\n        if (!res.ok) throw new Error(\"فرمی برای این ترینر موجود نیست\");\n        const result = await res.json();\n        if (!result) setData(null);\n        else if (Array.isArray(result) && result.length > 0) setData(result[0]);\n        else if (result && typeof result === \"object\" && result._id) setData(result);\n        else setData(null);\n      } catch (err) {\n        console.error(\"Error fetching form K:\", err);\n        setData(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n    if (trainerId) fetchData();\n  }, [trainerId]);\n\n  const handleSave = async () => {\n    if (!data) return;\n    try {\n      setSaving(true);\n      const res = await fetch(`/api/monographEvaluation/${data._id}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n      if (!res.ok) throw new Error(\"خطا در ذخیره تغییرات\");\n      const result = await res.json();\n      setData(result.updated);\n      setEditing(false);\n      alert(\"✅ تغییرات با موفقیت ذخیره شد\");\n    } catch (err) {\n      console.error(\"Error saving form:\", err);\n      alert(\"❌ خطا در ذخیره تغییرات\");\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleExportExcel = () => {\n    if (!data) return;\n    const wb = XLSX.utils.book_new();\n    const detailsWS = XLSX.utils.json_to_sheet([\n      { فیلد: \"نام\", مقدار: data.name },\n      { فیلد: \"تخلص\", مقدار: data.lastName },\n      { فیلد: \"نام پدر\", مقدار: data.parentType },\n      { فیلد: \"شماره تذکره\", مقدار: data.idNumber },\n      { فیلد: \"رشته\", مقدار: data.department },\n      { فیلد: \"سال آموزش\", مقدار: data.trainingYear },\n      { فیلد: \"سال شروع\", مقدار: data.startYear },\n      { فیلد: \"تاریخ\", مقدار: data.date },\n    ]);\n    XLSX.utils.book_append_sheet(wb, detailsWS, \"مشخصات\");\n\n    if (data.evaluations?.length) {\n      const evalWS = XLSX.utils.json_to_sheet(\n        data.evaluations.map((evaluation, idx) => ({\n          \"#\": idx + 1,\n          بخش: evaluation.section,\n          فیصدی: evaluation.percentage,\n          \"نمره داده شده\": evaluation.score,\n          \"اسم استاد\": evaluation.teacherName,\n          ویژگی‌ها: evaluation.characteristics || \"\",\n          یادداشت‌ها: evaluation.notes || \"\",\n        }))\n      );\n      XLSX.utils.book_append_sheet(wb, evalWS, \"ارزیابی‌ها\");\n    }\n\n    const signWS = XLSX.utils.json_to_sheet([\n      { مسئول: \"استاد راهنما\", نام: data.supervisor || \"\" },\n      { مسئول: \"رئیس دیپارتمنت\", نام: data.departmentHead || \"\" },\n      { مسئول: \"آمر برنامه آموزشی\", نام: data.programHead || \"\" },\n    ]);\n    XLSX.utils.book_append_sheet(wb, signWS, \"امضاها\");\n\n    XLSX.writeFile(wb, `FormK_${data.name}_${data.lastName}.xlsx`);\n  };\n\n  const handlePrint = () => {\n    if (!printRef.current) return;\n    const printContents = printRef.current.innerHTML;\n    const printWindow = window.open(\"\", \"_blank\", \"width=1100,height=700\");\n    if (printWindow) {\n      printWindow.document.write(`\n        <!DOCTYPE html>\n        <html dir=\"rtl\" lang=\"fa\">\n        <head>\n          <meta charset=\"UTF-8\">\n          <title>فرم K - ${data?.name} ${data?.lastName}</title>\n          <style>\n            body { font-family: 'Tahoma','Arial',sans-serif; direction: rtl; margin: 20px; line-height:1.6; color:#000;}\n            table { width:100%; border-collapse: collapse; margin-bottom:25px; font-size:12px; }\n            th, td { border:1px solid #333; padding:6px 8px; text-align:center; }\n            th { background-color:#f5f5f5; font-weight:bold; }\n            .signature-table td { height:60px; vertical-align:bottom; }\n          </style>\n        </head>\n        <body>\n          ${printContents}\n          <script>window.onload=function(){window.print(); setTimeout(()=>window.close(),100);}</script>\n        </body>\n        </html>\n      `);\n      printWindow.document.close();\n    }\n  };\n\n  const handleChangeMainField = (field: keyof FormK, value: string) => {\n    if (!data) return;\n    setData({ ...data, [field]: value });\n  };\n\n  const handleEvaluationChange = (idx: number, field: keyof Evaluation, value: string | number | boolean) => {\n    if (!data) return;\n    const newEvaluations = [...data.evaluations];\n    newEvaluations[idx] = { ...newEvaluations[idx], [field]: value };\n    setData({ ...data, evaluations: newEvaluations });\n  };\n\n  if (loading) return <div className=\"p-4 text-center\">در حال بارگذاری...</div>;\n  if (!data)\n    return (\n      <div className=\"p-4 text-center text-red-500\">\n        فرمی برای این ترینر موجود نیست\n      </div>\n    );\n\n  return (\n    <div className=\"p-4\">\n      <div className=\"mb-4 flex items-center justify-between\">\n        <h2 className=\"text-lg font-semibold\">Form K - فرم ارزیابی مونوگراف</h2>\n        <div className=\"space-x-2\">\n          {editing ? (\n            <>\n              <button\n                onClick={handleSave}\n                disabled={saving}\n                className=\"bg-green-600 text-white px-3 py-1 rounded disabled:bg-gray-400\"\n              >\n                {saving ? \"در حال ذخیره...\" : \"ذخیره\"}\n              </button>\n              <button\n                onClick={() => setEditing(false)}\n                className=\"bg-red-600 text-white px-3 py-1 rounded\"\n              >\n                لغو\n              </button>\n            </>\n          ) : (\n            <>\n              <button\n                onClick={() => setEditing(true)}\n                className=\"bg-blue-600 text-white px-3 py-1 rounded\"\n              >\n                ویرایش\n              </button>\n              <button\n                onClick={handlePrint}\n                className=\"bg-green-600 text-white px-3 py-1 rounded\"\n              >\n                چاپ\n              </button>\n              <button\n                onClick={handleExportExcel}\n                className=\"bg-yellow-500 text-white px-3 py-1 rounded\"\n              >\n                Excel\n              </button>\n            </>\n          )}\n          {onClose && (\n            <button\n              onClick={onClose}\n              className=\"bg-gray-500 text-white px-3 py-1 rounded\"\n            >\n              بستن\n            </button>\n          )}\n        </div>\n      </div>\n\n      <div ref={printRef} className=\"overflow-auto border rounded-lg max-h-[70vh] p-4 bg-white\">\n        {/* مشخصات فردی */}\n        <table className=\"w-full border border-slate-300 mb-6 text-sm\">\n          <tbody>\n            <tr>\n              <td className=\"font-semibold px-3 py-2 border bg-gray-50 w-1/6\">نام</td>\n              <td className=\"px-3 py-2 border w-1/3\">\n                {editing ? <input className=\"w-full border px-2 py-1 rounded\" value={data.name} onChange={(e)=>handleChangeMainField(\"name\",e.target.value)}/> : data.name}\n              </td>\n              <td className=\"font-semibold px-3 py-2 border bg-gray-50 w-1/6\">تخلص</td>\n              <td className=\"px-3 py-2 border w-1/3\">\n                {editing ? <input className=\"w-full border px-2 py-1 rounded\" value={data.lastName} onChange={(e)=>handleChangeMainField(\"lastName\",e.target.value)}/> : data.lastName}\n              </td>\n            </tr>\n            <tr>\n              <td className=\"font-semibold px-3 py-2 border bg-gray-50\">ولد</td>\n              <td className=\"px-3 py-2 border\">{editing ? <input className=\"w-full border px-2 py-1 rounded\" value={data.parentType} onChange={(e)=>handleChangeMainField(\"parentType\",e.target.value)}/> : data.parentType}</td>\n              <td className=\"font-semibold px-3 py-2 border bg-gray-50\">نمبر تذکره</td>\n              <td className=\"px-3 py-2 border\">{editing ? <input className=\"w-full border px-2 py-1 rounded\" value={data.idNumber} onChange={(e)=>handleChangeMainField(\"idNumber\",e.target.value)}/> : data.idNumber}</td>\n            </tr>\n            <tr>\n              <td className=\"font-semibold px-3 py-2 border bg-gray-50\">رشته</td>\n              <td className=\"px-3 py-2 border\">{editing ? <input className=\"w-full border px-2 py-1 rounded\" value={data.department} onChange={(e)=>handleChangeMainField(\"department\",e.target.value)}/> : data.department}</td>\n              <td className=\"font-semibold px-3 py-2 border bg-gray-50\">سال تریننگ</td>\n              <td className=\"px-3 py-2 border\">{editing ? <input className=\"w-full border px-2 py-1 rounded\" value={data.trainingYear} onChange={(e)=>handleChangeMainField(\"trainingYear\",e.target.value)}/> : data.trainingYear}</td>\n            </tr>\n            <tr>\n              <td className=\"font-semibold px-3 py-2 border bg-gray-50\">سال شمول</td>\n              <td className=\"px-3 py-2 border\">{editing ? <input className=\"w-full border px-2 py-1 rounded\" value={data.startYear} onChange={(e)=>handleChangeMainField(\"startYear\",e.target.value)}/> : data.startYear}</td>\n              <td className=\"font-semibold px-3 py-2 border bg-gray-50\">تاریخ</td>\n              <td className=\"px-3 py-2 border\">{editing ? <input className=\"w-full border px-2 py-1 rounded\" value={data.date} onChange={(e)=>handleChangeMainField(\"date\",e.target.value)}/> : data.date}</td>\n            </tr>\n          </tbody>\n        </table>\n\n        {/* جدول ارزیابی */}\n        <div className=\"mb-6\">\n          <h4 className=\"font-semibold mb-2 text-center\">جدول ارزیابی مونوگراف</h4>\n          <table className=\"min-w-full border border-slate-300 text-sm\">\n            <thead>\n              <tr className=\"bg-gray-50\">\n                <th className=\"p-2 border w-8\">#</th>\n                <th className=\"p-2 border w-1/3\">بخش</th>\n                <th className=\"p-2 border w-24\">فیصدی</th>\n                <th className=\"p-2 border w-48\">نمره داده شده</th>\n                <th className=\"p-2 border w-1/3\">اسم استاد</th>\n                <th className=\"p-2 border w-28\">امضای استاد</th>\n              </tr>\n            </thead>\n            <tbody>\n              {data.evaluations.map((evaluation, idx) => (\n                <tr key={idx} className={idx%2===0?\"bg-white\":\"bg-gray-50\"}>\n                  <td className=\"p-2 border text-center\">{idx+1}</td>\n                  <td className=\"p-2 border\">{editing ? <input className=\"w-full border px-1 py-0.5 rounded\" value={evaluation.section} onChange={e=>handleEvaluationChange(idx,\"section\",e.target.value)}/> : evaluation.section}</td>\n                  <td className=\"p-2 border text-center\">{editing ? <input type=\"number\" className=\"w-full border px-1 py-0.5 rounded text-center\" value={evaluation.percentage} onChange={e=>handleEvaluationChange(idx,\"percentage\",Number(e.target.value))}/> : evaluation.percentage}</td>\n                  <td className=\"p-2 border text-center\">{editing ? <input type=\"number\" className=\"w-full border px-1 py-0.5 rounded text-center\" value={evaluation.score} onChange={e=>handleEvaluationChange(idx,\"score\",Number(e.target.value))}/> : evaluation.score}</td>\n                  <td className=\"p-2 border text-center\">{editing ? <input className=\"w-full border px-1 py-0.5 rounded text-center\" value={evaluation.teacherName} onChange={e=>handleEvaluationChange(idx,\"teacherName\",e.target.value)}/> : evaluation.teacherName}</td>\n                  <td className=\"p-2 border text-center\">______________</td>\n                </tr>\n              ))}\n\n              {Array.from({ length: Math.max(0,6-data.evaluations.length) }).map((_,i)=>(\n                <tr key={`empty-${i}`} className=\"bg-white\">\n                  <td className=\"p-2 border text-center\">{data.evaluations.length+i+1}</td>\n                  <td className=\"p-2 border\">&nbsp;</td>\n                  <td className=\"p-2 border\">&nbsp;</td>\n                  <td className=\"p-2 border\">&nbsp;</td>\n                  <td className=\"p-2 border\">&nbsp;</td>\n                  <td className=\"p-2 border text-center\">______________</td>\n                </tr>\n              ))}\n\n              <tr className=\"bg-gray-100 font-semibold\">\n                <td className=\"p-2 border text-center\">7</td>\n                <td className=\"p-2 border text-center\">مجموع نمرات</td>\n                <td className=\"p-2 border text-center\"></td>\n                <td className=\"p-2 border text-center\">اوسط</td>\n                <td className=\"p-2 border\">&nbsp;</td>\n                <td className=\"p-2 border text-center\">______________</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        {/* امضاها */}\n        <table className=\"min-w-full border border-slate-300 signature-table\">\n          <tbody>\n            <tr>\n              <td className=\"font-semibold px-3 py-2 border text-center\">استاد راهنما</td>\n              <td className=\"font-semibold px-3 py-2 border text-center\">رئیس دیپارتمنت</td>\n              <td className=\"font-semibold px-3 py-2 border text-center\">آمر برنامه آموزشی</td>\n            </tr>\n            <tr>\n              <td className=\"px-3 py-2 border text-center min-h-[50px]\">{data.supervisor || \"____________\"}</td>\n              <td className=\"px-3 py-2 border text-center min-h-[50px]\">{data.departmentHead || \"____________\"}</td>\n              <td className=\"px-3 py-2 border text-center min-h-[50px]\">{data.programHead || \"____________\"}</td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15066},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/models/form-H.ts":{"content":"import mongoose, { Schema, Document, Types } from \"mongoose\";\r\n\r\ninterface ITrainingYear {\r\n  year: string;\r\n  totalScore: number;\r\n  instructor: string;\r\n}\r\n\r\nexport interface IEvaluationFormH extends Document {\r\n  trainer: Types.ObjectId; // ⬅️ رفرنس به Trainer\r\n  Name: string;\r\n  parentType: string;\r\n  department: string;\r\n  trainingYears: ITrainingYear[];\r\n  averageScore: number;\r\n  shiftDepartment: string;\r\n  programDirector: string;\r\n}\r\n\r\nconst TrainingYearSchema = new Schema<ITrainingYear>({\r\n  year: { type: String, required: true },\r\n  totalScore: { type: Number, default: 0 },\r\n  instructor: { type: String, default: \"\" },\r\n});\r\n\r\nconst EvaluationFormHSchema = new Schema<IEvaluationFormH>(\r\n  {\r\n    trainer: {\r\n      type: Schema.Types.ObjectId,\r\n      ref: \"Trainer\", // ⬅️ به مدل Trainer وصل می‌شود\r\n      required: true,\r\n    },\r\n    Name: { type: String, required: true },\r\n    parentType: { type: String, required: true },\r\n    department: { type: String, required: true },\r\n    trainingYears: [TrainingYearSchema],\r\n    averageScore: { type: Number, default: 0 },\r\n    shiftDepartment: { type: String, default: \"\" },\r\n    programDirector: { type: String, default: \"\" },\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\nexport const EvaluationFormH = mongoose.model<IEvaluationFormH>(\r\n  \"EvaluationFormH\",\r\n  EvaluationFormHSchema\r\n);\r\n","size_bytes":1377},"client/src/pages/teachers.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Plus, Search } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport TeacherTable from \"@/components/teachers/teacher-table\";\nimport TeacherFormDialog from \"@/components/forms/teacher-form-dialog\";\nimport { Teacher, InsertTeacher, insertTeacherSchema } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nexport default function Teachers() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [editingTeacher, setEditingTeacher] = useState<Teacher | null>(null);\n\n  const {\n    data: teachers = [],\n    isLoading,\n    error,\n  } = useQuery<Teacher[]>({\n    queryKey: [\"/api/teachers\"],\n  });\n\n  const createTeacherMutation = useMutation({\n    mutationFn: async (teacherData: InsertTeacher) => {\n      const response = await apiRequest(\"/api/teachers\", {\n        method: \"POST\",\n        body: JSON.stringify(teacherData),\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/teachers\"] });\n      setIsAddDialogOpen(false);\n      toast({\n        title: \"موفقیت\",\n        description: \"استاد با موفقیت اضافه شد\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"خطا\",\n        description: error.message || \"خطا در افزودن استاد\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateTeacherMutation = useMutation({\n    mutationFn: async ({\n      id,\n      data,\n    }: {\n      id: string;\n      data: Partial<InsertTeacher>;\n    }) => {\n      const response = await apiRequest(`/api/teachers/${id}`, {\n        method: \"PUT\",\n        body: JSON.stringify(data),\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/teachers\"] });\n      setEditingTeacher(null);\n      toast({\n        title: \"موفقیت\",\n        description: \"استاد با موفقیت بروزرسانی شد\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"خطا\",\n        description: error.message || \"خطا در بروزرسانی استاد\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteTeacherMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(`/api/teachers/${id}`, { method: \"DELETE\" });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/teachers\"] });\n      toast({\n        title: \"موفقیت\",\n        description: \"استاد با موفقیت حذف شد\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"خطا\",\n        description: error.message || \"خطا در حذف استاد\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredTeachers = teachers.filter(\n    (teacher: Teacher) =>\n      teacher.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      // teacher.department.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      teacher.subject.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const handleViewDetails = (teacher: Teacher) => {\n    // Open teacher details modal\n    console.log(\"View teacher details:\", teacher);\n  };\n\n  const handleEdit = (teacher: Teacher) => {\n    setEditingTeacher(teacher);\n    setIsAddDialogOpen(true);\n  };\n\n  const handleDelete = (teacherId: string) => {\n    if (window.confirm(\"آیا از حذف این استاد اطمینان دارید؟\")) {\n      deleteTeacherMutation.mutate(teacherId);\n    }\n  };\n\n  const handleSubmit = (data: InsertTeacher) => {\n    if (editingTeacher) {\n      updateTeacherMutation.mutate({ id: editingTeacher._id, data });\n    } else {\n      createTeacherMutation.mutate(data);\n    }\n  };\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-slate-50\">\n        <Header />\n        <Sidebar />\n        <div className=\"mr-0 md:mr-64 pt-16 md:pt-20 p-4 md:p-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <p className=\"text-red-600\">خطا در بارگذاری اطلاعات استادان</p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <Header />\n      <Sidebar />\n      <div className=\"mr-0 md:mr-64 pt-16 md:pt-20 p-4 md:p-6 space-y-4 md:space-y-6\">\n        <div className=\"mb-4 md:mb-6\">\n          {/* هدر */}\n          <h1\n            className=\"text-xl md:text-3xl font-bold tracking-tight mb-4\"\n            data-testid=\"heading-teachers\"\n          >\n            مدیریت استادان\n          </h1>\n\n          {/* دکمه پایین هدر */}\n          <div className=\"flex justify-end\">\n            {user?.role === \"admin\" && (\n              <Button\n                onClick={() => {\n                  setEditingTeacher(null);\n                  setIsAddDialogOpen(true);\n                }}\n                data-testid=\"button-add-teacher\"\n                className=\"ml-4\"\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                افزودن استاد جدید\n              </Button>\n            )}\n          </div>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>لیست استادان</CardTitle>\n            <CardDescription>\n              مجموع {filteredTeachers.length} استاد\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"mb-6\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-slate-400\" />\n                <Input\n                  placeholder=\"جستجو بر اساس نام، بخش یا موضوع تدریس...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search-teachers\"\n                />\n              </div>\n            </div>\n\n            {isLoading ? (\n              <div className=\"flex justify-center py-8\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-hospital-green-500\"></div>\n              </div>\n            ) : filteredTeachers.length > 0 ? (\n              <TeacherTable\n                teachers={filteredTeachers}\n                onViewDetails={handleViewDetails}\n                onEdit={handleEdit}\n                onDelete={handleDelete}\n              />\n            ) : (\n              <div className=\"text-center py-8 text-slate-500\">\n                {searchTerm\n                  ? \"هیچ استادی با این مشخصات یافت نشد\"\n                  : \"هنوز استادی اضافه نشده است\"}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        <TeacherFormDialog\n          isOpen={isAddDialogOpen}\n          onClose={() => {\n            setIsAddDialogOpen(false);\n            setEditingTeacher(null);\n          }}\n          onSubmit={handleSubmit}\n          title={editingTeacher ? \"ویرایش معلومات استاد\" : \"افزودن استاد جدید\"}\n          defaultValues={editingTeacher || undefined}\n          isSubmitting={\n            createTeacherMutation.isPending || updateTeacherMutation.isPending\n          }\n        />\n      </div>\n    </div>\n  );\n}\n","size_bytes":8088},"client/src/components/forms/UserFormDialog.tsx":{"content":"import * as React from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { useState, useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport axios from \"axios\";\nimport { User } from \"@shared/schema\";\n\ninterface UserFormDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSuccess: () => void;\n  editingUser?: User | null;\n}\n\nexport default function UserFormDialog({ isOpen, onClose, onSuccess, editingUser }: UserFormDialogProps) {\n  const { toast } = useToast();\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [role, setRole] = useState(\"viewer\");\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (editingUser) {\n      setFirstName(editingUser.firstName || \"\");\n      setLastName(editingUser.lastName || \"\");\n      setEmail(editingUser.email || \"\");\n      setRole(editingUser.role || \"viewer\");\n      setPassword(\"\");\n    } else {\n      setFirstName(\"\");\n      setLastName(\"\");\n      setEmail(\"\");\n      setPassword(\"\");\n      setRole(\"viewer\");\n    }\n  }, [editingUser, isOpen]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    try {\n      if (editingUser) {\n        const updateData: any = { firstName, lastName, email, role };\n        if (password) {\n          updateData.password = password;\n        }\n        await axios.put(`/api/users/${editingUser._id}`, updateData);\n        toast({ title: \"موفقیت\", description: \"کاربر به‌روزرسانی شد\" });\n      } else {\n        if (!password) {\n          toast({ title: \"خطا\", description: \"رمز عبور الزامی است\", variant: \"destructive\" });\n          return;\n        }\n        await axios.post(\"/api/users\", { firstName, lastName, email, password, role });\n        toast({ title: \"موفقیت\", description: \"کاربر جدید ثبت شد\" });\n      }\n      setFirstName(\"\");\n      setLastName(\"\");\n      setEmail(\"\");\n      setPassword(\"\");\n      setRole(\"viewer\");\n      onSuccess();\n      onClose();\n    } catch (err: any) {\n      toast({ \n        title: \"خطا\", \n        description: err.response?.data?.message || err.message || \"عملیات با خطا مواجه شد\", \n        variant: \"destructive\" \n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={(open) => !open && onClose()}>\n      <DialogContent className=\"sm:max-w-lg\">\n        <DialogHeader>\n          <DialogTitle>{editingUser ? \"ویرایش کاربر\" : \"افزودن کاربر جدید\"}</DialogTitle>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <label className=\"block mb-1 font-medium\">نام</label>\n            <Input value={firstName} onChange={(e) => setFirstName(e.target.value)} required />\n          </div>\n          <div>\n            <label className=\"block mb-1 font-medium\">نام خانوادگی</label>\n            <Input value={lastName} onChange={(e) => setLastName(e.target.value)} />\n          </div>\n          <div>\n            <label className=\"block mb-1 font-medium\">ایمیل</label>\n            <Input type=\"email\" value={email} onChange={(e) => setEmail(e.target.value)} required />\n          </div>\n          <div>\n            <label className=\"block mb-1 font-medium\">\n              رمز عبور {editingUser && <span className=\"text-sm text-gray-500\">(برای تغییر رمز وارد کنید)</span>}\n            </label>\n            <Input \n              type=\"password\" \n              value={password} \n              onChange={(e) => setPassword(e.target.value)} \n              required={!editingUser}\n              placeholder={editingUser ? \"برای تغییر رمز وارد کنید\" : \"رمز عبور\"}\n            />\n          </div>\n          <div>\n            <label className=\"block mb-1 font-medium\">نقش</label>\n            <select\n              value={role}\n              onChange={(e) => setRole(e.target.value)}\n              className=\"w-full border rounded-md p-2 bg-white\"\n              required\n            >\n              <option value=\"viewer\">بیننده (Viewer)</option>\n              <option value=\"admin\">مدیر (Admin)</option>\n            </select>\n          </div>\n          <DialogFooter>\n            <Button type=\"button\" variant=\"outline\" onClick={onClose} disabled={loading}>\n              لغو\n            </Button>\n            <Button type=\"submit\" disabled={loading}>\n              {loading ? \"در حال ارسال...\" : editingUser ? \"به‌روزرسانی\" : \"افزودن کاربر\"}\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5018},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/pages/dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-hospital-green-500\"></div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <Header />\n      <Sidebar />\n      <div className=\"mr-0 md:mr-64 pt-16 md:pt-20 p-4 md:p-6\">\n        {/* Content rendered by individual pages */}\n      </div>\n    </div>\n  );\n}\n","size_bytes":1231},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/residents/ResidentDetailsModal.tsx":{"content":"// components/residents/TrainerDetailsModal.tsx\r\nimport * as React from \"react\";\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogHeader,\r\n  DialogTitle,\r\n} from \"@/components/ui/dialog\";\r\nimport TrainerDetails from \"./resident-details\";\r\n\r\ninterface TrainerDetailsModalProps {\r\n  trainerId: string;\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n}\r\n\r\nexport default function TrainerDetailsModal({\r\n  trainerId,\r\n  isOpen,\r\n  onClose,\r\n}: TrainerDetailsModalProps) {\r\n  return (\r\n    <Dialog open={isOpen} onOpenChange={(open) => !open && onClose()}>\r\n      <DialogContent\r\n        className=\"\r\n          w-[90%] max-w-6xl \r\n          max-h-[90vh] \r\n          mt-4 mx-auto\r\n          rounded-xl bg-white \r\n          overflow-y-auto\r\n          p-0\r\n        \"\r\n      >\r\n        <DialogHeader className=\"p-6 border-b\">\r\n          <DialogTitle className=\"text-xl font-bold\">جزئیات ترینر</DialogTitle>\r\n        </DialogHeader>\r\n\r\n        {/* محتوای اصلی */}\r\n        <div className=\"p-6\">\r\n          <TrainerDetails trainerId={trainerId} onClose={onClose} />\r\n        </div>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}","size_bytes":1135},"client/src/components/reports/report-cards.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Users, FileText, ChevronLeft } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport TeachersReport from \"./TeacherReportTable\"; \nimport FormsReport from \"./TrainerFormsReport\"; \nimport TrainerReports from \"./TrainerReports\"; // 👉 اینو اضافه کن\n\nconst reports = [\n  {\n    title: \"گزارشات ترینری\",\n    icon: Users,\n    color: \"bg-hospital-green-100 text-hospital-green-600\",\n    buttonColor: \"bg-hospital-green-600 hover:bg-hospital-green-700\",\n  },\n  // {\n  //   title: \"گزارشات فورم ها\",\n  //   icon: FileText,\n  //   color: \"bg-blue-100 text-blue-600\",\n  //   buttonColor: \"bg-blue-600 hover:bg-blue-700\",\n  // },\n  {\n    title: \"گزارشات استادان\",\n    icon: Users,\n    color: \"bg-purple-100 text-purple-600\",\n    buttonColor: \"bg-purple-600 hover:bg-purple-700\",\n  },\n];\n\nexport default function ReportCards() {\n  const [showTeachersReport, setShowTeachersReport] = useState(false);\n  const [showFormsReport, setShowFormsReport] = useState(false);\n  const [showTrainerReport, setShowTrainerReport] = useState(false); // 👉 استیت جدید\n\n  // گرفتن لیست استادان از API\n  const { data: teachers = [], isLoading, error } = useQuery({\n    queryKey: [\"/api/teachers\"],\n    queryFn: async () => {\n      const res = await apiRequest(\"/api/teachers\");\n      return res.json();\n    },\n  });\n\n  const handleGenerateReport = (reportType: string) => {\n    if (reportType === \"گزارشات استادان\") {\n      setShowTeachersReport(true);\n      setShowFormsReport(false);\n      setShowTrainerReport(false);\n    } \n    // else if (reportType === \"گزارشات فورم ها\") {\n    //   setShowFormsReport(true);\n    //   setShowTeachersReport(false);\n    //   setShowTrainerReport(false);\n    // } \n    else if (reportType === \"گزارشات ترینری\") {\n      setShowTrainerReport(true);\n      setShowTeachersReport(false);\n      setShowFormsReport(false);\n    } else {\n      setShowTeachersReport(false);\n      setShowFormsReport(false);\n      setShowTrainerReport(false);\n    }\n  };\n\n  return (\n    <div>\n      {/* کارت‌ها فقط وقتی هیچ گزارش دیگری نمایش داده نمی‌شود */}\n      {!showTeachersReport && !showFormsReport && !showTrainerReport && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {reports.map((report) => {\n            const Icon = report.icon;\n            return (\n              <Card key={report.title} className=\"hover:shadow-md transition-shadow\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center mb-4\">\n                    <div className={`p-2 rounded-lg ${report.color}`}>\n                      <Icon className=\"h-6 w-6\" />\n                    </div>\n                    <div className=\"ml-4\">\n                      <h3 className=\"text-lg font-semibold text-slate-900\">{report.title}</h3>\n                    </div>\n                  </div>\n                  <Button\n                    onClick={() => handleGenerateReport(report.title)}\n                    className={`w-full text-white ${report.buttonColor}`}\n                  >\n                    دیدن گزارش\n                  </Button>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      )}\n\n      {/* نمایش جدول استادان */}\n      {showTeachersReport && (\n        <div className=\"mt-6\">\n          <div className=\"mb-4\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setShowTeachersReport(false)}\n              className=\"flex items-center gap-2\"\n            >\n              <ChevronLeft className=\"h-4 w-4\" />\n              بازگشت به گزارشات\n            </Button>\n          </div>\n\n          {isLoading ? (\n            <div className=\"flex justify-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-hospital-green-500\"></div>\n            </div>\n          ) : error ? (\n            <p className=\"text-red-600\">خطا در بارگذاری اطلاعات استادان</p>\n          ) : (\n            <TeachersReport teachers={teachers} />\n          )}\n        </div>\n      )}\n\n      {/* نمایش گزارش فورم‌ها */}\n      {showFormsReport && (\n        <div className=\"mt-6\">\n          <div className=\"mb-4\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setShowFormsReport(false)}\n              className=\"flex items-center gap-2\"\n            >\n              <ChevronLeft className=\"h-4 w-4\" />\n              بازگشت به گزارشات\n            </Button>\n          </div>\n\n          <FormsReport />\n        </div>\n      )}\n\n      {/* نمایش گزارش ترینری */}\n      {showTrainerReport && (\n        <div className=\"mt-6\">\n          <div className=\"mb-4\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setShowTrainerReport(false)}\n              className=\"flex items-center gap-2\"\n            >\n              <ChevronLeft className=\"h-4 w-4\" />\n              بازگشت به گزارشات\n            </Button>\n          </div>\n\n          <TrainerReports /> {/* 👉 همون کامپوننتی که ساختیم */}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":5626},"server/controllers/form-E.ts":{"content":"// controllers/evaluationFormEController.ts\r\nimport { Request, Response } from \"express\";\r\nimport mongoose from \"mongoose\";\r\nimport { EvaluationFormE } from \"../models/form-E\";\r\n\r\nexport class EvaluationFormEController {\r\n  // 🔹 ایجاد فرم جدید\r\n  static async create(req: Request, res: Response) {\r\n    try {\r\n      const {\r\n        trainer,\r\n        Name,\r\n        parentType,\r\n        trainingYear,\r\n        incidentTitle,\r\n        date,\r\n        scores, // آرایه از نمرات\r\n        averageScore,\r\n      } = req.body;\r\n\r\n      if (!trainer) {\r\n        return res.status(400).json({ message: \"Trainer ID الزامی است\" });\r\n      }\r\n\r\n      // 🔹 بررسی وجود فرم قبلی برای همین Trainer و سال آموزشی\r\n      // ✅ جلوگیری از ثبت فرم تکراری بر اساس چند فیلد\r\n      const existingForm = await EvaluationFormE.findOne({\r\n        trainer: new mongoose.Types.ObjectId(trainer),\r\n        Name: Name.trim(),\r\n        parentType: parentType.trim(),\r\n        trainingYear: trainingYear.toString().trim(),\r\n        incidentTitle: incidentTitle.trim(),\r\n        averageScore: Number(averageScore),\r\n      });\r\n\r\n      if (existingForm) {\r\n        return res.status(400).json({\r\n          message:\r\n            \"⚠️ فرم با همین مشخصات قبلاً ثبت شده و امکان ثبت مجدد وجود ندارد.\",\r\n          formId: existingForm._id,\r\n        });\r\n      }\r\n      const form = new EvaluationFormE({\r\n        trainer: new mongoose.Types.ObjectId(trainer),\r\n        Name,\r\n        parentType,\r\n        trainingYear,\r\n        incidentTitle,\r\n        date,\r\n        scores,\r\n        averageScore,\r\n      });\r\n\r\n      await form.save();\r\n      res.status(201).json({ message: \"✅ فرم ذخیره شد\", id: form._id });\r\n    } catch (err) {\r\n      console.error(\"❌ Error saving EvaluationFormE:\", err);\r\n      res.status(500).json({ message: \"خطا در ذخیره فرم\", error: err });\r\n    }\r\n  }\r\n\r\n  // 🔹 دریافت همه فرم‌ها یا فیلتر بر اساس trainerId\r\n  static async getAll(req: Request, res: Response) {\r\n    try {\r\n      const { trainerId } = req.query;\r\n      const filter = trainerId\r\n        ? { trainer: new mongoose.Types.ObjectId(trainerId as string) }\r\n        : {};\r\n\r\n      const forms = await EvaluationFormE.find(filter)\r\n        .populate(\"trainer\")\r\n        .sort({ createdAt: -1 });\r\n\r\n      res.status(200).json(forms);\r\n    } catch (err) {\r\n      console.error(\"❌ Error fetching EvaluationFormE:\", err);\r\n      res.status(500).json({ message: \"خطا در دریافت فرم‌ها\", error: err });\r\n    }\r\n  }\r\n\r\n  // 🔹 دریافت فرم بر اساس ID\r\n  static async getById(req: Request, res: Response) {\r\n    try {\r\n      const form = await EvaluationFormE.findById(req.params.id).populate(\r\n        \"trainer\"\r\n      );\r\n      if (!form) return res.status(404).json({ message: \"فرم پیدا نشد\" });\r\n      res.json(form);\r\n    } catch (err) {\r\n      console.error(\"❌ Error fetching EvaluationFormE:\", err);\r\n      res.status(500).json({ message: \"خطا در دریافت فرم\", error: err });\r\n    }\r\n  }\r\n\r\n  // 🔹 بروزرسانی فرم بر اساس ID\r\n  static async update(req: Request, res: Response) {\r\n    try {\r\n      const updated = await EvaluationFormE.findByIdAndUpdate(\r\n        req.params.id,\r\n        req.body,\r\n        { new: true }\r\n      );\r\n      if (!updated) return res.status(404).json({ message: \"فرم پیدا نشد\" });\r\n      res.json({ message: \"✅ فرم بروزرسانی شد\", updated });\r\n    } catch (err) {\r\n      console.error(\"❌ Error updating EvaluationFormE:\", err);\r\n      res.status(500).json({ message: \"خطا در بروزرسانی فرم\", error: err });\r\n    }\r\n  }\r\n\r\n  // 🔹 حذف فرم بر اساس ID\r\n  static async delete(req: Request, res: Response) {\r\n    try {\r\n      const deleted = await EvaluationFormE.findByIdAndDelete(req.params.id);\r\n      if (!deleted) return res.status(404).json({ message: \"فرم پیدا نشد\" });\r\n      res.json({ message: \"✅ فرم با موفقیت حذف شد\" });\r\n    } catch (err) {\r\n      console.error(\"❌ Error deleting EvaluationFormE:\", err);\r\n      res.status(500).json({ message: \"خطا در حذف فرم\", error: err });\r\n    }\r\n  }\r\n}\r\n","size_bytes":4368},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"server/routes/userRoutes.ts":{"content":"import express from 'express';\nimport { storage } from '../storage';\n\nconst router = express.Router();\n\n// Get all users\nrouter.get('/', async (req, res) => {\n  try {\n    const users = await storage.getAllUsers();\n    // Remove password from response\n    const sanitizedUsers = users.map(({ password, ...user }) => user);\n    res.json(sanitizedUsers);\n  } catch (error) {\n    console.error('Error fetching users:', error);\n    res.status(500).json({ message: 'Failed to fetch users' });\n  }\n});\n\n// Get user by ID\nrouter.get('/:id', async (req, res) => {\n  try {\n    const user = await storage.getUser(req.params.id);\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n    // Remove password from response\n    const { password, ...sanitizedUser } = user;\n    res.json(sanitizedUser);\n  } catch (error) {\n    console.error('Error fetching user:', error);\n    res.status(500).json({ message: 'Failed to fetch user' });\n  }\n});\n\n// Create new user\nrouter.post('/', async (req, res) => {\n  try {\n    const { email, firstName, lastName, role, password } = req.body;\n    \n    if (!email || !firstName || !role || !password) {\n      return res.status(400).json({ message: 'Email, firstName, role, and password are required' });\n    }\n    \n    if (!['admin', 'viewer'].includes(role)) {\n      return res.status(400).json({ message: 'Role must be either admin or viewer' });\n    }\n    \n    const newUser = await storage.createUser({ email, firstName, lastName, role, password });\n    // Remove password from response\n    const { password: _, ...sanitizedUser } = newUser;\n    res.status(201).json(sanitizedUser);\n  } catch (error) {\n    console.error('Error creating user:', error);\n    res.status(500).json({ message: 'Failed to create user' });\n  }\n});\n\n// Update user\nrouter.put('/:id', async (req, res) => {\n  try {\n    const { email, firstName, lastName, role, password } = req.body;\n    \n    if (role && !['admin', 'viewer'].includes(role)) {\n      return res.status(400).json({ message: 'Role must be either admin or viewer' });\n    }\n    \n    const updateData: any = { email, firstName, lastName, role };\n    if (password) {\n      updateData.password = password;\n    }\n    \n    const updatedUser = await storage.updateUser(req.params.id, updateData);\n    // Remove password from response\n    const { password: _, ...sanitizedUser } = updatedUser;\n    res.json(sanitizedUser);\n  } catch (error) {\n    console.error('Error updating user:', error);\n    if ((error as Error).message === 'User not found') {\n      return res.status(404).json({ message: 'User not found' });\n    }\n    res.status(500).json({ message: 'Failed to update user' });\n  }\n});\n\n// Delete user\nrouter.delete('/:id', async (req, res) => {\n  try {\n    await storage.deleteUser(req.params.id);\n    res.json({ message: 'User deleted successfully' });\n  } catch (error) {\n    console.error('Error deleting user:', error);\n    res.status(500).json({ message: 'Failed to delete user' });\n  }\n});\n\nexport { router as userRoutes };","size_bytes":3028},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/context/TrainerContext.tsx":{"content":"// context/TrainerContext.tsx\nimport { createContext, useContext, useState, ReactNode, useEffect } from \"react\";\n\ninterface TrainerContextType {\n  trainerId: string | null;\n  setTrainerId: (id: string) => void;\n}\n\nconst TrainerContext = createContext<TrainerContextType>({\n  trainerId: null,\n  setTrainerId: () => {},\n});\n\nexport const TrainerProvider = ({ children }: { children: ReactNode }) => {\n  const [trainerId, setTrainerIdState] = useState<string | null>(null);\n\n  // هنگام تغییر trainerId در localStorage هم ذخیره کن\n  useEffect(() => {\n    if (trainerId) {\n      localStorage.setItem(\"trainerId\", trainerId);\n    }\n  }, [trainerId]);\n\n  // هنگام mount مقدار ذخیره‌شده را بخوان\n  useEffect(() => {\n    const stored = localStorage.getItem(\"trainerId\");\n    if (stored) {\n      setTrainerIdState(stored);\n    }\n  }, []);\n\n  const setTrainerId = (id: string) => {\n    setTrainerIdState(id);\n  };\n\n  return (\n    <TrainerContext.Provider value={{ trainerId, setTrainerId }}>\n      {children}\n    </TrainerContext.Provider>\n  );\n};\n\nexport const useTrainer = () => useContext(TrainerContext);\n","size_bytes":1146},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/residents/form-details/formC-detail.tsx":{"content":"// components/forms/FormCDetails.tsx\r\nimport React, { useEffect, useState, useRef } from \"react\";\r\nimport * as XLSX from \"xlsx\";\r\n\r\ninterface FormCDetailsProps {\r\n  trainerId: string;\r\n  onClose?: () => void;\r\n}\r\n\r\ninterface Evaluation {\r\n  section: string;\r\n  percentage: number;\r\n  score: number;\r\n  teacherName: string;\r\n}\r\n\r\ninterface FormC {\r\n  _id: string;\r\n  trainer: string;\r\n  name: string;\r\n  lastName: string;\r\n  parentType: string;\r\n  idNumber: string;\r\n  department: string;\r\n  trainingYear: number;\r\n  startYear: number;\r\n  date: string;\r\n  evaluations: Evaluation[];\r\n  chef?: string;\r\n  departmentHead?: string;\r\n  hospitalHead?: string;\r\n}\r\n\r\nexport default function FormCDetails({\r\n  trainerId,\r\n  onClose,\r\n}: FormCDetailsProps) {\r\n  const [data, setData] = useState<FormC | null>(null);\r\n  const [editing, setEditing] = useState(false);\r\n  const [saving, setSaving] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const printRef = useRef<HTMLDivElement>(null);\r\n\r\n  // 📥 دریافت داده‌ها\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const res = await fetch(`/api/monograph?trainerId=${trainerId}`);\r\n\r\n        if (!res.ok) {\r\n          // اگر خطایی بود ولی نه شبکه، فقط داده را null قرار بده\r\n          setData(null);\r\n          return;\r\n        }\r\n\r\n        const result = await res.json();\r\n\r\n        if (Array.isArray(result) && result.length > 0) {\r\n          setData(result[0]);\r\n        } else {\r\n          // اگر هیچ داده‌ای نبود\r\n          setData(null);\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Error fetching form C:\", err);\r\n        setData(null); // در صورت خطای شبکه، داده null\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    if (trainerId) fetchData();\r\n  }, [trainerId]);\r\n\r\n  // 🖨 چاپ\r\n  const handlePrint = () => {\r\n    if (!printRef.current) return;\r\n    const printWindow = window.open(\"\", \"_blank\", \"width=1000,height=700\");\r\n    if (!printWindow) return;\r\n\r\n    printWindow.document.write(`\r\n      <html dir=\"rtl\">\r\n      <head><meta charset=\"UTF-8\"><title>Form C</title></head>\r\n      <body>${printRef.current.innerHTML}</body>\r\n      <script>window.print(); setTimeout(()=>window.close(), 300);</script>\r\n      </html>\r\n    `);\r\n    printWindow.document.close();\r\n  };\r\n\r\n  // 📤 خروجی Excel\r\n  const handleExportExcel = () => {\r\n    if (!data) return;\r\n    const wb = XLSX.utils.book_new();\r\n    const evalWS = XLSX.utils.json_to_sheet(data.evaluations);\r\n    XLSX.utils.book_append_sheet(wb, evalWS, \"ارزیابی‌ها\");\r\n    XLSX.writeFile(wb, `FormC_${data.name}_${data.lastName}.xlsx`);\r\n  };\r\n\r\n  // 💾 ذخیره تغییرات\r\n  const handleSave = async () => {\r\n    if (!data) return;\r\n    try {\r\n      setSaving(true);\r\n      const res = await fetch(`/api/monograph/${data._id}`, {\r\n        method: \"PUT\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(data),\r\n      });\r\n      if (!res.ok) throw new Error(\"خطا در ذخیره تغییرات\");\r\n      const result = await res.json();\r\n      setData(result.updated);\r\n      setEditing(false);\r\n      alert(\"✅ تغییرات با موفقیت ذخیره شد\");\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(\"❌ خطا در ذخیره فرم\");\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  // تغییر فیلدهای عمومی\r\n  const handleChangeMain = (field: keyof FormC, value: string | number) => {\r\n    if (!data) return;\r\n    setData({ ...data, [field]: value });\r\n  };\r\n\r\n  // تغییر ارزیابی‌ها\r\n  const handleEvalChange = (\r\n    index: number,\r\n    field: keyof Evaluation,\r\n    value: string | number\r\n  ) => {\r\n    if (!data) return;\r\n    const newEvals = [...data.evaluations];\r\n    newEvals[index] = { ...newEvals[index], [field]: value };\r\n    setData({ ...data, evaluations: newEvals });\r\n  };\r\n\r\n  if (loading)\r\n    return (\r\n      <div className=\"p-4 text-center text-gray-600\">در حال بارگذاری...</div>\r\n    );\r\n\r\n  if (!data)\r\n    return (\r\n      <div className=\"p-6 text-center text-red-600\">\r\n        فرم برای این ترینر موجود نیست\r\n      </div>\r\n    );\r\n\r\n  return (\r\n    <div className=\"p-4\">\r\n      <div className=\"flex items-center justify-between mb-4\">\r\n        <h2 className=\"text-lg font-semibold\">Form C - ارزیابی مونوگراف</h2>\r\n        <div className=\"space-x-2\">\r\n          {editing ? (\r\n            <>\r\n              <button\r\n                onClick={handleSave}\r\n                disabled={saving}\r\n                className=\"bg-green-600 text-white px-3 py-1 rounded\"\r\n              >\r\n                {saving ? \"در حال ذخیره...\" : \"ذخیره\"}\r\n              </button>\r\n              <button\r\n                onClick={() => setEditing(false)}\r\n                className=\"bg-red-600 text-white px-3 py-1 rounded\"\r\n              >\r\n                لغو\r\n              </button>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <button\r\n                onClick={handlePrint}\r\n                className=\"bg-green-600 text-white px-3 py-1 rounded\"\r\n              >\r\n                PDF\r\n              </button>\r\n              <button\r\n                onClick={handleExportExcel}\r\n                className=\"bg-yellow-500 text-white px-3 py-1 rounded\"\r\n              >\r\n                Excel\r\n              </button>\r\n              <button\r\n                onClick={() => setEditing(true)}\r\n                className=\"bg-blue-600 text-white px-3 py-1 rounded\"\r\n              >\r\n                ویرایش\r\n              </button>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <div ref={printRef} className=\"border rounded-lg bg-white p-4\">\r\n        {/* مشخصات */}\r\n        <table className=\"w-full border border-slate-300 mb-4 text-sm\">\r\n          <tbody>\r\n            <tr>\r\n              <td className=\"font-semibold border p-2\">نام</td>\r\n              <td className=\"border p-2\">\r\n                {editing ? (\r\n                  <input\r\n                    className=\"border rounded px-2 py-1 w-full\"\r\n                    value={data.name}\r\n                    onChange={(e) => handleChangeMain(\"name\", e.target.value)}\r\n                  />\r\n                ) : (\r\n                  data.name\r\n                )}\r\n              </td>\r\n              <td className=\"font-semibold border p-2\">تخلص</td>\r\n              <td className=\"border p-2\">\r\n                {editing ? (\r\n                  <input\r\n                    className=\"border rounded px-2 py-1 w-full\"\r\n                    value={data.lastName}\r\n                    onChange={(e) =>\r\n                      handleChangeMain(\"lastName\", e.target.value)\r\n                    }\r\n                  />\r\n                ) : (\r\n                  data.lastName\r\n                )}\r\n              </td>\r\n              <td className=\"font-semibold border p-2\">نام پدر</td>\r\n              <td className=\"border p-2\">\r\n                {editing ? (\r\n                  <input\r\n                    className=\"border rounded px-2 py-1 w-full\"\r\n                    value={data.parentType}\r\n                    onChange={(e) =>\r\n                      handleChangeMain(\"parentType\", e.target.value)\r\n                    }\r\n                  />\r\n                ) : (\r\n                  data.parentType\r\n                )}\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td className=\"font-semibold border p-2\">شماره شناسایی</td>\r\n              <td className=\"border p-2\">\r\n                {editing ? (\r\n                  <input\r\n                    className=\"border rounded px-2 py-1 w-full\"\r\n                    value={data.idNumber}\r\n                    onChange={(e) =>\r\n                      handleChangeMain(\"idNumber\", e.target.value)\r\n                    }\r\n                  />\r\n                ) : (\r\n                  data.idNumber\r\n                )}\r\n              </td>\r\n              <td className=\"font-semibold border p-2\">رشته</td>\r\n              <td className=\"border p-2\">\r\n                {editing ? (\r\n                  <input\r\n                    className=\"border rounded px-2 py-1 w-full\"\r\n                    value={data.department}\r\n                    onChange={(e) =>\r\n                      handleChangeMain(\"department\", e.target.value)\r\n                    }\r\n                  />\r\n                ) : (\r\n                  data.department\r\n                )}\r\n              </td>\r\n              <td className=\"font-semibold border p-2\">سال آموزشی</td>\r\n              <td className=\"border p-2\">\r\n                {editing ? (\r\n                  <input\r\n                    type=\"number\"\r\n                    className=\"border rounded px-2 py-1 w-full\"\r\n                    value={data.trainingYear}\r\n                    onChange={(e) =>\r\n                      handleChangeMain(\"trainingYear\", Number(e.target.value))\r\n                    }\r\n                  />\r\n                ) : (\r\n                  data.trainingYear\r\n                )}\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td className=\"font-semibold border p-2\">سال شروع</td>\r\n              <td className=\"border p-2\">\r\n                {editing ? (\r\n                  <input\r\n                    type=\"number\"\r\n                    className=\"border rounded px-2 py-1 w-full\"\r\n                    value={data.startYear}\r\n                    onChange={(e) =>\r\n                      handleChangeMain(\"startYear\", Number(e.target.value))\r\n                    }\r\n                  />\r\n                ) : (\r\n                  data.startYear\r\n                )}\r\n              </td>\r\n              <td className=\"font-semibold border p-2\">تاریخ</td>\r\n              <td className=\"border p-2\" colSpan={3}>\r\n                {editing ? (\r\n                  <input\r\n                    className=\"border rounded px-2 py-1 w-full\"\r\n                    value={data.date}\r\n                    onChange={(e) => handleChangeMain(\"date\", e.target.value)}\r\n                  />\r\n                ) : (\r\n                  data.date\r\n                )}\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n\r\n        {/* جدول ارزیابی‌ها */}\r\n        <table className=\"w-full border border-slate-300 text-sm\">\r\n          <thead className=\"bg-gray-50\">\r\n            <tr>\r\n              <th className=\"border p-2 w-10\">#</th>\r\n              <th className=\"border p-2\">بخش</th>\r\n              <th className=\"border p-2 w-20\">فیصدی</th>\r\n              <th className=\"border p-2 w-20\">نمره</th>\r\n              <th className=\"border p-2 w-40\">نام استاد</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {data.evaluations.map((ev, idx) => (\r\n              <tr key={idx}>\r\n                <td className=\"border p-2 text-center\">{idx + 1}</td>\r\n                <td className=\"border p-2\">\r\n                  {editing ? (\r\n                    <input\r\n                      className=\"border rounded px-2 py-1 w-full\"\r\n                      value={ev.section}\r\n                      onChange={(e) =>\r\n                        handleEvalChange(idx, \"section\", e.target.value)\r\n                      }\r\n                    />\r\n                  ) : (\r\n                    ev.section\r\n                  )}\r\n                </td>\r\n                <td className=\"border p-2 text-center\">\r\n                  {editing ? (\r\n                    <input\r\n                      type=\"number\"\r\n                      className=\"border rounded px-2 py-1 w-full text-center\"\r\n                      value={ev.percentage}\r\n                      onChange={(e) =>\r\n                        handleEvalChange(\r\n                          idx,\r\n                          \"percentage\",\r\n                          Number(e.target.value)\r\n                        )\r\n                      }\r\n                    />\r\n                  ) : (\r\n                    ev.percentage\r\n                  )}\r\n                </td>\r\n                <td className=\"border p-2 text-center\">\r\n                  {editing ? (\r\n                    <input\r\n                      type=\"number\"\r\n                      className=\"border rounded px-2 py-1 w-full text-center\"\r\n                      value={ev.score}\r\n                      onChange={(e) =>\r\n                        handleEvalChange(idx, \"score\", Number(e.target.value))\r\n                      }\r\n                    />\r\n                  ) : (\r\n                    ev.score\r\n                  )}\r\n                </td>\r\n                <td className=\"border p-2\">\r\n                  {editing ? (\r\n                    <input\r\n                      className=\"border rounded px-2 py-1 w-full\"\r\n                      value={ev.teacherName}\r\n                      onChange={(e) =>\r\n                        handleEvalChange(idx, \"teacherName\", e.target.value)\r\n                      }\r\n                    />\r\n                  ) : (\r\n                    ev.teacherName\r\n                  )}\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n\r\n        {/* قسمت امضاها (غیرقابل ویرایش) */}\r\n        <table className=\"w-full border border-slate-300 mt-6 text-sm\">\r\n          <tbody>\r\n            <tr>\r\n              <td className=\"font-semibold border p-2 text-center\">\r\n                آمر پروگرامینک\r\n              </td>\r\n              <td className=\"border p-2 text-center\">\r\n                {data.chef || \"____________\"}\r\n              </td>\r\n              <td className=\"font-semibold border p-2 text-center\">\r\n                رئیس شفاخانه\r\n              </td>\r\n              <td className=\"border p-2 text-center\">\r\n                {data.departmentHead || \"____________\"}\r\n              </td>\r\n              <td className=\"font-semibold border p-2 text-center\">\r\n                رئیس دپارتمان\r\n              </td>\r\n              <td className=\"border p-2 text-center\">\r\n                {data.hospitalHead || \"____________\"}\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","size_bytes":14433},"server/routes/form-F.ts":{"content":"import express, { Request, Response } from \"express\";\r\nimport mongoose from \"mongoose\";\r\nimport Checklist, { IChecklist } from \"../models/form-F\";\r\n\r\nconst router = express.Router();\r\n\r\n// 🔹 ذخیره Form-F برای یک ترینر مشخص\r\nrouter.post(\"/\", async (req: Request, res: Response) => {\r\n  try {\r\n    const { trainerId, name, parentType, trainingYear, sections } = req.body;\r\n\r\n    if (!trainerId)\r\n      return res.status(400).json({ error: \"TrainerId الزامی است\" });\r\n\r\n    const existing = await Checklist.findOne({\r\n      trainerId: new mongoose.Types.ObjectId(trainerId),\r\n    });\r\n    if (existing) {\r\n      return res.status(400).json({\r\n        error: \"این ترینر قبلاً یک فرم F دارد و نمی‌تواند دوباره ایجاد کند\",\r\n      });\r\n    }\r\n\r\n    const form: IChecklist = new Checklist({\r\n      trainerId: new mongoose.Types.ObjectId(trainerId),\r\n      name,\r\n      parentType,\r\n      trainingYear,\r\n      sections,\r\n    });\r\n\r\n    await form.save();\r\n    res.status(201).json({ message: \"✅ فرم ذخیره شد\", id: form._id });\r\n  } catch (err) {\r\n    console.error(err);\r\n    res.status(500).json({ error: \"❌ خطا در ذخیره فرم\" });\r\n  }\r\n});\r\n\r\n// 🔹 گرفتن لیست فرم‌های یک ترینر مشخص\r\nrouter.get(\"/\", async (req: Request, res: Response) => {\r\n  try {\r\n    const trainerId = req.query.trainerId as string;\r\n\r\n    if (!trainerId)\r\n      return res.status(400).json({ error: \"TrainerId الزامی است\" });\r\n\r\n    const forms = await Checklist.find({\r\n      trainerId: new mongoose.Types.ObjectId(trainerId),\r\n    }).sort({ createdAt: -1 });\r\n\r\n    res.json(forms);\r\n  } catch (err) {\r\n    console.error(err);\r\n    res.status(500).json({ error: \"❌ خطا در گرفتن فرم‌ها\" });\r\n  }\r\n});\r\n\r\n// 🔹 گرفتن فرم خاص با آیدی\r\nrouter.get(\"/:id\", async (req: Request, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const form = await Checklist.findById(id);\r\n    if (!form) return res.status(404).json({ error: \"فرم یافت نشد\" });\r\n    res.json(form);\r\n  } catch (err) {\r\n    console.error(err);\r\n    res.status(500).json({ error: \"❌ خطا در دریافت فرم\" });\r\n  }\r\n});\r\n\r\n// 🔹 ویرایش فرم (Update)\r\nrouter.put(\"/:id\", async (req: Request, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const updated = await Checklist.findByIdAndUpdate(id, req.body, {\r\n      new: true,\r\n    });\r\n\r\n    if (!updated) return res.status(404).json({ error: \"فرم یافت نشد\" });\r\n\r\n    res.json({ message: \"✅ تغییرات ذخیره شد\", data: updated });\r\n  } catch (err) {\r\n    console.error(err);\r\n    res.status(500).json({ error: \"❌ خطا در ذخیره تغییرات\" });\r\n  }\r\n});\r\n\r\n// 🔹 حذف فرم\r\nrouter.delete(\"/:id\", async (req: Request, res: Response) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const deleted = await Checklist.findByIdAndDelete(id);\r\n    if (!deleted) return res.status(404).json({ error: \"فرم یافت نشد\" });\r\n    res.json({ message: \"✅ فرم با موفقیت حذف شد\" });\r\n  } catch (err) {\r\n    console.error(err);\r\n    res.status(500).json({ error: \"❌ خطا در حذف فرم\" });\r\n  }\r\n});\r\n\r\nexport default router;\r\n","size_bytes":3309},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md bg-gray-100 px-3 py-2 text-base placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":661},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/residents/form-details/formD-detail.tsx":{"content":"// components/forms/FormDDetails.tsx\r\nimport React, { useEffect, useState, useRef } from \"react\";\r\nimport * as XLSX from \"xlsx\";\r\n\r\ninterface FormDDetailsProps {\r\n  trainerId: string;\r\n  onClose?: () => void;\r\n}\r\n\r\ninterface Conference {\r\n  conferenceTitle: string;\r\n  score: number;\r\n  date: string;\r\n  teacherName: string;\r\n}\r\n\r\ninterface FormD {\r\n  _id: string;\r\n  trainerId: string;\r\n  trainer: string;\r\n  year: number;\r\n  name: string;\r\n  parentType: string;\r\n  department: string;\r\n  trainingYear: string;\r\n  conferences: Conference[];\r\n  departmentHead?: string;\r\n  programHead?: string;\r\n  hospitalHead?: string;\r\n}\r\n\r\nexport default function FormDDetails({ trainerId, onClose }: FormDDetailsProps) {\r\n  const [data, setData] = useState<FormD | null>(null);\r\n  const [editing, setEditing] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [saving, setSaving] = useState(false);\r\n  const printRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const res = await fetch(`/api/conference?trainerId=${trainerId}`);\r\n        if (!res.ok) throw new Error(\"فرمی برای این ترینر موجود نیست\");\r\n        const result = await res.json();\r\n        if (Array.isArray(result) && result.length > 0) setData(result[0]);\r\n        else if (result && typeof result === \"object\") setData(result);\r\n        else setData(null);\r\n      } catch (err) {\r\n        console.error(\"Error fetching form D:\", err);\r\n        setData(null);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    if (trainerId) fetchData();\r\n  }, [trainerId]);\r\n\r\n  const handlePrint = () => {\r\n    if (!printRef.current) return;\r\n    const printWindow = window.open(\"\", \"_blank\", \"width=1000,height=600\");\r\n    if (!printWindow) return;\r\n    printWindow.document.write(`\r\n      <html dir=\"rtl\">\r\n      <head><meta charset=\"UTF-8\"><title>Form D</title></head>\r\n      <body>${printRef.current.innerHTML}</body>\r\n      <script>window.print(); setTimeout(()=>window.close(),100);</script>\r\n      </html>\r\n    `);\r\n    printWindow.document.close();\r\n  };\r\n\r\n  const handleExportExcel = () => {\r\n    if (!data) return;\r\n    const wb = XLSX.utils.book_new();\r\n\r\n    const detailsWS = XLSX.utils.json_to_sheet([\r\n      { فیلد: \"نام\", مقدار: data.name },\r\n      { فیلد: \"نام پدر\", مقدار: data.parentType },\r\n      { فیلد: \"دیپارتمنت\", مقدار: data.department },\r\n      { فیلد: \"سال آموزش\", مقدار: data.trainingYear },\r\n    ]);\r\n    XLSX.utils.book_append_sheet(wb, detailsWS, \"مشخصات\");\r\n\r\n    if (data.conferences?.length) {\r\n      const confWS = XLSX.utils.json_to_sheet(\r\n        data.conferences.map((conf, idx) => ({\r\n          \"#\": idx + 1,\r\n          \"موضوع کنفرانس\": conf.conferenceTitle,\r\n          \"نمره داده شده\": conf.score,\r\n          \"تاریخ ارائه\": conf.date,\r\n          \"اسم و امضا استاد\": conf.teacherName,\r\n        }))\r\n      );\r\n      XLSX.utils.book_append_sheet(wb, confWS, \"کنفرانس‌ها\");\r\n    }\r\n\r\n    const signWS = XLSX.utils.json_to_sheet([\r\n      { مسئول: \"رئیس دیپارتمنت\", نام: data.departmentHead || \"\" },\r\n      { مسئول: \"آمر برنامه تریننگ\", نام: data.programHead || \"\" },\r\n      { مسئول: \"رئیس شفاخانه\", نام: data.hospitalHead || \"\" },\r\n    ]);\r\n    XLSX.utils.book_append_sheet(wb, signWS, \"امضاها\");\r\n\r\n    XLSX.writeFile(wb, `FormD_${data.name}_${data.parentType}.xlsx`);\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    if (!data) return;\r\n    try {\r\n      setSaving(true);\r\n      const res = await fetch(`/api/conference/${data._id}`, {\r\n        method: \"PUT\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(data),\r\n      });\r\n      if (!res.ok) throw new Error(\"خطا در ذخیره تغییرات\");\r\n      const result = await res.json();\r\n      setData(result.updated);\r\n      setEditing(false);\r\n      alert(\"✅ تغییرات با موفقیت ذخیره شد\");\r\n    } catch (err) {\r\n      console.error(\"Error saving form:\", err);\r\n      alert(\"❌ خطا در ذخیره تغییرات\");\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  const handleChangeMainField = (field: keyof FormD, value: string | number) => {\r\n    if (!data) return;\r\n    setData({ ...data, [field]: value });\r\n  };\r\n\r\n  const handleConferenceChange = (idx: number, field: keyof Conference, value: string | number) => {\r\n    if (!data) return;\r\n    const newConferences = [...data.conferences];\r\n    newConferences[idx] = { ...newConferences[idx], [field]: value };\r\n    setData({ ...data, conferences: newConferences });\r\n  };\r\n\r\n  if (loading)\r\n    return <div className=\"p-4 text-center text-gray-600\">در حال بارگذاری...</div>;\r\n\r\n  if (!data)\r\n    return (\r\n      <div className=\"p-4 text-center text-red-500\">\r\n        فرم برای این ترینر موجود نیست\r\n      </div>\r\n    );\r\n\r\n  return (\r\n    <div className=\"p-4\">\r\n      <div className=\"flex justify-between mb-4\">\r\n        <h2 className=\"text-lg font-semibold\">Form D - ارزیابی کنفرانس‌ها</h2>\r\n        <div className=\"space-x-2\">\r\n          {editing ? (\r\n            <>\r\n              <button\r\n                onClick={handleSave}\r\n                disabled={saving}\r\n                className=\"bg-green-600 text-white px-3 py-1 rounded disabled:bg-gray-400\"\r\n              >\r\n                {saving ? \"در حال ذخیره...\" : \"ذخیره\"}\r\n              </button>\r\n              <button\r\n                onClick={() => setEditing(false)}\r\n                className=\"bg-red-600 text-white px-3 py-1 rounded\"\r\n              >\r\n                لغو\r\n              </button>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <button onClick={handlePrint} className=\"bg-green-600 text-white px-3 py-1 rounded\">PDF</button>\r\n              <button onClick={handleExportExcel} className=\"bg-yellow-500 text-white px-3 py-1 rounded\">Excel</button>\r\n              <button onClick={() => setEditing(true)} className=\"bg-blue-600 text-white px-3 py-1 rounded\">ویرایش</button>\r\n            </>\r\n          )}\r\n          {onClose && (\r\n            <button onClick={onClose} className=\"bg-gray-500 text-white px-3 py-1 rounded\">بستن</button>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <div ref={printRef} className=\"border rounded-lg p-4 bg-white\">\r\n        {/* مشخصات */}\r\n        <table className=\"w-full border border-slate-300 mb-6\">\r\n          <tbody>\r\n            <tr>\r\n              <td className=\"font-semibold border p-2\">نام</td>\r\n              <td className=\"border p-2\">\r\n                {editing ? (\r\n                  <input\r\n                    className=\"border rounded px-2 py-1 w-full\"\r\n                    value={data.name}\r\n                    onChange={(e) => handleChangeMainField(\"name\", e.target.value)}\r\n                  />\r\n                ) : data.name}\r\n              </td>\r\n              <td className=\"font-semibold border p-2\">نام پدر</td>\r\n              <td className=\"border p-2\">\r\n                {editing ? (\r\n                  <input\r\n                    className=\"border rounded px-2 py-1 w-full\"\r\n                    value={data.parentType}\r\n                    onChange={(e) => handleChangeMainField(\"parentType\", e.target.value)}\r\n                  />\r\n                ) : data.parentType}\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td className=\"font-semibold border p-2\">دیپارتمنت</td>\r\n              <td className=\"border p-2\">\r\n                {editing ? (\r\n                  <input\r\n                    className=\"border rounded px-2 py-1 w-full\"\r\n                    value={data.department}\r\n                    onChange={(e) => handleChangeMainField(\"department\", e.target.value)}\r\n                  />\r\n                ) : data.department}\r\n              </td>\r\n              <td className=\"font-semibold border p-2\">سال آموزش</td>\r\n              <td className=\"border p-2\">\r\n                {editing ? (\r\n                  <input\r\n                    className=\"border rounded px-2 py-1 w-full\"\r\n                    value={data.trainingYear}\r\n                    onChange={(e) => handleChangeMainField(\"trainingYear\", e.target.value)}\r\n                  />\r\n                ) : data.trainingYear}\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n\r\n        {/* کنفرانس‌ها */}\r\n        {data.conferences?.length > 0 && (\r\n          <table className=\"w-full border border-slate-300 text-sm mb-6\">\r\n            <thead className=\"bg-gray-50\">\r\n              <tr>\r\n                <th className=\"border p-2 w-10\">#</th>\r\n                <th className=\"border p-2\">موضوع کنفرانس</th>\r\n                <th className=\"border p-2 w-20\">نمره</th>\r\n                <th className=\"border p-2 w-32\">تاریخ ارائه</th>\r\n                <th className=\"border p-2 w-40\">اسم و امضا استاد</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {data.conferences.map((conf, idx) => (\r\n                <tr key={idx}>\r\n                  <td className=\"border p-2 text-center\">{idx + 1}</td>\r\n                  <td className=\"border p-2\">\r\n                    {editing ? (\r\n                      <input\r\n                        className=\"border rounded px-2 py-1 w-full\"\r\n                        value={conf.conferenceTitle}\r\n                        onChange={(e) => handleConferenceChange(idx, \"conferenceTitle\", e.target.value)}\r\n                      />\r\n                    ) : conf.conferenceTitle}\r\n                  </td>\r\n                  <td className=\"border p-2 text-center\">\r\n                    {editing ? (\r\n                      <input\r\n                        type=\"number\"\r\n                        className=\"border rounded px-2 py-1 w-full text-center\"\r\n                        value={conf.score}\r\n                        onChange={(e) => handleConferenceChange(idx, \"score\", Number(e.target.value))}\r\n                      />\r\n                    ) : conf.score}\r\n                  </td>\r\n                  <td className=\"border p-2 text-center\">\r\n                    {editing ? (\r\n                      <input\r\n                        type=\"date\"\r\n                        className=\"border rounded px-2 py-1 w-full text-center\"\r\n                        value={conf.date}\r\n                        onChange={(e) => handleConferenceChange(idx, \"date\", e.target.value)}\r\n                      />\r\n                    ) : conf.date}\r\n                  </td>\r\n                  <td className=\"border p-2\">\r\n                    {editing ? (\r\n                      <input\r\n                        className=\"border rounded px-2 py-1 w-full\"\r\n                        value={conf.teacherName}\r\n                        onChange={(e) => handleConferenceChange(idx, \"teacherName\", e.target.value)}\r\n                      />\r\n                    ) : conf.teacherName}\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        )}\r\n\r\n        {/* امضاها - غیرقابل ویرایش */}\r\n        <table className=\"w-full border border-slate-300 mt-4 text-sm\">\r\n          <tbody>\r\n            <tr>\r\n              <td className=\"font-semibold border p-2 text-center\">رئیس دیپارتمنت</td>\r\n              <td className=\"border p-2 text-center\">{data.departmentHead || \"____________\"}</td>\r\n              <td className=\"font-semibold border p-2 text-center\">آمر برنامه تریننگ</td>\r\n              <td className=\"border p-2 text-center\">{data.programHead || \"____________\"}</td>\r\n              <td className=\"font-semibold border p-2 text-center\">رئیس شفاخانه</td>\r\n              <td className=\"border p-2 text-center\">{data.hospitalHead || \"____________\"}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","size_bytes":12169},"server/controllers/form-I.ts":{"content":"// controllers/rotationFormController.ts\nimport { Request, Response } from \"express\";\nimport mongoose from \"mongoose\";\nimport RotationForm from \"../models/form-I\";\n\n// ✅ ایجاد فرم جدید\nexport const createRotationForm = async (req: Request, res: Response) => {\n  try {\n    const { trainerId, header, persianRows, persianNote, rows } = req.body;\n\n    if (!trainerId) {\n      return res.status(400).json({ message: \"TrainerId الزامی است\" });\n    }\n\n    // اطمینان از معتبر بودن ID\n    if (!mongoose.Types.ObjectId.isValid(trainerId)) {\n      return res.status(400).json({ message: \"TrainerId معتبر نیست\" });\n    }\n\n     // ✅ بررسی وجود فرم قبلی\n     const existingForm = await RotationForm.findOne({ trainerId });\n     if (existingForm) {\n       return res.status(400).json({ message: \"این فرم برای این ترینر قبلاً ثبت شده است.\" });\n     }\n\n    const newForm = new RotationForm({\n      trainerId: new mongoose.Types.ObjectId(trainerId),\n      header,\n      persianRows,\n      persianNote,\n      rows,\n    });\n\n    const savedForm = await newForm.save();\n    res.status(201).json({ message: \"✅ فرم ذخیره شد\", data: savedForm });\n  } catch (err) {\n    console.error(\"❌ خطا در ذخیره فرم:\", err);\n    res.status(500).json({ message: \"خطای ناشناخته در هنگام ذخیره\" });\n  }\n};\n\n// ✅ گرفتن همه فرم‌های یک ترینر\nexport const getRotationForms = async (req: Request, res: Response) => {\n  try {\n    const { trainerId } = req.params;\n\n    if (!trainerId) {\n      return res.status(400).json({ message: \"TrainerId الزامی است\" });\n    }\n\n    const forms = await RotationForm.find({\n      trainerId: new mongoose.Types.ObjectId(trainerId),\n    }).sort({ createdAt: -1 });\n\n    res.json(forms);\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ message: \"❌ خطا در گرفتن فرم‌ها\" });\n  }\n};\n\n// ✅ گرفتن فرم با ID خاص\nexport const getRotationFormById = async (req: Request, res: Response) => {\n  try {\n    const { id } = req.params;\n    const form = await RotationForm.findById(id);\n    if (!form) return res.status(404).json({ message: \"فرم یافت نشد\" });\n    res.json(form);\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ message: \"خطا در دریافت فرم\" });\n  }\n};\n\n// ✅ ویرایش فرم\nexport const updateRotationForm = async (req: Request, res: Response) => {\n  try {\n    const { id } = req.params;\n    const data = req.body;\n\n    if (!data.trainerId) {\n      return res.status(400).json({ message: \"TrainerId الزامی است\" });\n    }\n\n    const updatedForm = await RotationForm.findByIdAndUpdate(\n      id,\n      { $set: data },\n      { new: true, runValidators: true }\n    );\n\n    if (!updatedForm) return res.status(404).json({ message: \"فرم یافت نشد\" });\n\n    res.json({ message: \"✅ فرم بروزرسانی شد\", form: updatedForm });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ message: \"❌ خطا در بروزرسانی فرم\" });\n  }\n};\n","size_bytes":3162},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/forms/formF.tsx":{"content":"import React, { useEffect, useState } from \"react\";\r\n\r\ninterface Activity {\r\n  id: string;\r\n  title: string;\r\n  percent: number;\r\n}\r\n\r\ninterface Section {\r\n  name: string;\r\n  activities: Activity[];\r\n}\r\n\r\ninterface checklistsProps {\r\n  trainerIdProp?: string;\r\n}\r\n\r\nconst sections: Section[] = [\r\n  {\r\n    name: \"آغاز فعالیت (10%)\",\r\n    activities: [\r\n      { id: \"uniform\", title: \"یونیفورم\", percent: 6 },\r\n      { id: \"coworkers\", title: \"برخورد با همکاران\", percent: 2 },\r\n      { id: \"patients\", title: \"برخورد با مریض\", percent: 2 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"شیوه اخذ مشاهده (9%)\",\r\n    activities: [\r\n      { id: \"cc\", title: \"شهرت مریض\", percent: 2 },\r\n      { id: \"pi\", title: \"معاینه فزیکی\", percent: 2 },\r\n      {\r\n        id: \"postHistory\",\r\n        title: \"تجویز معاینات لابراتواری روتین\",\r\n        percent: 2,\r\n      },\r\n      { id: \"diagnosis\", title: \"تجویز معاینات وصفی و ضمیموی\", percent: 3 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"انجام مشوره طبی بموقع (6%)\",\r\n    activities: [{ id: \"consult\", title: \"انجام مشوره طبی بموقع\", percent: 6 }],\r\n  },\r\n  {\r\n    name: \"سعی در بلند بردن سطح دانش علمی و مسلکی (27%)\",\r\n    activities: [\r\n      { id: \"morning\", title: \"اشتراک فعال در راپو صبحانه\", percent: 6 },\r\n      { id: \"visits\", title: \"اشتراک فعال در ویزیت‌ها\", percent: 6 },\r\n      { id: \"conferences\", title: \"اشتراک فعال در کنفرانس‌ها\", percent: 12 },\r\n      {\r\n        id: \"license\",\r\n        title: \"تقویه یکی از لیسانس‌های معتبر خارجی\",\r\n        percent: 1,\r\n      },\r\n      { id: \"computer\", title: \"قدرت استفاده از کمپیوتر و انترنت\", percent: 1 },\r\n      { id: \"press\", title: \"استفاده از نشرات مطبوع\", percent: 1 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"دسپلین (24%)\",\r\n    activities: [\r\n      { id: \"attendance\", title: \"حاضر بودن\", percent: 6 },\r\n      { id: \"obedience\", title: \"اطاعت از اوامر معقول آمرمافوق\", percent: 6 },\r\n      { id: \"rules\", title: \"مراعات مقرره و لوایح تریننگ\", percent: 6 },\r\n      { id: \"duty\", title: \"اشتراک در نوکریوالی\", percent: 6 },\r\n    ],\r\n  },\r\n  {\r\n    name: \"خصوصیات فردی (24%)\",\r\n    activities: [\r\n      { id: \"expression\", title: \"افاده بیان\", percent: 2 },\r\n      { id: \"initiative\", title: \"ابتکار سالم\", percent: 2 },\r\n      { id: \"leadership\", title: \"تصمیم و رهبری\", percent: 2 },\r\n      { id: \"honesty\", title: \"راستکاری و همکاری\", percent: 4 },\r\n      { id: \"resources\", title: \"استفاده معقول از منابع\", percent: 2 },\r\n      { id: \"responsibility\", title: \"مسٔولیت‌پذیری\", percent: 2 },\r\n      { id: \"evaluation\", title: \"تحلیل و ارزیابی\", percent: 2 },\r\n      { id: \"feedback\", title: \"انتقاد و پیشنهاد سازنده\", percent: 2 },\r\n      { id: \"individual\", title: \"رسیدگی به وضع فردی\", percent: 2 },\r\n      { id: \"social\", title: \"رابطه اجتماعی\", percent: 2 },\r\n      { id: \"position\", title: \"استفاده بجا از موقف کاری\", percent: 2 },\r\n    ],\r\n  },\r\n];\r\n\r\nconst months = Array.from({ length: 12 }, (_, i) => i + 1);\r\n\r\nconst ChecklistForm: React.FC<checklistsProps> = ({ trainerIdProp }) => {\r\n  const [trainerId, setTrainerId] = useState<string | null>(null);\r\n  const [name, setName] = useState(\"\");\r\n  const [parentType, setParentType] = useState(\"\");\r\n  const [trainingYear, setTrainingYear] = useState(\"\");\r\n  const [scores, setScores] = useState<Record<string, Record<number, number>>>(\r\n    {}\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (trainerIdProp) setTrainerId(trainerIdProp);\r\n    else alert(\"هیچ ترینر فعالی یافت نشد!\");\r\n  }, [trainerIdProp]);\r\n\r\n  // بارگذاری اطلاعات دانشجو از سرور\r\n  useEffect(() => {\r\n    if (!trainerId) return;\r\n\r\n    const fetchStudentData = async () => {\r\n      try {\r\n        const res = await fetch(\r\n          `http://localhost:5000/api/trainers/${trainerIdProp}`\r\n        );\r\n        if (!res.ok) throw new Error(\"Failed to fetch student data\");\r\n        const data = await res.json();\r\n        setName(data.name || \"\");\r\n        setParentType(data.parentType || \"\");\r\n        setTrainingYear(data.trainingYear || \"\");\r\n      } catch (err) {\r\n        console.error(err);\r\n        alert(\"❌ خطا در بارگذاری اطلاعات دانشجو\");\r\n      }\r\n    };\r\n\r\n    fetchStudentData();\r\n  }, [trainerId]);\r\n\r\n  const handleScoreChange = (\r\n    activityId: string,\r\n    month: number,\r\n    value: number\r\n  ) => {\r\n    setScores((prev) => ({\r\n      ...prev,\r\n      [activityId]: { ...prev[activityId], [month]: value },\r\n    }));\r\n  };\r\n\r\n  const calculateTotal = (activity: Activity) =>\r\n    Object.values(scores[activity.id] || {}).reduce(\r\n      (sum, v) => sum + (v || 0),\r\n      0\r\n    );\r\n\r\n  const calculateSectionTotal = (section: Section) =>\r\n    section.activities.reduce((sum, act) => sum + calculateTotal(act), 0);\r\n\r\n  const calculateOverallTotal = () =>\r\n    sections.reduce((sum, sec) => sum + calculateSectionTotal(sec), 0);\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (!trainerId) return alert(\"❌ ID ترینر مشخص نیست!\");\r\n\r\n    const dataToSave = {\r\n      trainerId,\r\n      name,\r\n      parentType,\r\n      trainingYear,\r\n      sections: sections.map((sec) => ({\r\n        name: sec.name,\r\n        activities: sec.activities.map((act) => ({\r\n          id: act.id,\r\n          title: act.title,\r\n          percent: act.percent,\r\n          months: months.map((m) => ({\r\n            month: m,\r\n            value: scores[act.id]?.[m] || 0,\r\n          })),\r\n          total: calculateTotal(act),\r\n        })),\r\n        sectionTotal: calculateSectionTotal(sec),\r\n      })),\r\n      overallTotal: calculateOverallTotal(),\r\n    };\r\n\r\n    try {\r\n      const res = await fetch(\"http://localhost:5000/api/checklists\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(dataToSave),\r\n      });\r\n\r\n      const data = await res.json(); // 👈 این را اضافه کن تا پیام دقیق سرور را بگیری\r\n\r\n      if (!res.ok) {\r\n        // 👇 اگر سرور خطا داد، پیام دقیق را نمایش بده\r\n        throw new Error(data.error || data.message || \"خطای ناشناخته\");\r\n      }\r\n\r\n      alert(\"✅ فرم با موفقیت ذخیره شد!\");\r\n    } catch (err: any) {\r\n      console.error(\"❌ خطا در ذخیره داده:\", err);\r\n      alert(`❌ خطا در ذخیره داده: ${err.message}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ fontFamily: \"Calibri, sans-serif\" }}>\r\n      <>\r\n        <h1 className=\"text-2xl font-bold mb-4 text-center\">\r\n          چک لیست کاری و ارزیابی ماهوار ترینی‌های شفاخانه نور\r\n        </h1>\r\n        {/* اطلاعات ترینی */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"نام ترینی\"\r\n            value={name}\r\n            readOnly\r\n            className=\"border px-3 py-2 rounded-lg bg-gray-200\"\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"ولد\"\r\n            value={parentType}\r\n            readOnly\r\n            className=\"border px-3 py-2 rounded-lg bg-gray-200\"\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"سال آموزشی\"\r\n            value={trainingYear}\r\n            readOnly\r\n            className=\"border px-3 py-2 rounded-lg bg-gray-200\"\r\n          />\r\n        </div>\r\n\r\n        <form\r\n          onSubmit={handleSubmit}\r\n          className=\"max-w-7xl mx-auto p-6 bg-gray-100 rounded-xl shadow-md\"\r\n        >\r\n          {/* جدول‌ها */}\r\n          <div>\r\n            {sections.map((section) => (\r\n              <div key={section.name} className=\"mb-10 min-w-[900px]\">\r\n                <h2 className=\"text-lg font-semibold mb-2\">{section.name}</h2>\r\n                <table className=\"w-full border text-center text-sm bg-white rounded-lg shadow-sm\">\r\n                  <thead>\r\n                    <tr className=\"bg-gray-200\">\r\n                      <th className=\"p-2 border\">فعالیت</th>\r\n                      <th className=\"p-2 border\">فیصدی</th>\r\n                      {months.map((m) => (\r\n                        <th key={m} className=\"p-2 border\">\r\n                          {m}\r\n                        </th>\r\n                      ))}\r\n                      <th className=\"p-2 border\">مجموعه نمرات</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {section.activities.map((act) => (\r\n                      <tr key={act.id}>\r\n                        <td className=\"p-2 border\">{act.title}</td>\r\n                        <td className=\"p-2 border\">{act.percent}%</td>\r\n                        {months.map((m) => (\r\n                          <td key={m} className=\"p-2 border\">\r\n                            <input\r\n                              type=\"number\"\r\n                              min={0}\r\n                              max={act.percent}\r\n                              value={scores[act.id]?.[m] || \"\"}\r\n                              onChange={(e) =>\r\n                                handleScoreChange(\r\n                                  act.id,\r\n                                  m,\r\n                                  Number(e.target.value)\r\n                                )\r\n                              }\r\n                              className=\"w-6 h-5 text-xs border rounded text-center p-0\"\r\n                            />\r\n                          </td>\r\n                        ))}\r\n                        <td className=\"p-2 border font-bold\">\r\n                          {calculateTotal(act)}\r\n                        </td>\r\n                      </tr>\r\n                    ))}\r\n\r\n                    {/* مجموع بخش */}\r\n                    <tr className=\"bg-gray-100 font-bold\">\r\n                      <td className=\"p-2 border\" colSpan={2}>\r\n                        مجموع بخش\r\n                      </td>\r\n                      {months.map((m) => {\r\n                        const totalPerMonth = section.activities.reduce(\r\n                          (sum, act) => sum + (scores[act.id]?.[m] || 0),\r\n                          0\r\n                        );\r\n                        return (\r\n                          <td key={m} className=\"p-2 border\">\r\n                            {totalPerMonth}\r\n                          </td>\r\n                        );\r\n                      })}\r\n                      <td className=\"p-2 border\">\r\n                        {calculateSectionTotal(section)}\r\n                      </td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          {/* مجموع کل */}\r\n          <div className=\"text-right font-bold text-lg mb-4\">\r\n            مجموع کل نمرات: {calculateOverallTotal()}\r\n          </div>\r\n\r\n          <button\r\n            type=\"submit\"\r\n            className=\"mt-6 w-full bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 transition\"\r\n          >\r\n            ذخیره\r\n          </button>\r\n        </form>\r\n      </>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChecklistForm;\r\n","size_bytes":11785},"client/src/components/residents/resident-card.tsx":{"content":"import React, { useState } from \"react\";\nimport type { Resident, Form } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Eye, MoreHorizontal, Plus, X } from \"lucide-react\";\nimport ResidentDetailsModal from \"./ResidentDetailsModal\";\nimport FormModal from \"@/components/forms/form-modal\";\n\nconst FORM_TYPES = [\n  { type: \"J\", name: \"Initial Assessment\" },\n  { type: \"F\", name: \"Mid-Training Evaluation\" },\n  { type: \"D\", name: \"Clinical Skills\" },\n  { type: \"I\", name: \"Research Progress\" },\n  { type: \"G\", name: \"Communication Skills\" },\n  { type: \"E\", name: \"Ethics & Professionalism\" },\n  { type: \"C\", name: \"Case Presentation\" },\n  { type: \"H\", name: \"Hands-on Procedure\" },\n  { type: \"K\", name: \"Final Competency\" },\n];\n\ninterface ResidentCardProps {\n  resident: Resident;\n}\n\nexport default function ResidentCardList({ resident }: ResidentCardProps) {\n  const [showDropdown, setShowDropdown] = useState(false);\n  const [selectedForm, setSelectedForm] = useState<Form | null>(null);\n  const [showDetails, setShowDetails] = useState(false);\n\n  const handleSelectForm = (ft: { type: string; name: string }) => {\n    setSelectedForm({\n      _id: `new-${ft.type}`,\n      formType: ft.type,\n      status: \"pending\",\n      createdAt: new Date().toISOString(),\n      completedAt: null,\n      residentId: resident._id,\n    });\n    setShowDropdown(false);\n  };\n\n  return (\n    <>\n      <div className=\"grid grid-cols-7 items-center bg-white border border-slate-200 rounded-lg shadow-sm hover:shadow-md transition p-3 gap-2\">\n        <div className=\"flex justify-center\">\n          <div className=\"w-12 h-12 rounded-full overflow-hidden border border-slate-200\">\n            <img\n              src={resident.profileImageUrl ?? \"/assets/img/default-avatar.png\"}\n              alt={resident.fullName}\n              className=\"w-full h-full object-cover\"\n            />\n          </div>\n        </div>\n\n        <div className=\"text-slate-900 font-semibold\">{resident.fullName}</div>\n        <div className=\"text-slate-900\">{resident.fullName ?? \"\"}</div>\n        <div className=\"text-slate-700 text-sm\">{resident._id}</div>\n        <div className=\"text-slate-500 text-sm\">{resident.department}</div>\n\n        <div className=\"relative\">\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            className=\"text-xs flex items-center gap-1 border-slate-300 hover:bg-hospital-green-600 hover:text-white transition-colors\"\n            onClick={() => setShowDropdown((p) => !p)}\n          >\n            <Plus className=\"h-3 w-3\" />\n            اضافه فرم\n          </Button>\n\n          {showDropdown && (\n            <div className=\"absolute right-0 top-full mt-2 bg-white border border-slate-200 rounded-xl shadow-lg p-3 z-50 w-40\">\n              <div className=\"flex justify-between items-center mb-2\">\n                <span className=\"text-sm font-semibold text-slate-700\">انتخاب فرم</span>\n                <button onClick={() => setShowDropdown(false)} className=\"text-slate-500 hover:text-red-500\">\n                  <X className=\"w-4 h-4\" />\n                </button>\n              </div>\n              <div className=\"flex flex-col gap-2 max-h-80 overflow-y-auto\">\n                {FORM_TYPES.map((ft) => (\n                  <button\n                    key={ft.type}\n                    onClick={() => handleSelectForm(ft)}\n                    className=\"flex items-center justify-center w-10 h-10 rounded-full bg-slate-100 hover:bg-hospital-green-600 hover:text-white font-bold transition\"\n                    title={ft.name}\n                  >\n                    {ft.type}\n                  </button>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n\n        <div className=\"flex justify-center\">\n          <Button\n            size=\"icon\"\n            variant=\"outline\"\n            onClick={() => setShowDetails(true)}\n            title=\"جزئیات\"\n          >\n            <Eye className=\"h-4 w-4\" />\n          </Button>\n        </div>\n\n        <div className=\"flex justify-center\">\n          <Button\n            size=\"icon\"\n            variant=\"outline\"\n            title=\"اکشن\"\n          >\n            <MoreHorizontal className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n\n      {selectedForm && (\n        <FormModal form={selectedForm} onClose={() => setSelectedForm(null)} />\n      )}\n\n      {showDetails && (\n        <ResidentDetailsModal\n          residentId={resident._id}\n          isOpen={showDetails}\n          onClose={() => setShowDetails(false)}\n        />\n      )}\n    </>\n  );\n}\n","size_bytes":4622},"client/src/components/residents/form-details/formI-detail.tsx":{"content":"import React, { useEffect, useState, useRef } from \"react\";\nimport { useReactToPrint } from \"react-to-print\";\nimport * as XLSX from \"xlsx\";\n\ninterface RotationFormViewProps {\n  trainerId: string;\n}\n\nconst persianTopics = [\n  \"اشتراک در کنفرانس\",\n  \"اشتراک در تدریس/سمینار\",\n  \"کارهای عملی و تیوری\",\n  \"اخلاق طبی\",\n  \"حفظ نظم/اشتراک\",\n];\n\nconst englishCompetencies = [\n  \"Describe basics of radiographic & magnetic resonance imaging techniques and indications\",\n  \"Describe indications and approaches for radiographic and MR imaging techniques in ophthalmology\",\n  \"Detailed interpretation of skull & orbit radiographs\",\n  \"Interpretation of chest radiographs\",\n  \"Interpretation of limbs and spine radiographs\",\n  \"Detailed interpretation of brain & orbit CT simple radiographs and with contrast enhancement techniques\",\n  \"Interpretation of brain MRI in different techniques (e.g., Gadolinium, fat suppression technique and FLAIR)\",\n  \"Conducting and interpretation of MRA (Magnetic resonance Angiography) for eye diseases\",\n];\n\ntype WeekData = { cases: number; level: string };\n\ntype RotationRow = {\n  weeks: WeekData[];\n  total: number;\n};\n\ntype RotationForm = {\n  _id: string;\n  header: {\n    name: string;\n    parentType: string;\n    parentName: string;\n    department: string;\n    trainingYear: string;\n    rotationName: string;\n    rotationFrom: string;\n    rotationTo: string;\n    date: string;\n  };\n  persianRows: {\n    mark: number;\n    teacherName: string;\n    teacherSign: string;\n    note: string;\n  }[];\n  rows: RotationRow[];\n};\n\nexport default function RotationFormView({ trainerId }: RotationFormViewProps) {\n  const [forms, setForms] = useState<RotationForm[]>([]);\n  const [editing, setEditing] = useState(false);\n  const printRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const res = await fetch(\n          `http://localhost:5000/api/rotation-form/${trainerId}`\n        );\n        if (!res.ok) throw new Error(\"فرمی برای این ترینر موجود نیست\");\n        const data = await res.json();\n        setForms(data);\n      } catch (err) {\n        console.error(err);\n        setForms([]);\n      }\n    };\n    fetchData();\n  }, [trainerId]);\n\n  const handlePrint = useReactToPrint({\n    content: () => printRef.current,\n    documentTitle: \"RotationForm\",\n  });\n\n  const handleExportExcel = (form: RotationForm) => {\n    const wsData: any[] = [\n      [\n        \"اسم محصل\",\n        \"اسم پدر\",\n        \"اسم پدرکلان\",\n        \"دیپارتمنت\",\n        \"سال ترینینگ\",\n        \"نام روتیشن\",\n        \"Rotation From\",\n        \"Rotation To\",\n        \"تاریخ\",\n      ],\n      [\n        form.header.name,\n        form.header.parentType,\n        form.header.parentName,\n        form.header.department,\n        form.header.trainingYear,\n        form.header.rotationName,\n        form.header.rotationFrom,\n        form.header.rotationTo,\n        form.header.date,\n      ],\n      [],\n      [\"Persian Evaluation\"],\n      [\"Topic\", \"Mark\", \"Teacher Name\", \"Teacher Sign\", \"Note\"],\n      ...form.persianRows.map((r, i) => [\n        persianTopics[i] || \"\",\n        r.mark,\n        r.teacherName,\n        r.teacherSign,\n        r.note,\n      ]),\n      [],\n      [\"English Competencies\"],\n      [\n        \"Competence\",\n        \"W1 Cases\",\n        \"W1 Level\",\n        \"W2 Cases\",\n        \"W2 Level\",\n        \"W3 Cases\",\n        \"W3 Level\",\n        \"W4 Cases\",\n        \"W4 Level\",\n        \"Total\",\n      ],\n      ...form.rows.map((r, i) => [\n        englishCompetencies[i] || \"\",\n        ...r.weeks.flatMap((w) => [w.cases, w.level]),\n        r.total,\n      ]),\n    ];\n\n    const ws = XLSX.utils.aoa_to_sheet(wsData);\n    const wb = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, ws, \"RotationForm\");\n    XLSX.writeFile(wb, `RotationForm_${form.header.name}.xlsx`);\n  };\n\n  const handlePersianChange = (\n    formIndex: number,\n    rowIndex: number,\n    field: string,\n    value: any\n  ) => {\n    const updatedForms = [...forms];\n    updatedForms[formIndex] = {\n      ...updatedForms[formIndex],\n      persianRows: [...updatedForms[formIndex].persianRows],\n    };\n    updatedForms[formIndex].persianRows[rowIndex] = {\n      ...updatedForms[formIndex].persianRows[rowIndex],\n      [field]: value,\n    };\n    setForms(updatedForms);\n  };\n\n  const handleWeekChange = (\n    formIndex: number,\n    rowIndex: number,\n    weekIndex: number,\n    field: \"cases\" | \"level\",\n    value: any\n  ) => {\n    const updatedForms = [...forms];\n    updatedForms[formIndex] = {\n      ...updatedForms[formIndex],\n      rows: [...updatedForms[formIndex].rows],\n    };\n    updatedForms[formIndex].rows[rowIndex] = {\n      ...updatedForms[formIndex].rows[rowIndex],\n      weeks: [...updatedForms[formIndex].rows[rowIndex].weeks],\n    };\n    updatedForms[formIndex].rows[rowIndex].weeks[weekIndex] = {\n      ...updatedForms[formIndex].rows[rowIndex].weeks[weekIndex],\n      [field]: field === \"cases\" ? Number(value) : value,\n    };\n    updatedForms[formIndex].rows[rowIndex].total = updatedForms[formIndex].rows[\n      rowIndex\n    ].weeks.reduce((sum, w) => sum + w.cases, 0);\n    setForms(updatedForms);\n  };\n\n  const handleSaveToServer = async (form: RotationForm) => {\n    try {\n      const res = await fetch(\n        `http://localhost:5000/api/rotation-form/form/${form._id}`,\n        {\n          method: \"PUT\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(form),\n        }\n      );\n\n      if (!res.ok) throw new Error(\"خطا در ذخیره‌سازی\");\n      alert(\"فرم با موفقیت ذخیره شد ✅\");\n      setEditing(false);\n    } catch (err) {\n      console.error(err);\n      alert(\"خطا در ذخیره‌سازی ❌\");\n    }\n  };\n\n  if (forms.length === 0)\n    return (\n      <div className=\"p-4 text-center text-gray-700 bg-gray-50 rounded-lg shadow\">\n        فرمی برای این ترینر موجود نیست ❌\n      </div>\n    );\n\n  const headerLabels: Record<string, string> = {\n    name: \"اسم محصل\",\n    parentType: \"اسم پدر\",\n    parentName: \"اسم پدرکلان\",\n    department: \"دیپارتمنت\",\n    trainingYear: \"سال ترینینگ\",\n    rotationName: \"نام روتیشن\",\n    rotationFrom: \"شروع روتیشن\",\n    rotationTo: \"پایان روتیشن\",\n    date: \"تاریخ\",\n  };\n\n  return (\n    <div style={{ fontFamily: \"Calibri, sans-serif\" }} className=\"p-4\">\n      {forms.map((form, fi) => {\n        const grandTotal = form.rows.reduce((sum, r) => sum + r.total, 0);\n        return (\n          <div\n            key={form._id}\n            className=\"border rounded-lg bg-white shadow p-4 mb-6\"\n          >\n            {/* Header Buttons */}\n            <div className=\"flex flex-wrap justify-end gap-2 mb-4\">\n              <button\n                onClick={handlePrint}\n                className=\"bg-green-600 text-white px-3 py-1 rounded\"\n              >\n                PDF\n              </button>\n              <button\n                onClick={() => handleExportExcel(form)}\n                className=\"bg-yellow-500 text-white px-3 py-1 rounded\"\n              >\n                Excel\n              </button>\n              <button\n                onClick={() => setEditing(!editing)}\n                className=\"bg-blue-600 text-white px-3 py-1 rounded\"\n              >\n                {editing ? \"لغو\" : \"ویرایش\"}\n              </button>\n              {editing && (\n                <button\n                  onClick={() => handleSaveToServer(form)}\n                  className=\"bg-green-700 text-white px-3 py-1 rounded\"\n                >\n                  ذخیره\n                </button>\n              )}\n            </div>\n\n            <div ref={printRef}>\n              {/* General Info */}\n              <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-3 mb-4\">\n                {Object.entries(form.header).map(([key, value], idx) => (\n                  <div key={idx} className=\"flex flex-col\">\n                    <label className=\"text-sm text-gray-600 mb-1\">\n                      {headerLabels[key as keyof typeof headerLabels] || key}\n                    </label>\n                    <input\n                      type=\"text\"\n                      readOnly={!editing}\n                      value={value}\n                      onChange={(e) => {\n                        if (editing) {\n                          const updatedForms = [...forms];\n                          updatedForms[fi] = {\n                            ...updatedForms[fi],\n                            header: {\n                              ...updatedForms[fi].header,\n                              [key]: e.target.value,\n                            },\n                          };\n                          setForms(updatedForms);\n                        }\n                      }}\n                      className={`border rounded px-2 py-1 text-center ${\n                        editing ? \"bg-white\" : \"bg-gray-100\"\n                      }`}\n                    />\n                  </div>\n                ))}\n              </div>\n\n              {/* Persian Table */}\n              <div className=\"mb-6\">\n                <h3 className=\"font-semibold text-gray-700 mb-2\">\n                  ارزیابی فارسی\n                </h3>\n                <table className=\"min-w-full border-collapse text-center text-sm\">\n                  <thead className=\"bg-gray-100\">\n                    <tr>\n                      <th className=\"border p-2\">موضوع</th>\n                      <th className=\"border p-2\">نمره</th>\n                      <th className=\"border p-2\">نام استاد</th>\n                      <th className=\"border p-2\">امضا</th>\n                      <th className=\"border p-2\">ملاحظات</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {form.persianRows.map((r, i) => (\n                      <tr key={i} className=\"hover:bg-gray-50\">\n                        <td className=\"border p-2\">{persianTopics[i]}</td>\n                        <td className=\"border p-2\">\n                          {editing ? (\n                            <input\n                              type=\"number\"\n                              value={r.mark}\n                              onChange={(e) =>\n                                handlePersianChange(\n                                  fi,\n                                  i,\n                                  \"mark\",\n                                  Number(e.target.value)\n                                )\n                              }\n                              className=\"border px-1 py-0.5 w-16 text-center\"\n                            />\n                          ) : (\n                            r.mark\n                          )}\n                        </td>\n                        <td className=\"border p-2\">\n                          {editing ? (\n                            <input\n                              type=\"text\"\n                              value={r.teacherName}\n                              onChange={(e) =>\n                                handlePersianChange(\n                                  fi,\n                                  i,\n                                  \"teacherName\",\n                                  e.target.value\n                                )\n                              }\n                              className=\"border px-1 py-0.5\"\n                            />\n                          ) : (\n                            r.teacherName\n                          )}\n                        </td>\n                        <td className=\"border p-2\">\n                          {editing ? (\n                            <input\n                              type=\"text\"\n                              value={r.teacherSign}\n                              onChange={(e) =>\n                                handlePersianChange(\n                                  fi,\n                                  i,\n                                  \"teacherSign\",\n                                  e.target.value\n                                )\n                              }\n                              className=\"border px-1 py-0.5\"\n                            />\n                          ) : (\n                            r.teacherSign\n                          )}\n                        </td>\n                        <td className=\"border p-2\">\n                          {editing ? (\n                            <input\n                              type=\"text\"\n                              value={r.note}\n                              onChange={(e) =>\n                                handlePersianChange(\n                                  fi,\n                                  i,\n                                  \"note\",\n                                  e.target.value\n                                )\n                              }\n                              className=\"border px-1 py-0.5\"\n                            />\n                          ) : (\n                            r.note\n                          )}\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n\n              {/* English Table */}\n              <div className=\"mb-6\">\n                <h3 className=\"text-lg font-semibold text-gray-700 mb-4 text-center\">\n                  Rotation Competencies\n                </h3>\n                <div className=\"overflow-x-auto\">\n                  <table className=\"min-w-full border border-gray-300 rounded-lg text-sm text-center\">\n                    <thead className=\"bg-gray-100\">\n                      <tr>\n                        <th rowSpan={2} className=\"border p-2 w-64\">\n                          Competence\n                        </th>\n                        {[\"Week 1\", \"Week 2\", \"Week 3\", \"Week 4\"].map((w) => (\n                          <th key={w} colSpan={2} className=\"border p-2\">\n                            {w}\n                          </th>\n                        ))}\n                        <th rowSpan={2} className=\"border p-2\">\n                          Total\n                        </th>\n                      </tr>\n                      <tr>\n                        {Array.from({ length: 4 }).map((_, i) => (\n                          <React.Fragment key={i}>\n                            <th className=\"border p-1\">Cases</th>\n                            <th className=\"border p-1\">Level</th>\n                          </React.Fragment>\n                        ))}\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {form.rows.map((r, ri) => (\n                        <tr key={ri}>\n                          <td className=\"border p-2 text-left font-medium\">\n                            {englishCompetencies[ri]}\n                          </td>\n                          {r.weeks.map((w, wi) => (\n                            <React.Fragment key={wi}>\n                              <td className=\"border p-2\">\n                                {editing ? (\n                                  <input\n                                    type=\"number\"\n                                    value={w.cases}\n                                    onChange={(e) =>\n                                      handleWeekChange(\n                                        fi,\n                                        ri,\n                                        wi,\n                                        \"cases\",\n                                        e.target.value\n                                      )\n                                    }\n                                    className=\"border px-1 py-0.5 w-16 text-center\"\n                                  />\n                                ) : (\n                                  w.cases\n                                )}\n                              </td>\n                              <td className=\"border p-2\">\n                                {editing ? (\n                                  <input\n                                    type=\"text\"\n                                    value={w.level}\n                                    onChange={(e) =>\n                                      handleWeekChange(\n                                        fi,\n                                        ri,\n                                        wi,\n                                        \"level\",\n                                        e.target.value\n                                      )\n                                    }\n                                    className=\"border px-1 py-0.5 w-16 text-center\"\n                                  />\n                                ) : (\n                                  w.level\n                                )}\n                              </td>\n                            </React.Fragment>\n                          ))}\n                          <td className=\"border p-2 font-semibold\">\n                            {r.total}\n                          </td>\n                        </tr>\n                      ))}\n                      <tr className=\"bg-gray-100 font-bold\">\n                        <td className=\"border p-2 text-left\">Grand Total</td>\n                        <td className=\"border p-2 text-center\" colSpan={8}>\n                          {grandTotal}\n                        </td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":17870},"server/controllers/form-G.ts":{"content":"// controllers/evaluationFormGController.ts\r\nimport { Request, Response } from \"express\";\r\nimport mongoose from \"mongoose\";\r\nimport { EvaluationFormG } from \"../models/form-G\";\r\n\r\nexport class EvaluationFormGController {\r\n  // 🔹 ایجاد فرم جدید\r\n  static async create(req: Request, res: Response) {\r\n    try {\r\n      const { trainer, personalInfo, scores } = req.body;\r\n\r\n      if (!trainer) {\r\n        return res.status(400).json({ message: \"Trainer ID الزامی است\" });\r\n      }\r\n      if (!personalInfo || !scores) {\r\n        return res.status(400).json({ message: \"اطلاعات کامل فرم الزامی است\" });\r\n      }\r\n\r\n      // محاسبه میانگین کل (averageScore)\r\n      const filledRows = scores.slice(0, 5);\r\n      const totalSum = filledRows.reduce((sum: number, row: any) => sum + (Number(row.total) || 0), 0);\r\n      const averageScore = totalSum / filledRows.length;\r\n\r\n      const form = new EvaluationFormG({\r\n        trainer: new mongoose.Types.ObjectId(trainer),\r\n        personalInfo,\r\n        scores,\r\n        averageScore,\r\n      });\r\n\r\n      await form.save();\r\n      res.status(201).json({ message: \"✅ فرم با موفقیت ذخیره شد\", form });\r\n    } catch (err) {\r\n      console.error(\"❌ Error saving EvaluationFormG:\", err);\r\n      res.status(500).json({ message: \"خطا در ذخیره فرم\", error: err });\r\n    }\r\n  }\r\n\r\n  // 🔹 دریافت همه فرم‌ها یا فیلتر بر اساس trainerId\r\n  static async getAll(req: Request, res: Response) {\r\n    try {\r\n      const { trainerId } = req.query;\r\n      const filter = trainerId ? { trainer: new mongoose.Types.ObjectId(trainerId as string) } : {};\r\n\r\n      const forms = await EvaluationFormG.find(filter)\r\n        .populate(\"trainer\")\r\n        .sort({ createdAt: -1 });\r\n\r\n      res.status(200).json(forms);\r\n    } catch (err) {\r\n      console.error(\"❌ Error fetching EvaluationFormG:\", err);\r\n      res.status(500).json({ message: \"خطا در دریافت فرم‌ها\", error: err });\r\n    }\r\n  }\r\n\r\n  // 🔹 دریافت فرم بر اساس ID\r\n  static async getById(req: Request, res: Response) {\r\n    try {\r\n      const form = await EvaluationFormG.findById(req.params.id).populate(\"trainer\");\r\n      if (!form) return res.status(404).json({ message: \"فرم پیدا نشد\" });\r\n      res.json(form);\r\n    } catch (err) {\r\n      console.error(\"❌ Error fetching EvaluationFormG:\", err);\r\n      res.status(500).json({ message: \"خطا در دریافت فرم\", error: err });\r\n    }\r\n  }\r\n\r\n  // 🔹 بروزرسانی فرم بر اساس ID\r\n  static async update(req: Request, res: Response) {\r\n    try {\r\n      const updated = await EvaluationFormG.findByIdAndUpdate(req.params.id, req.body, { new: true });\r\n      if (!updated) return res.status(404).json({ message: \"فرم پیدا نشد\" });\r\n      res.json({ message: \"✅ فرم بروزرسانی شد\", updated });\r\n    } catch (err) {\r\n      console.error(\"❌ Error updating EvaluationFormG:\", err);\r\n      res.status(500).json({ message: \"خطا در بروزرسانی فرم\", error: err });\r\n    }\r\n  }\r\n\r\n  // 🔹 حذف فرم بر اساس ID\r\n  static async delete(req: Request, res: Response) {\r\n    try {\r\n      const deleted = await EvaluationFormG.findByIdAndDelete(req.params.id);\r\n      if (!deleted) return res.status(404).json({ message: \"فرم پیدا نشد\" });\r\n      res.json({ message: \"✅ فرم با موفقیت حذف شد\" });\r\n    } catch (err) {\r\n      console.error(\"❌ Error deleting EvaluationFormG:\", err);\r\n      res.status(500).json({ message: \"خطا در حذف فرم\", error: err });\r\n    }\r\n  }\r\n}\r\n","size_bytes":3678},"client/src/pages/residents.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Input } from \"@/components/ui/input\";\nimport TrainerRegistrationForm from \"@/components/forms/TrainerRegistrationForm\";\nimport TrainerDetails from \"@/components/residents/resident-details\";\nimport TrainerDetailsModal from \"@/components/residents/ResidentDetailsModal\";\nimport TrainerActionModal from \"@/components/residents/TrainerActionModal\";\nimport TrainerRewardPunishmentModal from \"@/components/residents/TrainerRewardPunishmentModal\";\n\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\nimport { Search, Eye, MoreHorizontal, Plus, X } from \"lucide-react\";\nimport FormModal from \"@/components/forms/form-modal\";\nimport Layout from \"@/components/layout/Layout\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\ntype Trainer = {\n  _id: string;\n  id: string;\n  name: string;\n  lastName: string;\n  parentType: string;\n  parentName: string;\n  gender: string;\n  province: string;\n  department: string;\n  specialty: string;\n  hospital: string;\n  joiningDate: string;\n  trainingYear: string;\n  supervisorName: string;\n  birthDate: string;\n  idNumber: string;\n  phoneNumber: string;\n  whatsappNumber: string;\n  email: string;\n  postNumberAndCode: string;\n  appointmentType: string;\n  status: string;\n  profileImageUrl?: string;\n  photo?: string;\n};\n\ntype FormType = { type: string; name: string };\n\nconst FORM_TYPES: FormType[] = [\n  { type: \"J\", name: \"Initial Assessment\" },\n  { type: \"F\", name: \"Mid-Training Evaluation\" },\n  { type: \"D\", name: \"Clinical Skills\" },\n  { type: \"I\", name: \"Research Progress\" },\n  { type: \"G\", name: \"Communication Skills\" },\n  { type: \"E\", name: \"Ethics & Professionalism\" },\n  { type: \"C\", name: \"Case Presentation\" },\n  { type: \"H\", name: \"Hands-on Procedure\" },\n  { type: \"K\", name: \"Final Competency\" },\n];\n\nexport default function TrainersPage() {\n  const { user } = useAuth();\n  const [selectedTrainer, setSelectedTrainer] = useState<string | null>(null);\n  const [selectedForm, setSelectedForm] = useState<any | null>(null);\n  const [showDropdownId, setShowDropdownId] = useState<string | null>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [departmentFilter, setDepartmentFilter] = useState(\"all\");\n  const [showForm, setShowForm] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isActionModalOpen, setIsActionModalOpen] = useState(false);\n  const [selectedActionTrainer, setSelectedActionTrainer] =\n    useState<Trainer | null>(null);\n  const [isRewardPunishmentModalOpen, setIsRewardPunishmentModalOpen] = useState(false);\n  const [selectedRewardPunishmentTrainer, setSelectedRewardPunishmentTrainer] =\n    useState<Trainer | null>(null);\n  const { data: trainers = [], isLoading } = useQuery<Trainer[]>({\n    queryKey: [\"/api/trainers\"],\n    queryFn: async () => {\n      const res = await fetch(\"/api/trainers\");\n      const data = await res.json();\n      // اگر response آرایه نباشد، آرایه خالی برگردون\n      return Array.isArray(data) ? data : [];\n    },\n  });\n\n  const filteredTrainers = Array.isArray(trainers) ? trainers.filter((trainer) => {\n    const fullName = `${trainer.name} ${trainer.lastName}`.toLowerCase();\n    const matchesSearch =\n      fullName.includes(searchTerm.toLowerCase()) ||\n      trainer.department.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesDepartment =\n      departmentFilter === \"all\" || trainer.department === departmentFilter;\n    return matchesSearch && matchesDepartment;\n  }) : [];\n\n  const departments = Array.from(new Set(Array.isArray(trainers) ? trainers.map((t) => t.department) : []));\n\n  const handleSelectForm = (trainer: Trainer, ft: FormType) => {\n    setSelectedForm({\n      _id: `new-${ft.type}`,\n      formType: ft.type,\n      status: \"pending\",\n      createdAt: new Date().toISOString(),\n      completedAt: null,\n      trainerId: trainer._id,\n    });\n    setShowDropdownId(null);\n  };\n\n  if (isLoading) {\n    return (\n      <Layout>\n        <div className=\"p-4 md:p-6\">\n          <div className=\"animate-pulse space-y-6\">\n            <div className=\"h-8 bg-slate-200 rounded w-64\"></div>\n            <div className=\"h-20 bg-slate-200 rounded\"></div>\n            <div className=\"space-y-4\">\n              {[...Array(3)].map((_, i) => (\n                <div key={i} className=\"h-32 bg-slate-200 rounded\"></div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout>\n      <div className=\"p-4 md:p-6 pt-6\">\n        {/* Header */}\n        <header className=\"bg-white shadow-sm border-b border-slate-200 -m-4 md:-m-6 mb-6\">\n          <div className=\"px-4 md:px-6 py-4 flex flex-col md:flex-row items-start md:items-center justify-between gap-3\">\n            <h1 className=\"text-xl md:text-2xl font-semibold text-slate-900\">\n              مدیریت ترینرها\n            </h1>\n            {user?.role === \"admin\" && (\n              <>\n                <Button\n                  className=\"bg-hospital-green-600 hover:bg-hospital-green-700 w-full md:w-auto\"\n                  onClick={() => setShowForm(true)}\n                >\n                  <Plus className=\"h-4 w-4 ml-2\" />\n                  <span className=\"hidden sm:inline\">افزودن ترینر جدید</span>\n                  <span className=\"sm:hidden\">افزودن ترینر</span>\n                </Button>\n\n                {showForm && (\n                  <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/50\">\n                    <div className=\"bg-white rounded-lg shadow-lg w-full max-w-lg p-6 relative\">\n                      <button\n                        onClick={() => setShowForm(false)}\n                        className=\"absolute top-3 right-3 text-slate-500 hover:text-slate-900\"\n                      >\n                        ✕\n                      </button>\n\n                      <TrainerRegistrationForm\n                        onClose={() => setShowForm(false)}\n                      />\n                    </div>\n                  </div>\n                )}\n              </>\n            )}\n          </div>\n        </header>\n\n        {/* Search and Filters */}\n        <div className=\"mb-6 bg-white p-4 rounded-lg shadow-sm border border-slate-200 flex flex-col md:flex-row md:items-center gap-4\">\n          <div className=\"relative flex-1 md:flex-initial\">\n            <Search className=\"h-4 w-4 absolute right-3 top-1/2 transform -translate-y-1/2 text-slate-400\" />\n            <Input\n              type=\"text\"\n              placeholder=\"جستجو ترینری...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pr-10 w-full md:w-64\"\n            />\n          </div>\n          <Select value={departmentFilter} onValueChange={setDepartmentFilter}>\n            <SelectTrigger className=\"w-full md:w-48\">\n              <SelectValue placeholder=\"همه بخش‌ها\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">همه بخش‌ها</SelectItem>\n              {departments.map((dept) => (\n                <SelectItem key={dept} value={dept}>\n                  {dept}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Table */}\n        <div className=\"overflow-x-auto -mx-4 md:mx-0\">\n        <table className=\"min-w-full border border-slate-200 text-sm\">\n          <thead className=\"bg-slate-100 text-slate-700 font-semibold\">\n            <tr>\n              <th className=\"p-2 text-center\">تصویر</th>\n              <th className=\"p-2 text-center\">نام</th>\n              <th className=\"p-2 text-center\">تخلص</th>\n              <th className=\"p-2 text-center\">آیدی</th>\n              <th className=\"p-2 text-center\">دپارتمان</th>\n              <th className=\"p-2 text-center\">اضافه نمودن فرم</th>\n              <th className=\"p-2 text-center\">جزئیات</th>\n              <th className=\"p-2 text-center\">اکشن</th>\n              <th className=\"p-2 text-center\">مجازات/مکافات</th>\n            </tr>\n          </thead>\n          <tbody>\n            {filteredTrainers.map((trainer) => (\n              <tr key={trainer._id} className=\"border-b hover:bg-slate-50\">\n                <td className=\"p-2 text-center\">\n                  <img\n                    src={\n                      trainer.photo\n                        ? `http://localhost:5000${trainer.photo}`\n                        : \"/assets/img/default-avatar.png\"\n                    }\n                    className=\"w-12 h-12 rounded-full mx-auto\"\n                  />\n                </td>\n                <td className=\"p-2 text-center\">{trainer.name}</td>\n                <td className=\"p-2 text-center\">{trainer.lastName}</td>\n                <td className=\"p-2 text-center\">{trainer.id}</td>\n                <td className=\"p-2 text-center\">{trainer.department}</td>\n\n                {/* اضافه کردن فرم */}\n                <td className=\"p-2 text-center relative\">\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    className=\"flex items-center gap-1\"\n                    onClick={() =>\n                      setShowDropdownId(\n                        showDropdownId === trainer._id ? null : trainer._id\n                      )\n                    }\n                  >\n                    <Plus className=\"h-3 w-3\" />\n                    اضافه نمودن فرم\n                  </Button>\n\n                  {showDropdownId === trainer._id && (\n                    <div className=\"absolute right-0 top-full mt-2 bg-white border border-slate-200 rounded-xl shadow-lg p-3 z-50 w-40\">\n                      {/* هدر dropdown */}\n                      <div className=\"flex justify-between items-center mb-2\">\n                        <span className=\"text-sm font-semibold text-slate-700\">\n                          انتخاب فرم\n                        </span>\n                        <button\n                          onClick={() => setShowDropdownId(null)}\n                          className=\"text-slate-500 hover:text-red-500\"\n                        >\n                          <X className=\"w-4 h-4\" />\n                        </button>\n                      </div>\n\n                      {/* لیست فرم‌ها */}\n                      <div className=\"flex flex-col gap-2 max-h-80 overflow-y-auto\">\n                        {FORM_TYPES.map((ft) => (\n                          <button\n                            key={ft.type}\n                            onClick={() => {\n                              handleSelectForm(trainer, ft); // ست کردن selectedForm\n                              setShowDropdownId(null); // بستن dropdown بعد از انتخاب\n                            }}\n                            className=\"flex items-center justify-center w-10 h-10 rounded-full bg-slate-100 hover:bg-hospital-green-600 hover:text-white font-bold transition\"\n                            title={ft.name}\n                          >\n                            {ft.type}\n                          </button>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </td>\n\n                {/* جزئیات */}\n                <td className=\"p-2 text-center\">\n                  <Button\n                    size=\"icon\"\n                    variant=\"outline\"\n                    onClick={() => {\n                      setSelectedTrainer(trainer._id); // یا resident._id\n                      setIsModalOpen(true);\n                    }}\n                  >\n                    <Eye className=\"h-4 w-4\" />\n                  </Button>\n                </td>\n\n                {/* اکشن */}\n                <td className=\"p-2 text-center\">\n                  {user?.role === \"admin\" && (\n                    <Button\n                      size=\"icon\"\n                      variant=\"outline\"\n                      onClick={() => {\n                        setSelectedActionTrainer(trainer);\n                        setIsActionModalOpen(true);\n                      }}\n                    >\n                      <MoreHorizontal className=\"h-4 w-4\" />\n                    </Button>\n                  )}\n                </td>\n\n                {/* مجازات/مکافات */}\n                <td className=\"p-2 text-center\">\n                  {user?.role === \"admin\" && (\n                    <Button\n                      size=\"icon\"\n                      variant=\"outline\"\n                      className=\"bg-amber-50 hover:bg-amber-100 border-amber-200\"\n                      onClick={() => {\n                        setSelectedRewardPunishmentTrainer(trainer);\n                        setIsRewardPunishmentModalOpen(true);\n                      }}\n                    >\n                      <MoreHorizontal className=\"h-4 w-4 text-amber-600\" />\n                    </Button>\n                  )}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n        </div>\n\n        {/* Modals */}\n\n        {selectedForm && (\n          <FormModal\n            form={selectedForm}\n            onClose={() => setSelectedForm(null)}\n            trainerId={selectedForm.trainerId} // 👈 اضافه شد\n          />\n        )}\n        {selectedTrainer && (\n          <TrainerDetailsModal\n            trainerId={selectedTrainer}\n            isOpen={isModalOpen}\n            onClose={() => {\n              setIsModalOpen(false);\n              setSelectedTrainer(null);\n            }}\n          />\n        )}\n        {selectedActionTrainer && (\n          <TrainerActionModal\n            trainerId={selectedActionTrainer._id}\n            trainerName={`${selectedActionTrainer.name} ${selectedActionTrainer.lastName}`}\n            isOpen={isActionModalOpen}\n            onClose={() => {\n              setIsActionModalOpen(false);\n              setSelectedActionTrainer(null);\n            }}\n          />\n        )}\n        {selectedRewardPunishmentTrainer && (\n          <TrainerRewardPunishmentModal\n            trainerId={selectedRewardPunishmentTrainer._id}\n            trainerName={`${selectedRewardPunishmentTrainer.name} ${selectedRewardPunishmentTrainer.lastName}`}\n            isOpen={isRewardPunishmentModalOpen}\n            onClose={() => {\n              setIsRewardPunishmentModalOpen(false);\n              setSelectedRewardPunishmentTrainer(null);\n            }}\n          />\n        )}\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":14818},"client/src/components/forms/teacher-form-dialog.tsx":{"content":"import { useForm } from \"react-hook-form\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { useEffect } from \"react\";\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\r\nimport { InsertTeacher, insertTeacherSchema } from \"@shared/schema\";\r\n\r\ninterface TeacherFormDialogProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  onSubmit: (data: InsertTeacher) => void;\r\n  title: string;\r\n  defaultValues?: Partial<InsertTeacher>;\r\n  isSubmitting: boolean;\r\n}\r\n\r\nexport default function TeacherFormDialog({\r\n  isOpen,\r\n  onClose,\r\n  onSubmit,\r\n  title,\r\n  defaultValues,\r\n  isSubmitting\r\n}: TeacherFormDialogProps) {\r\n  const form = useForm<InsertTeacher>({\r\n    resolver: zodResolver(insertTeacherSchema),\r\n    defaultValues: {\r\n      name: \"\",\r\n      lostname: \"\",\r\n      fatherName: \"\",\r\n      grandfatherName: \"\",\r\n      academicRank: \"\",\r\n      rankAchievementDate: new Date(),\r\n      trainerAppointmentDate: new Date(),\r\n      gender: \"\",\r\n      province: \"\",\r\n      subject: \"\",\r\n      position: \"\",\r\n      hospital: \"\",\r\n      dateOfBirth: new Date(),\r\n      idNumber: \"\",\r\n      dutyStartDate: new Date(),\r\n      contactInfo: \"\",\r\n      whatsappNumber: \"\",\r\n      emailAddress: \"\",\r\n      postCode: \"\",\r\n      appointmentType: \"\",\r\n      // department: \"\",\r\n      // experience: 0,\r\n      status: \"active\",\r\n      profileImageUrl: \"\",\r\n    },\r\n  });\r\n\r\n  // Reset form when dialog opens or defaultValues change\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      if (defaultValues) {\r\n        // Editing mode - populate with existing values\r\n        form.reset({\r\n          name: defaultValues.name || \"\",\r\n          lostname: defaultValues.lostname || \"\",\r\n          fatherName: defaultValues.fatherName || \"\",\r\n          grandfatherName: defaultValues.grandfatherName || \"\",\r\n          academicRank: defaultValues.academicRank || \"\",\r\n          rankAchievementDate: defaultValues.rankAchievementDate || new Date(),\r\n          trainerAppointmentDate: defaultValues.trainerAppointmentDate || new Date(),\r\n          gender: defaultValues.gender || \"\",\r\n          province: defaultValues.province || \"\",\r\n          subject: defaultValues.subject || \"\",\r\n          position: defaultValues.position || \"\",\r\n          hospital: defaultValues.hospital || \"\",\r\n          dateOfBirth: defaultValues.dateOfBirth || new Date(),\r\n          idNumber: defaultValues.idNumber || \"\",\r\n          dutyStartDate: defaultValues.dutyStartDate || new Date(),\r\n          contactInfo: defaultValues.contactInfo || \"\",\r\n          whatsappNumber: defaultValues.whatsappNumber || \"\",\r\n          emailAddress: defaultValues.emailAddress || \"\",\r\n          postCode: defaultValues.postCode || \"\",\r\n          appointmentType: defaultValues.appointmentType || \"\",\r\n          // department: defaultValues.department || \"\",\r\n          // experience: defaultValues.experience || 0,\r\n          status: defaultValues.status || \"active\",\r\n          profileImageUrl: defaultValues.profileImageUrl || \"\",\r\n        });\r\n      } else {\r\n        // Add mode - reset to empty values\r\n        form.reset({\r\n          name: \"\",\r\n          lostname: \"\",\r\n          fatherName: \"\",\r\n          grandfatherName: \"\",\r\n          academicRank: \"\",\r\n          rankAchievementDate: new Date(),\r\n          trainerAppointmentDate: new Date(),\r\n          gender: \"\",\r\n          province: \"\",\r\n          subject: \"\",\r\n          position: \"\",\r\n          hospital: \"\",\r\n          dateOfBirth: new Date(),\r\n          idNumber: \"\",\r\n          dutyStartDate: new Date(),\r\n          contactInfo: \"\",\r\n          whatsappNumber: \"\",\r\n          emailAddress: \"\",\r\n          postCode: \"\",\r\n          appointmentType: \"\",\r\n          // department: \"\",\r\n          // experience: 0,\r\n          status: \"active\",\r\n          profileImageUrl: \"\",\r\n        });\r\n      }\r\n    }\r\n  }, [isOpen, defaultValues, form]);\r\n\r\n  const handleSubmit = (data: InsertTeacher) => {\r\n    console.log('Form submission data:', data);\r\n    console.log('Form errors:', form.formState.errors);\r\n    onSubmit(data);\r\n  };\r\n\r\n  return (\r\n    <Dialog open={isOpen} onOpenChange={onClose}>\r\n      <DialogContent data-testid=\"dialog-teacher-form \"\r\n        className=\"max-h-[90vh] overflow-y-auto max-w-4xl w-full\">\r\n        <DialogHeader>\r\n          <DialogTitle  data-testid=\"text-teacher-form-title\">{title}</DialogTitle>\r\n        </DialogHeader>\r\n\r\n        <form onSubmit={form.handleSubmit(handleSubmit)} className=\"mt-4\">\r\n          <div className=\"grid grid-cols-2 gap-4 space-y-0\">\r\n            {/* First Column */}\r\n            <div className=\"space-y-4\">\r\n              <div>\r\n                <Label htmlFor=\"name\">نام</Label>\r\n                <Input\r\n                className=\"w-full border rounded-md p-2 focus:outline-none focus:ring-2 focus:ring-blue-400\"\r\n\r\n                  id=\"name\"\r\n                  {...form.register(\"name\")}\r\n                  placeholder=\"نام را وارد کنید\"\r\n                  data-testid=\"input-teacher-name\"\r\n                />\r\n                {form.formState.errors.name && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.name.message}</p>\r\n                )}\r\n              </div>\r\n                <div>\r\n                <Label htmlFor=\"lostname\">تخلص</Label>\r\n                <Input\r\n                  id=\"lostname\"\r\n                  {...form.register(\"lostname\")}\r\n                  placeholder=\"تخلص را وارد کنید\"\r\n                  data-testid=\"input-teacher-lostname\"\r\n                />\r\n                {form.formState.errors.lostname && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.lostname.message}</p>\r\n                )}\r\n              </div>\r\n              \r\n              <div>\r\n                <Label htmlFor=\"fatherName\">نام پدر</Label>\r\n                <Input\r\n                  id=\"fatherName\"\r\n                  {...form.register(\"fatherName\")}\r\n                  placeholder=\"نام پدر را وارد کنید\"\r\n                />\r\n                {form.formState.errors.fatherName && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.fatherName.message}</p>\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"grandfatherName\">ولدیت</Label>\r\n                <Input\r\n                  id=\"grandfatherName\"\r\n                  {...form.register(\"grandfatherName\")}\r\n                  placeholder=\"نام پدر کلان را وارد کنید\"\r\n                />\r\n                {form.formState.errors.grandfatherName && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.grandfatherName.message}</p>\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"academicRank\">رتبه علمی</Label>\r\n                <Input\r\n                  id=\"academicRank\"\r\n                  {...form.register(\"academicRank\")}\r\n                  placeholder=\"رتبه علمی را وارد کنید\"\r\n                />\r\n                {form.formState.errors.academicRank && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.academicRank.message}</p>\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"rankAchievementDate\">تاریخ اخذ رتبه</Label>\r\n                <Input\r\n                  id=\"rankAchievementDate\"\r\n                  type=\"date\"\r\n                  {...form.register(\"rankAchievementDate\", { valueAsDate: true })}\r\n                />\r\n                {form.formState.errors.rankAchievementDate && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.rankAchievementDate.message}</p>\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"trainerAppointmentDate\">تاریخ تقرر به صفت ترینر</Label>\r\n                <Input\r\n                  id=\"trainerAppointmentDate\"\r\n                  type=\"date\"\r\n                  {...form.register(\"trainerAppointmentDate\", { valueAsDate: true })}\r\n                />\r\n                {form.formState.errors.trainerAppointmentDate && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.trainerAppointmentDate.message}</p>\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"gender\">جنسیت</Label>\r\n                <Select value={form.watch(\"gender\")} onValueChange={(value) => form.setValue(\"gender\", value)}>\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder=\"جنسیت را انتخاب کنید\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"مرد\">مرد</SelectItem>\r\n                    <SelectItem value=\"زن\">زن</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n                {form.formState.errors.gender && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.gender.message}</p>\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n  <Label htmlFor=\"province\">ولایت</Label>\r\n  <select\r\n    id=\"province\"\r\n    {...form.register(\"province\", { required: \"لطفا یک ولایت انتخاب کنید\" })}\r\n    className=\"w-full border rounded-lg p-2 mt-1 focus:outline-none focus:ring-2 focus:ring-blue-400 bg-gray-100\"\r\n  >\r\n    <option value=\"\">یک ولایت انتخاب کنید</option>\r\n    <option value=\"Badakhshan\">بدخشان</option>\r\n    <option value=\"Badghis\">بادغیس</option>\r\n    <option value=\"Baghlan\">بغلان</option>\r\n    <option value=\"Balkh\">بلخ</option>\r\n    <option value=\"Bamyan\">بامیان</option>\r\n    <option value=\"Daykundi\">دایکندی</option>\r\n    <option value=\"Farah\">فراه</option>\r\n    <option value=\"Faryab\">فاریاب</option>\r\n    <option value=\"Ghazni\">غزنی</option>\r\n    <option value=\"Ghor\">غور</option>\r\n    <option value=\"Helmand\">هلمند</option>\r\n    <option value=\"Herat\">هرات</option>\r\n    <option value=\"Jowzjan\">جوزجان</option>\r\n    <option value=\"Kabul\">کابل</option>\r\n    <option value=\"Kandahar\">کندهار</option>\r\n    <option value=\"Kapisa\">کاپیسا</option>\r\n    <option value=\"Khost\">خوست</option>\r\n    <option value=\"Kunar\">کنر</option>\r\n    <option value=\"Kunduz\">کندز</option>\r\n    <option value=\"Laghman\">لغمان</option>\r\n    <option value=\"Logar\">لوگر</option>\r\n    <option value=\"Nangarhar\">ننگرهار</option>\r\n    <option value=\"Nimroz\">نیمروز</option>\r\n    <option value=\"Nuristan\">نورستان</option>\r\n    <option value=\"Paktia\">پکتیا</option>\r\n    <option value=\"Paktika\">پکتیکا</option>\r\n    <option value=\"Panjshir\">پنجشیر</option>\r\n    <option value=\"Parwan\">پروان</option>\r\n    <option value=\"Samangan\">سمنگان</option>\r\n    <option value=\"Sar-e Pol\">سرپل</option>\r\n    <option value=\"Takhar\">تخار</option>\r\n    <option value=\"Urozgan\">ارزگان</option>\r\n    <option value=\"Wardak\">میدان وردک</option>\r\n    <option value=\"Zabul\">زابل</option>\r\n  </select>\r\n\r\n  {form.formState.errors.province && (\r\n    <p className=\"text-red-500 text-sm mt-1\">\r\n      {form.formState.errors.province.message}\r\n    </p>\r\n  )}\r\n</div>\r\n\r\n\r\n              <div>\r\n                <Label htmlFor=\"subject\">رشته</Label>\r\n                <Input\r\n                  id=\"subject\"\r\n                  {...form.register(\"subject\")}\r\n                  placeholder=\"رشته تخصصی را وارد کنید\"\r\n                  data-testid=\"input-teacher-subject\"\r\n                />\r\n                {form.formState.errors.subject && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.subject.message}</p>\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"position\">وظیفه</Label>\r\n                <Input\r\n                  id=\"position\"\r\n                  {...form.register(\"position\")}\r\n                   placeholder=\"وظیفه را وارد کنید\"\r\n                />\r\n                {form.formState.errors.position && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.position.message}</p>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Second Column */}\r\n            <div className=\"space-y-4\">\r\n              <div>\r\n                <Label htmlFor=\"hospital\">شفاخانه</Label>\r\n                <Input\r\n                  id=\"hospital\"\r\n                  {...form.register(\"hospital\")}\r\n                  placeholder=\"نام شفاخانه را وارد کنید\"\r\n                />\r\n                {form.formState.errors.hospital && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.hospital.message}</p>\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"dateOfBirth\">تاریخ تولد</Label>\r\n                <Input\r\n                  id=\"dateOfBirth\"\r\n                  type=\"date\"\r\n                  {...form.register(\"dateOfBirth\", { valueAsDate: true })}\r\n                />\r\n                {form.formState.errors.dateOfBirth && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.dateOfBirth.message}</p>\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"idNumber\">نمبر تذکره</Label>\r\n                <Input\r\n                  id=\"idNumber\"\r\n                  {...form.register(\"idNumber\")}\r\n                  placeholder=\"نمبر تذکره را وارد کنید\"\r\n                />\r\n                {form.formState.errors.idNumber && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.idNumber.message}</p>\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"dutyStartDate\">تاریخ اغاز وظیفه</Label>\r\n                <Input\r\n                  id=\"dutyStartDate\"\r\n                  type=\"date\"\r\n                  {...form.register(\"dutyStartDate\", { valueAsDate: true })}\r\n                />\r\n                {form.formState.errors.dutyStartDate && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.dutyStartDate.message}</p>\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"contactInfo\">شماره تماس</Label>\r\n                <Input\r\n                  id=\"contactInfo\"\r\n                  {...form.register(\"contactInfo\")}\r\n                  placeholder=\"شماره تماس را وارد کنید\"\r\n                  data-testid=\"input-teacher-contact\"\r\n                />\r\n                {form.formState.errors.contactInfo && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.contactInfo.message}</p>\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"whatsappNumber\">شماره واتس اپ</Label>\r\n                <Input\r\n                  id=\"whatsappNumber\"\r\n                  {...form.register(\"whatsappNumber\")}\r\n                  placeholder=\"شماره واتس اپ را وارد کنید\"\r\n                />\r\n                {form.formState.errors.whatsappNumber && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.whatsappNumber.message}</p>\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"emailAddress\">ایمیل ادرس</Label>\r\n                <Input\r\n                  id=\"emailAddress\"\r\n                  type=\"email\"\r\n                  {...form.register(\"emailAddress\")}\r\n                  placeholder=\"ایمیل ادرس را وارد کنید\"\r\n                />\r\n                {form.formState.errors.emailAddress && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.emailAddress.message}</p>\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"postCode\">شماره وکد بست</Label>\r\n                <Input\r\n                  id=\"postCode\"\r\n                  {...form.register(\"postCode\")}\r\n                  placeholder=\"شماره وکد بست را وارد کنید\"\r\n                />\r\n                {form.formState.errors.postCode && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.postCode.message}</p>\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n                \r\n  <Label htmlFor=\"appointmentType\">نوع تقرری</Label>\r\n  <select\r\n    id=\"appointmentType\"\r\n    {...form.register(\"appointmentType\", { required: \"لطفاً نوع تقرری را انتخاب کنید\" })}\r\n    className=\"w-full border rounded-md p-2 mt-1 bg-gray-100\"\r\n  >\r\n    <option value=\"\">نوع تقرری را انتخاب کنید</option>\r\n    <option value=\"رقابت آزاد\">رقابت آزاد</option>\r\n    <option value=\"سرپرست\">سرپرست</option>\r\n    <option value=\"حکمی\">حکمی</option>\r\n  </select>\r\n\r\n  {form.formState.errors.appointmentType && (\r\n    <p className=\"text-red-500 text-sm mt-1 \">\r\n      {form.formState.errors.appointmentType.message}\r\n    </p>\r\n  )}\r\n</div>\r\n\r\n\r\n              {/* <div>\r\n                <Label htmlFor=\"department\">ریاست</Label>\r\n                <Input\r\n                  id=\"department\"\r\n                  {...form.register(\"department\")}\r\n                  placeholder=\"نام ریاست را وارد کنید\"\r\n                />\r\n                {form.formState.errors.department && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.department.message}</p>\r\n                )}\r\n              </div> */}\r\n\r\n              {/* <div>\r\n                <Label htmlFor=\"experience\">سابقه کار (سال)</Label>\r\n                <Input\r\n                  id=\"experience\"\r\n                  type=\"number\"\r\n                  {...form.register(\"experience\", { valueAsNumber: true })}\r\n                  placeholder=\"سابقه کار را وارد کنید\"\r\n                />\r\n                {form.formState.errors.experience && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.experience.message}</p>\r\n                )}\r\n              </div> */}\r\n\r\n              <div>\r\n              <Label htmlFor=\"status\">وضعیت فعلی</Label>\r\n              <Select value={form.watch(\"status\")} onValueChange={(value) => form.setValue(\"status\", value)}>\r\n                <SelectTrigger>\r\n                  <SelectValue placeholder=\"وضعیت فعلی را انتخاب کنید\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"active\">برحال</SelectItem>\r\n                  <SelectItem value=\"inactive\">منفک</SelectItem>\r\n                  \r\n                </SelectContent>\r\n              </Select>\r\n              {form.formState.errors.status && (\r\n                <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.status.message}</p>\r\n              )}\r\n            </div>\r\n            </div>\r\n          </div>\r\n\r\n    \r\n          <div className=\"flex items-center justify-end pt-4 border-t border-slate-200 mt-6 space-x-3 rtl:space-x-reverse\">\r\n            <Button variant=\"outline\" type=\"button\" onClick={onClose} data-testid=\"button-cancel-teacher-form\">\r\n              لغو\r\n            </Button>\r\n            <Button\r\n              type=\"submit\"\r\n              disabled={isSubmitting}\r\n              className=\"bg-hospital-green-600 hover:bg-hospital-green-700\"\r\n              data-testid=\"button-submit-teacher-form\"\r\n              onClick={() => {\r\n                console.log('Submit button clicked');\r\n                console.log('Form valid:', form.formState.isValid);\r\n                console.log('Form errors:', form.formState.errors);\r\n              }}\r\n            >\r\n              {isSubmitting ? 'در حال ذخیره...' : 'ذخیره'}\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}","size_bytes":20605},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"server/models/Lecture.ts":{"content":"import mongoose, { Document, Schema } from \"mongoose\";\n\nexport interface ILecture extends Document {\n  _id: string;\n  teacherId: string;\n  date: Date;\n  subject: string;\n  startTime: string;\n  endTime: string;\n  room: string;\n  notes: string;\n  files: ({\n    filename: string;\n    originalName: string;\n    path: string;\n    size: number;\n  } | string)[];\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nconst lectureSchema = new Schema<ILecture>({\n  teacherId: { type: String, required: true, ref: \"Teacher\" },\n  date: { type: Date, required: true },\n  subject: { type: String, required: true },\n  startTime: { type: String, required: true },\n  endTime: { type: String, required: true },\n  room: { type: String, required: true },\n  notes: { type: String, default: \"\" },\n  files: {\n    type: Schema.Types.Mixed,\n    default: [],\n  },\n  createdAt: { type: Date, default: Date.now },\n  updatedAt: { type: Date, default: Date.now },\n});\n\nexport const LectureModel = mongoose.model<ILecture>(\"Lecture\", lectureSchema);\n","size_bytes":1008},"server/routes/lectureRoutes.ts":{"content":"import express from 'express';\nimport { LectureModel } from '../models/Lecture';\nimport { z } from 'zod';\nimport multer from 'multer';\nimport path from 'path';\nimport fs from 'fs';\n\nconst router = express.Router();\n\n// Setup upload directory for lecture files\nconst uploadDir = path.join(process.cwd(), \"uploads\", \"lectures\");\nif (!fs.existsSync(uploadDir)) {\n  fs.mkdirSync(uploadDir, { recursive: true });\n}\n\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, uploadDir);\n  },\n  filename: (req, file, cb) => {\n    const uniqueSuffix = Date.now() + \"-\" + Math.round(Math.random() * 1e9);\n    cb(null, uniqueSuffix + \"-\" + file.originalname);\n  },\n});\n\nconst upload = multer({\n  storage,\n  limits: { fileSize: 10 * 1024 * 1024 }, // 10MB limit\n});\n\nconst createLectureSchema = z.object({\n  teacherId: z.string().min(1, \"Teacher ID is required\"),\n  date: z.string().transform((str) => new Date(str)),\n  subject: z.string().min(1, \"Subject is required\"),\n  startTime: z.string().min(1, \"Start time is required\"),\n  endTime: z.string().min(1, \"End time is required\"),\n  room: z.string().min(1, \"Room is required\"),\n  notes: z.string().optional().default(\"\"),\n});\n\nrouter.post('/', upload.array(\"files\", 10), async (req, res) => {\n  try {\n    const uploadedFiles = req.files as Express.Multer.File[];\n    const validatedData = createLectureSchema.parse(req.body);\n    \n    const files = uploadedFiles?.map((file) => ({\n      filename: file.filename,\n      originalName: file.originalname,\n      path: file.path,\n      size: file.size,\n    })) || [];\n    \n    const lecture = new LectureModel({\n      ...validatedData,\n      files,\n    });\n    const savedLecture = await lecture.save();\n    res.status(201).json(savedLecture);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ \n        message: 'Validation error', \n        errors: error.errors \n      });\n    }\n    console.error('Error creating lecture:', error);\n    res.status(500).json({ message: 'Failed to create lecture' });\n  }\n});\n\nrouter.get('/', async (req, res) => {\n  try {\n    const { teacherId } = req.query;\n    const query = teacherId ? { teacherId } : {};\n    const lectures = await LectureModel.find(query).sort({ date: -1 });\n    res.json(lectures);\n  } catch (error) {\n    console.error('Error fetching lectures:', error);\n    res.status(500).json({ message: 'Failed to fetch lectures' });\n  }\n});\n\nrouter.get('/:id', async (req, res) => {\n  try {\n    const lecture = await LectureModel.findById(req.params.id);\n    if (!lecture) {\n      return res.status(404).json({ message: 'Lecture not found' });\n    }\n    res.json(lecture);\n  } catch (error) {\n    console.error('Error fetching lecture:', error);\n    res.status(500).json({ message: 'Failed to fetch lecture' });\n  }\n});\n\nrouter.put('/:id', async (req, res) => {\n  try {\n    const validatedData = createLectureSchema.partial().parse(req.body);\n    const lecture = await LectureModel.findByIdAndUpdate(\n      req.params.id,\n      { ...validatedData, updatedAt: new Date() },\n      { new: true, runValidators: true }\n    );\n    \n    if (!lecture) {\n      return res.status(404).json({ message: 'Lecture not found' });\n    }\n    \n    res.json(lecture);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ \n        message: 'Validation error', \n        errors: error.errors \n      });\n    }\n    console.error('Error updating lecture:', error);\n    res.status(500).json({ message: 'Failed to update lecture' });\n  }\n});\n\nrouter.delete('/:id', async (req, res) => {\n  try {\n    const lecture = await LectureModel.findByIdAndDelete(req.params.id);\n    if (!lecture) {\n      return res.status(404).json({ message: 'Lecture not found' });\n    }\n    res.json({ message: 'Lecture deleted successfully' });\n  } catch (error) {\n    console.error('Error deleting lecture:', error);\n    res.status(500).json({ message: 'Failed to delete lecture' });\n  }\n});\n\n// Download lecture file\nrouter.get(\"/download/:filename\", (req, res) => {\n  try {\n    const { filename } = req.params;\n    \n    // Security: prevent path traversal\n    if (filename.includes('..') || filename.includes('/') || filename.includes('\\\\')) {\n      return res.status(400).json({ message: \"نام فایل نامعتبر است\" });\n    }\n\n    const filePath = path.join(uploadDir, filename);\n    const resolvedPath = path.resolve(filePath);\n    const resolvedUploadDir = path.resolve(uploadDir);\n\n    // Ensure file is within upload directory\n    if (!resolvedPath.startsWith(resolvedUploadDir)) {\n      return res.status(403).json({ message: \"دسترسی غیرمجاز\" });\n    }\n\n    // Check file exists\n    if (!fs.existsSync(resolvedPath)) {\n      return res.status(404).json({ message: \"فایل یافت نشد\" });\n    }\n\n    res.download(resolvedPath);\n  } catch (error) {\n    console.error(\"Error downloading lecture file:\", error);\n    res.status(500).json({ message: \"خطا در دانلود فایل\" });\n  }\n});\n\nexport { router as lectureRoutes };\n","size_bytes":5065},"server/routes/vacancyRoutes.ts":{"content":"import express from 'express';\nimport { VacancyModel } from '../models';\nimport { z } from 'zod';\nimport { isMongoConnected } from '../db';\n\nconst router = express.Router();\n\ninterface VacancyData {\n  _id: string;\n  name: string;\n  count: number;\n  date: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nconst inMemoryVacancies: VacancyData[] = [];\nlet inMemoryIdCounter = 1;\n\n// Vacancy validation schema\nconst createVacancySchema = z.object({\n  name: z.string().min(1, \"نام بست الزامی است\"),\n  count: z.number().min(1, \"تعداد باید حداقل 1 باشد\"),\n  date: z.string().min(1, \"تاریخ الزامی است\"),\n});\n\nconst updateVacancySchema = createVacancySchema.partial();\n\n// Get all vacancies\nrouter.get('/', async (req, res) => {\n  try {\n    if (isMongoConnected()) {\n      const vacancies = await VacancyModel.find().sort({ createdAt: -1 });\n      res.json(vacancies);\n    } else {\n      res.json(inMemoryVacancies.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime()));\n    }\n  } catch (error) {\n    console.error('Error fetching vacancies:', error);\n    res.status(500).json({ message: 'Failed to fetch vacancies' });\n  }\n});\n\n// Get vacancy by ID\nrouter.get('/:id', async (req, res) => {\n  try {\n    if (isMongoConnected()) {\n      const vacancy = await VacancyModel.findById(req.params.id);\n      if (!vacancy) {\n        return res.status(404).json({ message: 'Vacancy not found' });\n      }\n      res.json(vacancy);\n    } else {\n      const vacancy = inMemoryVacancies.find(v => v._id === req.params.id);\n      if (!vacancy) {\n        return res.status(404).json({ message: 'Vacancy not found' });\n      }\n      res.json(vacancy);\n    }\n  } catch (error) {\n    console.error('Error fetching vacancy:', error);\n    res.status(500).json({ message: 'Failed to fetch vacancy' });\n  }\n});\n\n// Create new vacancy\nrouter.post('/', async (req, res) => {\n  try {\n    const validatedData = createVacancySchema.parse(req.body);\n    \n    if (isMongoConnected()) {\n      const vacancy = new VacancyModel(validatedData);\n      const savedVacancy = await vacancy.save();\n      res.status(201).json(savedVacancy);\n    } else {\n      const newVacancy: VacancyData = {\n        _id: `vacancy_${inMemoryIdCounter++}`,\n        ...validatedData,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n      inMemoryVacancies.push(newVacancy);\n      res.status(201).json(newVacancy);\n    }\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ \n        message: 'Validation error', \n        errors: error.errors \n      });\n    }\n    console.error('Error creating vacancy:', error);\n    res.status(500).json({ message: 'Failed to create vacancy' });\n  }\n});\n\n// Update vacancy\nrouter.put('/:id', async (req, res) => {\n  try {\n    const validatedData = updateVacancySchema.parse(req.body);\n    \n    if (isMongoConnected()) {\n      const vacancy = await VacancyModel.findByIdAndUpdate(\n        req.params.id,\n        { ...validatedData, updatedAt: new Date() },\n        { new: true, runValidators: true }\n      );\n      \n      if (!vacancy) {\n        return res.status(404).json({ message: 'Vacancy not found' });\n      }\n      \n      res.json(vacancy);\n    } else {\n      const index = inMemoryVacancies.findIndex(v => v._id === req.params.id);\n      if (index === -1) {\n        return res.status(404).json({ message: 'Vacancy not found' });\n      }\n      \n      inMemoryVacancies[index] = {\n        ...inMemoryVacancies[index],\n        ...validatedData,\n        updatedAt: new Date(),\n      };\n      \n      res.json(inMemoryVacancies[index]);\n    }\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ \n        message: 'Validation error', \n        errors: error.errors \n      });\n    }\n    console.error('Error updating vacancy:', error);\n    res.status(500).json({ message: 'Failed to update vacancy' });\n  }\n});\n\n// Delete vacancy\nrouter.delete('/:id', async (req, res) => {\n  try {\n    if (isMongoConnected()) {\n      const vacancy = await VacancyModel.findByIdAndDelete(req.params.id);\n      if (!vacancy) {\n        return res.status(404).json({ message: 'Vacancy not found' });\n      }\n      res.json({ message: 'Vacancy deleted successfully' });\n    } else {\n      const index = inMemoryVacancies.findIndex(v => v._id === req.params.id);\n      if (index === -1) {\n        return res.status(404).json({ message: 'Vacancy not found' });\n      }\n      \n      inMemoryVacancies.splice(index, 1);\n      res.json({ message: 'Vacancy deleted successfully' });\n    }\n  } catch (error) {\n    console.error('Error deleting vacancy:', error);\n    res.status(500).json({ message: 'Failed to delete vacancy' });\n  }\n});\n\nexport { router as vacancyRoutes };\n","size_bytes":4777},"server/models/Vacancy.ts":{"content":"import mongoose, { Document, Schema } from \"mongoose\";\n\nexport interface IVacancy extends Document {\n  _id: string;\n  name: string;\n  count: number;\n  date: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nconst vacancySchema = new Schema<IVacancy>({\n  name: { type: String, required: true },\n  count: { type: Number, required: true, default: 1 },\n  date: { type: String, required: true },\n  createdAt: { type: Date, default: Date.now },\n  updatedAt: { type: Date, default: Date.now },\n});\n\nexport const VacancyModel = mongoose.model<IVacancy>(\"Vacancy\", vacancySchema);\n","size_bytes":571},"client/src/components/jobs/VacantPosts.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport axios from \"axios\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Plus } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\ninterface Vacancy {\n  _id: string;\n  name: string;\n  count: number;\n  date: string;\n}\n\nexport default function VacantPosts() {\n  const { user } = useAuth();\n  const [openDialog, setOpenDialog] = useState(false);\n  const [newVacancy, setNewVacancy] = useState({\n    name: \"\",\n    count: 1,\n    date: \"\",\n  });\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch vacancies\n  const { data: vacancies = [], isLoading } = useQuery<Vacancy[]>({\n    queryKey: ['/api/vacancies'],\n    queryFn: async () => {\n      const response = await axios.get('/api/vacancies');\n      return response.data;\n    },\n  });\n\n  // Create vacancy mutation\n  const createMutation = useMutation({\n    mutationFn: async (data: { name: string; count: number; date: string }) => {\n      const response = await axios.post('/api/vacancies', data);\n      return response.data;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/vacancies'] });\n      toast({\n        title: \"موفق\",\n        description: \"بست جدید با موفقیت اضافه شد\",\n      });\n      setNewVacancy({ name: \"\", count: 1, date: \"\" });\n      setOpenDialog(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"خطا\",\n        description: error.response?.data?.message || \"خطا در افزودن بست\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Handle add vacancy\n  const handleAddVacancy = () => {\n    if (!newVacancy.name || !newVacancy.date) {\n      toast({\n        title: \"خطا\",\n        description: \"لطفاً تمام فیلدها را پر کنید\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    createMutation.mutate(newVacancy);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Sidebar />\n      \n      <div className=\"mr-0 md:mr-64\">\n        <Header />\n        \n        <div className=\"pt-16 md:pt-20 p-4 md:p-6 space-y-4\">\n          {/* دکمه افزودن بست */}\n          <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3 mb-4\">\n            <h2 className=\"text-xl md:text-2xl font-bold text-slate-800\">مدیریت بست‌های خالی</h2>\n            {user?.role === \"admin\" && (\n              <Button \n                onClick={() => setOpenDialog(true)}\n                className=\"w-full sm:w-auto bg-hospital-green-600 hover:bg-hospital-green-700\"\n              >\n                <Plus className=\"ml-2 h-4 w-4\" />\n                افزودن بست جدید\n              </Button>\n            )}\n          </div>\n\n          {/* جدول نمایش بست‌ها */}\n          <div className=\"bg-white rounded-lg shadow border border-slate-200 overflow-hidden\">\n            <div className=\"overflow-x-auto\">\n              <table className=\"min-w-full border-collapse text-sm\">\n                <thead className=\"bg-slate-100 text-slate-700\">\n                  <tr>\n                    <th className=\"px-3 md:px-4 py-3 text-right font-semibold\">شماره</th>\n                    <th className=\"px-3 md:px-4 py-3 text-right font-semibold\">نام بست</th>\n                    <th className=\"px-3 md:px-4 py-3 text-right font-semibold\">تعداد</th>\n                    <th className=\"px-3 md:px-4 py-3 text-right font-semibold\">تاریخ ثبت</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {isLoading ? (\n                    <tr>\n                      <td colSpan={4} className=\"text-center text-gray-500 py-8\">\n                        <div className=\"flex items-center justify-center gap-2\">\n                          <div className=\"animate-spin h-5 w-5 border-2 border-hospital-green-600 border-t-transparent rounded-full\"></div>\n                          در حال بارگذاری...\n                        </div>\n                      </td>\n                    </tr>\n                  ) : vacancies.length > 0 ? (\n                    vacancies.map((v, index) => (\n                      <tr\n                        key={v._id}\n                        className={`${\n                          index % 2 === 0 ? \"bg-white\" : \"bg-slate-50\"\n                        } hover:bg-slate-100 transition-colors`}\n                      >\n                        <td className=\"px-3 md:px-4 py-3 text-slate-900\">{index + 1}</td>\n                        <td className=\"px-3 md:px-4 py-3 text-slate-900 font-medium\">{v.name}</td>\n                        <td className=\"px-3 md:px-4 py-3 text-slate-900\">{v.count}</td>\n                        <td className=\"px-3 md:px-4 py-3 text-slate-600\">{v.date}</td>\n                      </tr>\n                    ))\n                  ) : (\n                    <tr>\n                      <td colSpan={4} className=\"text-center text-gray-500 py-8\">\n                        <div className=\"flex flex-col items-center gap-2\">\n                          <svg className=\"h-12 w-12 text-slate-300\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n                          </svg>\n                          <p className=\"text-lg\">هیچ بست خالی ثبت نشده است</p>\n                        </div>\n                      </td>\n                    </tr>\n                  )}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* مودال افزودن بست */}\n      <Dialog open={openDialog} onOpenChange={setOpenDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>افزودن بست جدید</DialogTitle>\n          </DialogHeader>\n\n          <div className=\"space-y-4\">\n            <div>\n              <Label>نام بست</Label>\n              <Input\n                value={newVacancy.name}\n                onChange={(e) =>\n                  setNewVacancy({ ...newVacancy, name: e.target.value })\n                }\n                placeholder=\"مثلاً استاد، کارشناس IT\"\n              />\n            </div>\n\n            <div>\n              <Label>تعداد بست</Label>\n              <Input\n                type=\"number\"\n                value={newVacancy.count}\n                onChange={(e) =>\n                  setNewVacancy({\n                    ...newVacancy,\n                    count: Number(e.target.value),\n                  })\n                }\n              />\n            </div>\n\n            <div>\n              <Label>تاریخ ثبت</Label>\n              <Input\n                type=\"date\"\n                value={newVacancy.date}\n                onChange={(e) =>\n                  setNewVacancy({ ...newVacancy, date: e.target.value })\n                }\n              />\n            </div>\n\n            <div className=\"flex justify-end pt-3\">\n              <Button \n                onClick={handleAddVacancy}\n                disabled={createMutation.isPending}\n              >\n                {createMutation.isPending ? \"در حال ثبت...\" : \"ثبت بست\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":7921},"client/src/components/reports/TrainerLecturesModal.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { format } from \"date-fns\";\nimport { Download } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface FileInfo {\n  filename: string;\n  originalName: string;\n  path: string;\n  size: number;\n}\n\ninterface Lecture {\n  _id: string;\n  date: string;\n  subject: string;\n  startTime: string;\n  endTime: string;\n  room: string;\n  notes: string;\n  files: (FileInfo | string)[];\n}\n\ninterface TrainerLecturesModalProps {\n  trainerId: string;\n  trainerName: string;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function TrainerLecturesModal({\n  trainerId,\n  trainerName,\n  isOpen,\n  onClose,\n}: TrainerLecturesModalProps) {\n  const { data: lectures = [], isLoading } = useQuery<Lecture[]>({\n    queryKey: [\"/api/lectures\", trainerId],\n    queryFn: async () => {\n      const res = await fetch(`/api/lectures?teacherId=${trainerId}`);\n      if (!res.ok) throw new Error(\"Failed to fetch lectures\");\n      return res.json();\n    },\n    enabled: isOpen,\n  });\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-3xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-xl\">\n            لکچرهای {trainerName}\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"mt-4\">\n          {isLoading ? (\n            <div className=\"text-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-green-600 mx-auto\"></div>\n              <p className=\"mt-2 text-slate-600\">در حال بارگذاری...</p>\n            </div>\n          ) : lectures.length === 0 ? (\n            <div className=\"text-center py-8 text-slate-500\">\n              هیچ لکچری ثبت نشده است\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {lectures.map((lecture) => (\n                <div\n                  key={lecture._id}\n                  className=\"border border-slate-200 rounded-lg p-4 hover:shadow-md transition-shadow\"\n                >\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                    <div>\n                      <span className=\"text-sm font-semibold text-slate-600\">تاریخ:</span>\n                      <p className=\"text-slate-800\">\n                        {format(new Date(lecture.date), \"yyyy-MM-dd\")}\n                      </p>\n                    </div>\n                    <div>\n                      <span className=\"text-sm font-semibold text-slate-600\">مضمون:</span>\n                      <p className=\"text-slate-800\">{lecture.subject}</p>\n                    </div>\n                    <div>\n                      <span className=\"text-sm font-semibold text-slate-600\">ساعت:</span>\n                      <p className=\"text-slate-800\">\n                        {lecture.startTime} - {lecture.endTime}\n                      </p>\n                    </div>\n                    <div>\n                      <span className=\"text-sm font-semibold text-slate-600\">صنف/تالار:</span>\n                      <p className=\"text-slate-800\">{lecture.room}</p>\n                    </div>\n                    {lecture.notes && (\n                      <div className=\"md:col-span-2\">\n                        <span className=\"text-sm font-semibold text-slate-600\">توضیحات:</span>\n                        <p className=\"text-slate-800\">{lecture.notes}</p>\n                      </div>\n                    )}\n                    {lecture.files && lecture.files.length > 0 && (\n                      <div className=\"md:col-span-2\">\n                        <span className=\"text-sm font-semibold text-slate-600\">فایل‌ها:</span>\n                        <div className=\"mt-2 space-y-2\">\n                          {lecture.files.map((file, idx) => {\n                            // Handle both old format (string) and new format (object)\n                            const isOldFormat = typeof file === 'string';\n                            const fileName = isOldFormat ? file : file.originalName;\n                            const fileSize = isOldFormat ? null : file.size;\n                            const downloadUrl = isOldFormat ? '#' : `/api/lectures/download/${file.filename}`;\n                            \n                            return (\n                              <div key={idx} className=\"flex items-center justify-between p-2 bg-slate-50 rounded-lg\">\n                                <div className=\"flex items-center gap-2\">\n                                  <span className=\"text-sm text-slate-800\">{fileName}</span>\n                                  {fileSize && (\n                                    <span className=\"text-xs text-slate-500\">\n                                      ({(fileSize / 1024).toFixed(1)} KB)\n                                    </span>\n                                  )}\n                                </div>\n                                {!isOldFormat && (\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"outline\"\n                                    onClick={() => window.open(downloadUrl, '_blank')}\n                                    className=\"flex items-center gap-1\"\n                                  >\n                                    <Download className=\"h-3 w-3\" />\n                                    دانلود\n                                  </Button>\n                                )}\n                              </div>\n                            );\n                          })}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":6004},"client/src/components/residents/TrainerActionModal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { X, Save, Upload, FileText } from \"lucide-react\";\n\ninterface TrainerActionModalProps {\n  trainerId: string;\n  trainerName: string;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function TrainerActionModal({\n  trainerId,\n  trainerName,\n  isOpen,\n  onClose,\n}: TrainerActionModalProps) {\n  const [description, setDescription] = useState(\"\");\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n  const queryClient = useQueryClient();\n\n  const createActionMutation = useMutation({\n    mutationFn: async (formData: FormData) => {\n      const res = await fetch(\"/api/trainer-actions\", {\n        method: \"POST\",\n        body: formData,\n      });\n      if (!res.ok) throw new Error(\"خطا در ثبت اکشن\");\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"trainer-actions\", trainerId] });\n      setDescription(\"\");\n      setSelectedFiles([]);\n      onClose();\n    },\n  });\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files) {\n      setSelectedFiles(Array.from(e.target.files));\n    }\n  };\n\n  const handleRemoveFile = (index: number) => {\n    setSelectedFiles((prev) => prev.filter((_, i) => i !== index));\n  };\n\n  const handleSubmit = () => {\n    if (!description.trim()) {\n      alert(\"لطفاً توضیحات را وارد کنید\");\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append(\"trainerId\", trainerId);\n    formData.append(\"description\", description.trim());\n    \n    selectedFiles.forEach((file) => {\n      formData.append(\"files\", file);\n    });\n\n    createActionMutation.mutate(formData);\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return \"0 Bytes\";\n    const k = 1024;\n    const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\"];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return Math.round(bytes / Math.pow(k, i) * 100) / 100 + \" \" + sizes[i];\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle className=\"text-xl font-bold\">\n            ثبت اکشن جدید برای: {trainerName}\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"description\" className=\"mb-2 block\">\n              توضیحات\n            </Label>\n            <Textarea\n              id=\"description\"\n              placeholder=\"توضیحات اکشن را وارد کنید...\"\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              className=\"min-h-[100px]\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"files\" className=\"mb-2 block\">\n              آپلود فایل‌ها (حداکثر 10 فایل)\n            </Label>\n            <div className=\"border-2 border-dashed border-slate-300 rounded-lg p-4 text-center hover:border-hospital-green-500 transition-colors\">\n              <input\n                type=\"file\"\n                id=\"files\"\n                multiple\n                onChange={handleFileChange}\n                className=\"hidden\"\n              />\n              <label\n                htmlFor=\"files\"\n                className=\"cursor-pointer flex flex-col items-center gap-2\"\n              >\n                <Upload className=\"h-8 w-8 text-slate-400\" />\n                <span className=\"text-sm text-slate-600\">\n                  کلیک کنید یا فایل‌ها را بکشید و رها کنید\n                </span>\n                <span className=\"text-xs text-slate-400\">\n                  حداکثر حجم هر فایل: 10MB\n                </span>\n              </label>\n            </div>\n\n            {selectedFiles.length > 0 && (\n              <div className=\"mt-3 space-y-2\">\n                <p className=\"text-sm font-semibold text-slate-600\">\n                  فایل‌های انتخاب شده:\n                </p>\n                {selectedFiles.map((file, index) => (\n                  <div\n                    key={index}\n                    className=\"flex items-center justify-between p-2 bg-white border rounded-lg\"\n                  >\n                    <div className=\"flex items-center gap-2\">\n                      <FileText className=\"h-4 w-4 text-slate-500\" />\n                      <span className=\"text-sm\">{file.name}</span>\n                      <span className=\"text-xs text-slate-400\">\n                        ({formatFileSize(file.size)})\n                      </span>\n                    </div>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleRemoveFile(index)}\n                      className=\"text-red-500 hover:text-red-700\"\n                    >\n                      <X className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n\n          <Button\n            onClick={handleSubmit}\n            disabled={createActionMutation.isPending}\n            className=\"w-full bg-hospital-green-600 hover:bg-hospital-green-700\"\n          >\n            <Save className=\"h-4 w-4 ml-2\" />\n            {createActionMutation.isPending ? \"در حال ثبت...\" : \"ثبت اکشن\"}\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5830},"client/src/components/reports/TrainerActionsListModal.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Trash2, FileText, Download } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\ninterface TrainerActionsListModalProps {\n  trainerId: string;\n  trainerName: string;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\ninterface FileInfo {\n  filename: string;\n  originalName: string;\n  path: string;\n  size: number;\n}\n\ninterface TrainerAction {\n  _id: string;\n  trainer: string;\n  description: string;\n  files: FileInfo[];\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport default function TrainerActionsListModal({\n  trainerId,\n  trainerName,\n  isOpen,\n  onClose,\n}: TrainerActionsListModalProps) {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n\n  const { data: actions = [], isLoading } = useQuery<TrainerAction[]>({\n    queryKey: [\"trainer-actions\", trainerId],\n    queryFn: async () => {\n      const res = await fetch(`/api/trainer-actions/${trainerId}`);\n      if (!res.ok) throw new Error(\"خطا در دریافت اکشن‌ها\");\n      return res.json();\n    },\n    enabled: isOpen && !!trainerId,\n  });\n\n  const deleteActionMutation = useMutation({\n    mutationFn: async (actionId: string) => {\n      const res = await fetch(`/api/trainer-actions/${actionId}`, {\n        method: \"DELETE\",\n      });\n      if (!res.ok) throw new Error(\"خطا در حذف اکشن\");\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"trainer-actions\", trainerId] });\n    },\n  });\n\n  const handleDelete = (actionId: string) => {\n    if (confirm(\"آیا از حذف این اکشن اطمینان دارید؟\")) {\n      deleteActionMutation.mutate(actionId);\n    }\n  };\n\n  const handleDownload = (filename: string, originalName: string) => {\n    const link = document.createElement(\"a\");\n    link.href = `/api/trainer-actions/download/${filename}`;\n    link.download = originalName;\n    link.click();\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return \"0 Bytes\";\n    const k = 1024;\n    const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\"];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return Math.round(bytes / Math.pow(k, i) * 100) / 100 + \" \" + sizes[i];\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-xl font-bold\">\n            اکشن‌های ترینری: {trainerName}\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {isLoading ? (\n            <div className=\"text-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-hospital-green-500 mx-auto\"></div>\n            </div>\n          ) : actions.length === 0 ? (\n            <div className=\"text-center py-8 text-slate-500\">\n              هیچ اکشنی ثبت نشده است\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {actions.map((action) => (\n                <div\n                  key={action._id}\n                  className=\"border rounded-lg p-4 bg-white hover:shadow-md transition-shadow\"\n                >\n                  <div className=\"flex justify-between items-start mb-3\">\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm text-slate-600 mb-2\">\n                        تاریخ:{\" \"}\n                        {new Date(action.createdAt).toLocaleDateString(\"fa-IR\")}\n                      </p>\n                      <p className=\"text-base\">{action.description}</p>\n                    </div>\n                    {user?.role === \"admin\" && (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleDelete(action._id)}\n                        className=\"text-red-500 hover:text-red-700 hover:bg-red-50\"\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    )}\n                  </div>\n\n                  {action.files && action.files.length > 0 && (\n                    <div className=\"mt-3 pt-3 border-t\">\n                      <p className=\"text-sm font-semibold text-slate-600 mb-2\">\n                        فایل‌های پیوست شده:\n                      </p>\n                      <div className=\"space-y-2\">\n                        {action.files.map((file, index) => (\n                          <div\n                            key={index}\n                            className=\"flex items-center justify-between p-2 bg-slate-50 rounded-lg\"\n                          >\n                            <div className=\"flex items-center gap-2\">\n                              <FileText className=\"h-4 w-4 text-slate-500\" />\n                              <span className=\"text-sm\">{file.originalName}</span>\n                              <span className=\"text-xs text-slate-400\">\n                                ({formatFileSize(file.size)})\n                              </span>\n                            </div>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleDownload(file.filename, file.originalName)}\n                              className=\"text-hospital-green-600 hover:text-hospital-green-700\"\n                            >\n                              <Download className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":6064},"server/routes/trainerActionRoutes.ts":{"content":"import express, { Request, Response } from \"express\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport { TrainerAction } from \"../models/trainerAction\";\n\nconst router = express.Router();\n\nconst uploadDir = path.join(process.cwd(), \"uploads\", \"trainer-actions\");\nif (!fs.existsSync(uploadDir)) {\n  fs.mkdirSync(uploadDir, { recursive: true });\n}\n\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, uploadDir);\n  },\n  filename: (req, file, cb) => {\n    const uniqueSuffix = Date.now() + \"-\" + Math.round(Math.random() * 1e9);\n    cb(null, uniqueSuffix + \"-\" + file.originalname);\n  },\n});\n\nconst upload = multer({\n  storage,\n  limits: { fileSize: 10 * 1024 * 1024 },\n});\n\nrouter.post(\"/\", upload.array(\"files\", 10), async (req: Request, res: Response) => {\n  try {\n    const { trainerId, description } = req.body;\n    const uploadedFiles = req.files as Express.Multer.File[];\n\n    if (!trainerId || !description) {\n      return res.status(400).json({ message: \"شناسه ترینر و توضیحات الزامی است\" });\n    }\n\n    const files = uploadedFiles?.map((file) => ({\n      filename: file.filename,\n      originalName: file.originalname,\n      path: file.path,\n      size: file.size,\n    })) || [];\n\n    const newAction = new TrainerAction({\n      trainer: trainerId,\n      description,\n      files,\n    });\n\n    const savedAction = await newAction.save();\n    res.status(201).json(savedAction);\n  } catch (error) {\n    console.error(\"Error creating trainer action:\", error);\n    res.status(500).json({ message: \"خطا در ثبت اکشن\" });\n  }\n});\n\nrouter.get(\"/download/:filename\", (req: Request, res: Response) => {\n  try {\n    const { filename } = req.params;\n    \n    if (filename.includes('..') || filename.includes('/') || filename.includes('\\\\')) {\n      return res.status(400).json({ message: \"نام فایل نامعتبر است\" });\n    }\n\n    const filePath = path.join(uploadDir, filename);\n    const resolvedPath = path.resolve(filePath);\n    const resolvedUploadDir = path.resolve(uploadDir);\n\n    if (!resolvedPath.startsWith(resolvedUploadDir)) {\n      return res.status(403).json({ message: \"دسترسی غیرمجاز\" });\n    }\n\n    if (!fs.existsSync(resolvedPath)) {\n      return res.status(404).json({ message: \"فایل یافت نشد\" });\n    }\n\n    res.download(resolvedPath);\n  } catch (error) {\n    console.error(\"Error downloading file:\", error);\n    res.status(500).json({ message: \"خطا در دانلود فایل\" });\n  }\n});\n\nrouter.get(\"/:trainerId\", async (req: Request, res: Response) => {\n  try {\n    const { trainerId } = req.params;\n    \n    const actions = await TrainerAction.find({ trainer: trainerId })\n      .sort({ createdAt: -1 })\n      .lean();\n\n    res.status(200).json(actions);\n  } catch (error) {\n    console.error(\"Error fetching trainer actions:\", error);\n    res.status(500).json({ message: \"خطا در دریافت اکشن‌ها\" });\n  }\n});\n\nrouter.delete(\"/:actionId\", async (req: Request, res: Response) => {\n  try {\n    const { actionId } = req.params;\n    \n    const action = await TrainerAction.findById(actionId);\n    \n    if (!action) {\n      return res.status(404).json({ message: \"اکشن یافت نشد\" });\n    }\n\n    if (action.files && action.files.length > 0) {\n      action.files.forEach((file) => {\n        if (fs.existsSync(file.path)) {\n          fs.unlinkSync(file.path);\n        }\n      });\n    }\n\n    await TrainerAction.findByIdAndDelete(actionId);\n\n    res.status(200).json({ message: \"اکشن حذف شد\" });\n  } catch (error) {\n    console.error(\"Error deleting trainer action:\", error);\n    res.status(500).json({ message: \"خطا در حذف اکشن\" });\n  }\n});\n\nexport { router as trainerActionRoutes };\n","size_bytes":3789},"server/models/trainerAction.ts":{"content":"import mongoose, { Schema, Document, Types } from \"mongoose\";\n\nexport interface ITrainerAction extends Document {\n  trainer: Types.ObjectId; // رفرنس به ترینر\n  description: string; // توضیحات اکشن\n  files: { \n    filename: string; \n    originalName: string; \n    path: string; \n    size: number;\n  }[]; // آرایه فایل‌های آپلود شده\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nconst TrainerActionSchema = new Schema<ITrainerAction>(\n  {\n    trainer: {\n      type: Schema.Types.ObjectId,\n      ref: \"Trainer\",\n      required: true,\n    },\n    description: {\n      type: String,\n      required: true,\n      trim: true,\n    },\n    files: {\n      type: [{\n        filename: String,\n        originalName: String,\n        path: String,\n        size: Number,\n      }],\n      default: [],\n    },\n  },\n  { timestamps: true }\n);\n\nexport const TrainerAction = mongoose.model<ITrainerAction>(\n  \"TrainerAction\",\n  TrainerActionSchema\n);\n","size_bytes":966},"client/src/components/residents/form-details/formF-detail.tsx":{"content":"import React, { useEffect, useState, useRef } from \"react\";\nimport { useReactToPrint } from \"react-to-print\";\nimport * as XLSX from \"xlsx\";\n\ninterface MonthScore {\n  month: number;\n  value: number;\n}\n\ninterface Activity {\n  id: string;\n  title: string;\n  percent: number;\n  months: MonthScore[];\n  total: number;\n}\n\ninterface Section {\n  name: string;\n  activities: Activity[];\n}\n\ninterface Checklist {\n  _id: string;\n  trainerId: string;\n  name: string;\n  parentType: string;\n  trainingYear: string;\n  sections?: Section[]; // optional for safety\n}\n\ninterface ChecklistDisplayProps {\n  trainerId: string;\n}\n\nconst months = Array.from({ length: 12 }, (_, i) => i + 1);\n\nexport default function ChecklistDisplay({ trainerId }: ChecklistDisplayProps) {\n  const [checklists, setChecklists] = useState<Checklist[]>([]);\n  const [editingId, setEditingId] = useState<string | null>(null);\n  const [tempData, setTempData] = useState<Record<string, Checklist>>({});\n  const printRefs = useRef<Record<string, HTMLDivElement | null>>({});\n\n  useEffect(() => {\n    if (!trainerId) return;\n    const fetchChecklists = async () => {\n      try {\n        const res = await fetch(`/api/checklists?trainerId=${trainerId}`);\n        if (!res.ok) throw new Error(\"خطا در دریافت داده‌ها\");\n        const data: Checklist[] = await res.json();\n        setChecklists(data);\n        const tempObj: Record<string, Checklist> = {};\n        data.forEach((c) => (tempObj[c._id] = { ...c }));\n        setTempData(tempObj);\n      } catch (err) {\n        console.error(err);\n        setChecklists([]);\n      }\n    };\n    fetchChecklists();\n  }, [trainerId]);\n\n  const handlePrint = (id: string) => {\n    const printFn = useReactToPrint({\n      content: () => printRefs.current[id],\n      documentTitle: `Checklist_${id}`,\n    });\n    printFn();\n  };\n\n  const handleExportExcel = (checklist: Checklist) => {\n    if (!checklist.sections?.length) return alert(\"❌ داده‌ای برای خروجی نیست\");\n    const wb = XLSX.utils.book_new();\n    checklist.sections.forEach((section) => {\n      const wsData = [\n        [\"فعالیت\", \"فیصدی\", ...months.map((m) => `ماه ${m}`), \"مجموعه نمرات\"],\n      ];\n      section.activities.forEach((act) => {\n        wsData.push([\n          act.title,\n          act.percent,\n          ...months.map(\n            (m) => act.months.find((ms) => ms.month === m)?.value || 0\n          ),\n          act.total,\n        ]);\n      });\n      const ws = XLSX.utils.aoa_to_sheet(wsData);\n      XLSX.utils.book_append_sheet(wb, ws, section.name);\n    });\n    XLSX.writeFile(wb, `Checklist_${checklist.name}.xlsx`);\n  };\n\n  const handleSave = async (id: string) => {\n    const current = tempData[id];\n    if (!current) return;\n    try {\n      const res = await fetch(`/api/checklists/${id}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(current),\n      });\n      if (!res.ok) throw new Error(\"خطا در ذخیره تغییرات\");\n      const result = await res.json();\n      const updated = result.data || result; // support {data:updated} response\n      setChecklists((prev) => prev.map((c) => (c._id === id ? updated : c)));\n      setEditingId(null);\n      alert(\"✅ تغییرات ذخیره شد\");\n    } catch (err) {\n      console.error(err);\n      alert(\"❌ خطا در ذخیره تغییرات\");\n    }\n  };\n\n  if (checklists.length === 0)\n    return (\n      <div className=\"p-6 text-center text-gray-600\">\n        چک‌لیستی برای این ترینی موجود نیست.\n      </div>\n    );\n\n  return (\n    <div className=\"p-4\" style={{ fontFamily: \"Calibri, sans-serif\" }}>\n      {checklists.map((checklist) => {\n        const isEditing = editingId === checklist._id;\n        const currentData = tempData[checklist._id] || checklist;\n\n        if (!currentData || !Array.isArray(currentData.sections)) {\n          return (\n            <div\n              key={checklist._id}\n              className=\"p-4 bg-red-50 border border-red-200 text-red-700 rounded mb-4\"\n            >\n              ⚠️ ساختار داده‌ی فرم ناقص است یا هنوز بارگذاری نشده است.\n            </div>\n          );\n        }\n\n        return (\n          <div\n            key={checklist._id}\n            className=\"border rounded-lg bg-white shadow-sm p-6 mb-8\"\n          >\n            {/* هدر و دکمه‌ها */}\n            <div className=\"flex items-center justify-between mb-4 flex-wrap gap-2\">\n              <h1 className=\"text-2xl font-bold mb-4 text-center\">\n                چک لیست کاری و ارزیابی ماهوار ترینی‌های شفاخانه نور\n              </h1>\n              <div className=\"space-x-2\">\n                <button\n                  onClick={() => handlePrint(checklist._id)}\n                  className=\"bg-green-600 text-white px-3 py-1 rounded\"\n                >\n                  PDF\n                </button>\n                <button\n                  onClick={() => handleExportExcel(checklist)}\n                  className=\"bg-yellow-500 text-white px-3 py-1 rounded\"\n                >\n                  Excel\n                </button>\n                <button\n                  onClick={() =>\n                    isEditing ? setEditingId(null) : setEditingId(checklist._id)\n                  }\n                  className=\"bg-blue-600 text-white px-3 py-1 rounded\"\n                >\n                  {isEditing ? \"لغو\" : \"ویرایش\"}\n                </button>\n                {isEditing && (\n                  <button\n                    onClick={() => handleSave(checklist._id)}\n                    className=\"bg-green-700 text-white px-3 py-1 rounded\"\n                  >\n                    ذخیره\n                  </button>\n                )}\n              </div>\n            </div>\n\n            {/* اطلاعات ترینی */}\n            <div\n              ref={(el) => (printRefs.current[checklist._id] = el)}\n              className=\"border rounded-lg p-4 mb-4 bg-gray-50\"\n            >\n              <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-3 mb-4\">\n                <InputField\n                  label=\"نام ترینی\"\n                  value={currentData.name}\n                  editable={isEditing}\n                  onChange={(val) =>\n                    setTempData({\n                      ...tempData,\n                      [checklist._id]: { ...currentData, name: val },\n                    })\n                  }\n                />\n                <InputField\n                  label=\"ولد\"\n                  value={currentData.parentType}\n                  editable={isEditing}\n                  onChange={(val) =>\n                    setTempData({\n                      ...tempData,\n                      [checklist._id]: { ...currentData, parentType: val },\n                    })\n                  }\n                />\n                <InputField\n                  label=\"سال آموزشی\"\n                  value={currentData.trainingYear}\n                  editable={isEditing}\n                  onChange={(val) =>\n                    setTempData({\n                      ...tempData,\n                      [checklist._id]: { ...currentData, trainingYear: val },\n                    })\n                  }\n                />\n              </div>\n\n              {/* جدول‌ها */}\n              {currentData.sections.map((section, secIdx) => (\n                <SectionTable\n                  key={secIdx}\n                  section={section}\n                  secIdx={secIdx}\n                  isEditing={isEditing}\n                  checklist={checklist}\n                  currentData={currentData}\n                  tempData={tempData}\n                  setTempData={setTempData}\n                />\n              ))}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\n// 🔹 کامپوننت کمکی برای ورودی‌ها\nconst InputField = ({\n  label,\n  value,\n  editable,\n  onChange,\n}: {\n  label: string;\n  value: string;\n  editable: boolean;\n  onChange: (val: string) => void;\n}) => (\n  <div className=\"flex flex-col\">\n    <label className=\"text-sm text-gray-600 mb-1\">{label}</label>\n    <input\n      type=\"text\"\n      value={value || \"\"}\n      onChange={(e) => onChange(e.target.value)}\n      className={`border rounded px-3 py-2 text-center ${\n        editable ? \"bg-white\" : \"bg-gray-100\"\n      }`}\n      readOnly={!editable}\n    />\n  </div>\n);\n\n// 🔹 جدول هر بخش\nconst SectionTable = ({\n  section,\n  secIdx,\n  isEditing,\n  checklist,\n  currentData,\n  tempData,\n  setTempData,\n}: any) => {\n  return (\n    <div className=\"mb-6\">\n      <h3 className=\"text-lg font-semibold mb-2\">{section.name}</h3>\n      <div\n        className={`border border-gray-300 rounded-lg ${\n          isEditing ? \"min-w-[1000px] overflow-x-auto\" : \"w-full\"\n        }`}\n      >\n        <table className=\"w-full border-collapse text-center text-sm\">\n          <thead className=\"bg-gray-100 sticky top-0\">\n            <tr>\n              <th className=\"border p-2\">فعالیت</th>\n              <th className=\"border p-2\">فیصدی</th>\n              {months.map((m) => (\n                <th key={m} className=\"border p-2\">\n                  {m}\n                </th>\n              ))}\n              <th className=\"border p-2\">مجموعه نمرات</th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {section.activities.map((act: Activity, actIdx: number) => (\n              <tr key={act.id} className=\"odd:bg-white even:bg-gray-50\">\n                {/* ستون فعالیت: همیشه استاتیک */}\n                <td className=\"border p-2 font-bold\">{act.title}</td>\n\n                {/* ستون درصدی: همیشه استاتیک */}\n                <td className=\"border p-2 font-bold\">{act.percent}%</td>\n\n                {/* ستون‌های ماه‌ها: قابل ویرایش در حالت ویرایش */}\n                {months.map((m) => {\n                  const monthValue =\n                    act.months.find((ms) => ms.month === m)?.value || 0;\n                  return (\n                    <td key={m} className=\"border p-1\">\n                      {isEditing ? (\n                        <input\n                          type=\"number\"\n                          value={monthValue}\n                          onChange={(e) => {\n                            const newSections = [...currentData.sections];\n                            const monthIndex = newSections[secIdx].activities[\n                              actIdx\n                            ].months.findIndex((ms) => ms.month === m);\n                            if (monthIndex >= 0) {\n                              newSections[secIdx].activities[actIdx].months[\n                                monthIndex\n                              ].value = Number(e.target.value);\n                            }\n                            setTempData({\n                              ...tempData,\n                              [checklist._id]: {\n                                ...currentData,\n                                sections: newSections,\n                              },\n                            });\n                          }}\n                          className=\"border rounded px-2 py-1 w-full text-center\"\n                        />\n                      ) : (\n                        monthValue\n                      )}\n                    </td>\n                  );\n                })}\n\n                {/* مجموع نمرات */}\n                <td className=\"border p-2 font-bold\">{act.total}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n","size_bytes":11810},"server/routes/trainerRewardPunishmentRoutes.ts":{"content":"import express, { Request, Response } from \"express\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport { TrainerRewardPunishment } from \"../models/trainerRewardPunishment\";\n\nconst router = express.Router();\n\nconst uploadDir = path.join(process.cwd(), \"uploads\", \"trainer-reward-punishment\");\nif (!fs.existsSync(uploadDir)) {\n  fs.mkdirSync(uploadDir, { recursive: true });\n}\n\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, uploadDir);\n  },\n  filename: (req, file, cb) => {\n    const uniqueSuffix = Date.now() + \"-\" + Math.round(Math.random() * 1e9);\n    cb(null, uniqueSuffix + \"-\" + file.originalname);\n  },\n});\n\nconst upload = multer({\n  storage,\n  limits: { fileSize: 10 * 1024 * 1024 },\n});\n\nrouter.post(\"/\", upload.array(\"files\", 10), async (req: Request, res: Response) => {\n  try {\n    const { trainerId, type, description } = req.body;\n    const uploadedFiles = req.files as Express.Multer.File[];\n\n    if (!trainerId || !type || !description) {\n      return res.status(400).json({ message: \"شناسه ترینر، نوع و توضیحات الزامی است\" });\n    }\n\n    if (type !== \"reward\" && type !== \"punishment\") {\n      return res.status(400).json({ message: \"نوع باید reward یا punishment باشد\" });\n    }\n\n    const files = uploadedFiles?.map((file) => ({\n      filename: file.filename,\n      originalName: file.originalname,\n      path: file.path,\n      size: file.size,\n    })) || [];\n\n    const newRecord = new TrainerRewardPunishment({\n      trainer: trainerId,\n      type,\n      description,\n      files,\n    });\n\n    const savedRecord = await newRecord.save();\n    res.status(201).json(savedRecord);\n  } catch (error) {\n    console.error(\"Error creating reward/punishment:\", error);\n    res.status(500).json({ message: \"خطا در ثبت مجازات/مکافات\" });\n  }\n});\n\nrouter.get(\"/download/:filename\", (req: Request, res: Response) => {\n  try {\n    const { filename } = req.params;\n    \n    if (filename.includes('..') || filename.includes('/') || filename.includes('\\\\')) {\n      return res.status(400).json({ message: \"نام فایل نامعتبر است\" });\n    }\n\n    const filePath = path.join(uploadDir, filename);\n    const resolvedPath = path.resolve(filePath);\n    const resolvedUploadDir = path.resolve(uploadDir);\n\n    if (!resolvedPath.startsWith(resolvedUploadDir)) {\n      return res.status(403).json({ message: \"دسترسی غیرمجاز\" });\n    }\n\n    if (!fs.existsSync(resolvedPath)) {\n      return res.status(404).json({ message: \"فایل یافت نشد\" });\n    }\n\n    res.download(resolvedPath);\n  } catch (error) {\n    console.error(\"Error downloading file:\", error);\n    res.status(500).json({ message: \"خطا در دانلود فایل\" });\n  }\n});\n\nrouter.get(\"/:trainerId\", async (req: Request, res: Response) => {\n  try {\n    const { trainerId } = req.params;\n    \n    const records = await TrainerRewardPunishment.find({ trainer: trainerId })\n      .sort({ createdAt: -1 })\n      .lean();\n\n    res.status(200).json(records);\n  } catch (error) {\n    console.error(\"Error fetching reward/punishment records:\", error);\n    res.status(500).json({ message: \"خطا در دریافت سوابق\" });\n  }\n});\n\nrouter.delete(\"/:recordId\", async (req: Request, res: Response) => {\n  try {\n    const { recordId } = req.params;\n    \n    const record = await TrainerRewardPunishment.findById(recordId);\n    \n    if (!record) {\n      return res.status(404).json({ message: \"رکورد یافت نشد\" });\n    }\n\n    if (record.files && record.files.length > 0) {\n      record.files.forEach((file) => {\n        if (fs.existsSync(file.path)) {\n          fs.unlinkSync(file.path);\n        }\n      });\n    }\n\n    await TrainerRewardPunishment.findByIdAndDelete(recordId);\n\n    res.status(200).json({ message: \"رکورد حذف شد\" });\n  } catch (error) {\n    console.error(\"Error deleting record:\", error);\n    res.status(500).json({ message: \"خطا در حذف رکورد\" });\n  }\n});\n\nexport { router as trainerRewardPunishmentRoutes };\n","size_bytes":4088},"server/models/trainerRewardPunishment.ts":{"content":"import mongoose, { Schema, Document, Types } from \"mongoose\";\n\nexport interface ITrainerRewardPunishment extends Document {\n  trainer: Types.ObjectId;\n  type: \"reward\" | \"punishment\"; // نوع: مکافات یا مجازات\n  description: string;\n  files: { \n    filename: string; \n    originalName: string; \n    path: string; \n    size: number;\n  }[];\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nconst TrainerRewardPunishmentSchema = new Schema<ITrainerRewardPunishment>(\n  {\n    trainer: {\n      type: Schema.Types.ObjectId,\n      ref: \"Trainer\",\n      required: true,\n    },\n    type: {\n      type: String,\n      enum: [\"reward\", \"punishment\"],\n      required: true,\n    },\n    description: {\n      type: String,\n      required: true,\n      trim: true,\n    },\n    files: {\n      type: [{\n        filename: String,\n        originalName: String,\n        path: String,\n        size: Number,\n      }],\n      default: [],\n    },\n  },\n  { timestamps: true }\n);\n\nexport const TrainerRewardPunishment = mongoose.model<ITrainerRewardPunishment>(\n  \"TrainerRewardPunishment\",\n  TrainerRewardPunishmentSchema\n);\n","size_bytes":1103},"client/src/components/residents/TrainerRewardPunishmentModal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { X, Save, Upload, FileText } from \"lucide-react\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\ninterface TrainerRewardPunishmentModalProps {\n  trainerId: string;\n  trainerName: string;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function TrainerRewardPunishmentModal({\n  trainerId,\n  trainerName,\n  isOpen,\n  onClose,\n}: TrainerRewardPunishmentModalProps) {\n  const [type, setType] = useState<\"reward\" | \"punishment\">(\"reward\");\n  const [description, setDescription] = useState(\"\");\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n  const queryClient = useQueryClient();\n\n  const createRecordMutation = useMutation({\n    mutationFn: async (formData: FormData) => {\n      const res = await fetch(\"/api/trainer-reward-punishment\", {\n        method: \"POST\",\n        body: formData,\n      });\n      if (!res.ok) throw new Error(\"خطا در ثبت مجازات/مکافات\");\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"trainer-reward-punishment\", trainerId] });\n      setType(\"reward\");\n      setDescription(\"\");\n      setSelectedFiles([]);\n      onClose();\n    },\n  });\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files) {\n      setSelectedFiles(Array.from(e.target.files));\n    }\n  };\n\n  const handleRemoveFile = (index: number) => {\n    setSelectedFiles((prev) => prev.filter((_, i) => i !== index));\n  };\n\n  const handleSubmit = () => {\n    if (!description.trim()) {\n      alert(\"لطفاً توضیحات را وارد کنید\");\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append(\"trainerId\", trainerId);\n    formData.append(\"type\", type);\n    formData.append(\"description\", description.trim());\n    \n    selectedFiles.forEach((file) => {\n      formData.append(\"files\", file);\n    });\n\n    createRecordMutation.mutate(formData);\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return \"0 Bytes\";\n    const k = 1024;\n    const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\"];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return Math.round(bytes / Math.pow(k, i) * 100) / 100 + \" \" + sizes[i];\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle className=\"text-xl font-bold\">\n            ثبت مجازات/مکافات برای: {trainerName}\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"type\" className=\"mb-2 block\">\n              نوع\n            </Label>\n            <Select value={type} onValueChange={(value: \"reward\" | \"punishment\") => setType(value)}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"نوع را انتخاب کنید\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"reward\">مکافات</SelectItem>\n                <SelectItem value=\"punishment\">مجازات</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div>\n            <Label htmlFor=\"description\" className=\"mb-2 block\">\n              توضیحات\n            </Label>\n            <Textarea\n              id=\"description\"\n              placeholder=\"توضیحات را وارد کنید...\"\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              className=\"min-h-[100px]\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"files\" className=\"mb-2 block\">\n              آپلود فایل‌ها (حداکثر 10 فایل)\n            </Label>\n            <div className=\"border-2 border-dashed border-slate-300 rounded-lg p-4 text-center hover:border-hospital-green-500 transition-colors\">\n              <input\n                type=\"file\"\n                id=\"files\"\n                multiple\n                onChange={handleFileChange}\n                className=\"hidden\"\n              />\n              <label\n                htmlFor=\"files\"\n                className=\"cursor-pointer flex flex-col items-center gap-2\"\n              >\n                <Upload className=\"h-8 w-8 text-slate-400\" />\n                <span className=\"text-sm text-slate-600\">\n                  کلیک کنید یا فایل‌ها را بکشید و رها کنید\n                </span>\n                <span className=\"text-xs text-slate-400\">\n                  حداکثر حجم هر فایل: 10MB\n                </span>\n              </label>\n            </div>\n\n            {selectedFiles.length > 0 && (\n              <div className=\"mt-3 space-y-2\">\n                <p className=\"text-sm font-semibold text-slate-600\">\n                  فایل‌های انتخاب شده:\n                </p>\n                {selectedFiles.map((file, index) => (\n                  <div\n                    key={index}\n                    className=\"flex items-center justify-between p-2 bg-white border rounded-lg\"\n                  >\n                    <div className=\"flex items-center gap-2\">\n                      <FileText className=\"h-4 w-4 text-slate-500\" />\n                      <span className=\"text-sm\">{file.name}</span>\n                      <span className=\"text-xs text-slate-400\">\n                        ({formatFileSize(file.size)})\n                      </span>\n                    </div>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleRemoveFile(index)}\n                      className=\"text-red-500 hover:text-red-700\"\n                    >\n                      <X className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n\n          <Button\n            onClick={handleSubmit}\n            disabled={createRecordMutation.isPending}\n            className=\"w-full bg-hospital-green-600 hover:bg-hospital-green-700\"\n          >\n            <Save className=\"h-4 w-4 ml-2\" />\n            {createRecordMutation.isPending ? \"در حال ثبت...\" : \"ثبت\"}\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":6734},"client/src/components/layout/Layout.tsx":{"content":"import { useState, ReactNode } from \"react\";\nimport Sidebar from \"./sidebar\";\nimport Header from \"./header\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\n\ninterface LayoutProps {\n  children: ReactNode;\n}\n\nexport default function Layout({ children }: LayoutProps) {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const isMobile = useIsMobile();\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      {/* Header */}\n      <Header onMenuClick={() => setIsMobileMenuOpen(true)} />\n\n      {/* Sidebar */}\n      <Sidebar \n        isOpen={!isMobile || isMobileMenuOpen} \n        onClose={() => setIsMobileMenuOpen(false)} \n      />\n\n      {/* Main Content */}\n      <main className={`pt-16 transition-all duration-300 ${!isMobile ? 'mr-64' : 'mr-0'}`}>\n        {children}\n      </main>\n    </div>\n  );\n}\n","size_bytes":834}},"version":2}